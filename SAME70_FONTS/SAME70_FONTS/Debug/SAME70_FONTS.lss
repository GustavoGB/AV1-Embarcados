
SAME70_FONTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000077c4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004077c4  004077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  004077cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000004d8  204009b8  00408184  000209b8  2**2
                  ALLOC
  4 .stack        00002000  20400e90  0040865c  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402e90  0040a65c  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   000156d8  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002770  00000000  00000000  00036117  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000064fe  00000000  00000000  00038887  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b20  00000000  00000000  0003ed85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000aa8  00000000  00000000  0003f8a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000834d  00000000  00000000  0004034d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b8ba  00000000  00000000  0004869a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094c71  00000000  00000000  00053f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003a98  00000000  00000000  000e8bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	90 2e 40 20 f5 28 40 00 a5 29 40 00 a5 29 40 00     ..@ .(@..)@..)@.
  400010:	a5 29 40 00 a5 29 40 00 a5 29 40 00 00 00 00 00     .)@..)@..)@.....
	...
  40002c:	a5 29 40 00 a5 29 40 00 00 00 00 00 a5 29 40 00     .)@..)@......)@.
  40003c:	a5 29 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .)@..)@..)@..)@.
  40004c:	35 02 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     5.@..)@..)@..)@.
  40005c:	a5 29 40 00 a5 29 40 00 00 00 00 00 f5 24 40 00     .)@..)@......$@.
  40006c:	0d 25 40 00 25 25 40 00 a5 29 40 00 a5 29 40 00     .%@.%%@..)@..)@.
  40007c:	a5 29 40 00 3d 25 40 00 55 25 40 00 a5 29 40 00     .)@.=%@.U%@..)@.
  40008c:	a5 29 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .)@..)@..)@..)@.
  40009c:	a5 29 40 00 11 02 40 00 a5 29 40 00 a5 29 40 00     .)@...@..)@..)@.
  4000ac:	a5 29 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .)@..)@..)@..)@.
  4000bc:	a5 29 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .)@..)@..)@..)@.
  4000cc:	a5 29 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .)@..)@..)@..)@.
  4000dc:	a5 29 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .)@..)@..)@..)@.
  4000ec:	a5 29 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .)@..)@..)@..)@.
  4000fc:	a5 29 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .)@..)@..)@..)@.
  40010c:	a5 29 40 00 a5 29 40 00 00 00 00 00 00 00 00 00     .)@..)@.........
  40011c:	00 00 00 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .....)@..)@..)@.
  40012c:	a5 29 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .)@..)@..)@..)@.
  40013c:	a5 29 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .)@..)@..)@..)@.
  40014c:	a5 29 40 00 a5 29 40 00 a5 29 40 00 a5 29 40 00     .)@..)@..)@..)@.
  40015c:	a5 29 40 00 a5 29 40 00 a5 29 40 00                 .)@..)@..)@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	004077cc 	.word	0x004077cc

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004077cc 	.word	0x004077cc
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	004077cc 	.word	0x004077cc
  4001d0:	00000000 	.word	0x00000000

004001d4 <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
  4001d4:	b480      	push	{r7}
  4001d6:	b083      	sub	sp, #12
  4001d8:	af00      	add	r7, sp, #0
  4001da:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
  4001dc:	687b      	ldr	r3, [r7, #4]
  4001de:	68db      	ldr	r3, [r3, #12]
}
  4001e0:	4618      	mov	r0, r3
  4001e2:	370c      	adds	r7, #12
  4001e4:	46bd      	mov	sp, r7
  4001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001ea:	4770      	bx	lr

004001ec <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4001ec:	b480      	push	{r7}
  4001ee:	b085      	sub	sp, #20
  4001f0:	af00      	add	r7, sp, #0
  4001f2:	6078      	str	r0, [r7, #4]
  4001f4:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001f6:	687a      	ldr	r2, [r7, #4]
  4001f8:	683b      	ldr	r3, [r7, #0]
  4001fa:	019b      	lsls	r3, r3, #6
  4001fc:	4413      	add	r3, r2
  4001fe:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  400200:	68fb      	ldr	r3, [r7, #12]
  400202:	6a1b      	ldr	r3, [r3, #32]
}
  400204:	4618      	mov	r0, r3
  400206:	3714      	adds	r7, #20
  400208:	46bd      	mov	sp, r7
  40020a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40020e:	4770      	bx	lr

00400210 <TC1_Handler>:
	pio_set(pio,mask);
}
volatile uint8_t flag_start = 1;

// Interrupcoes
void TC1_Handler(void){
  400210:	b580      	push	{r7, lr}
  400212:	b082      	sub	sp, #8
  400214:	af00      	add	r7, sp, #0
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrup??o foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 1);
  400216:	2101      	movs	r1, #1
  400218:	4804      	ldr	r0, [pc, #16]	; (40022c <TC1_Handler+0x1c>)
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <TC1_Handler+0x20>)
  40021c:	4798      	blx	r3
  40021e:	4603      	mov	r3, r0
  400220:	607b      	str	r3, [r7, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  400222:	687b      	ldr	r3, [r7, #4]

	
}
  400224:	bf00      	nop
  400226:	3708      	adds	r7, #8
  400228:	46bd      	mov	sp, r7
  40022a:	bd80      	pop	{r7, pc}
  40022c:	4000c000 	.word	0x4000c000
  400230:	004001ed 	.word	0x004001ed

00400234 <RTT_Handler>:

void RTT_Handler(void)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status */
	ul_status = rtt_get_status(RTT);
  40023a:	480d      	ldr	r0, [pc, #52]	; (400270 <RTT_Handler+0x3c>)
  40023c:	4b0d      	ldr	r3, [pc, #52]	; (400274 <RTT_Handler+0x40>)
  40023e:	4798      	blx	r3
  400240:	6078      	str	r0, [r7, #4]

	/* IRQ due to Time has changed */
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {  }

	/* IRQ due to Alarm */
	if(but_start == 1){
  400242:	4b0d      	ldr	r3, [pc, #52]	; (400278 <RTT_Handler+0x44>)
  400244:	781b      	ldrb	r3, [r3, #0]
  400246:	b2db      	uxtb	r3, r3
  400248:	2b01      	cmp	r3, #1
  40024a:	d10c      	bne.n	400266 <RTT_Handler+0x32>
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  40024c:	687b      	ldr	r3, [r7, #4]
  40024e:	f003 0301 	and.w	r3, r3, #1
  400252:	2b00      	cmp	r3, #0
  400254:	d007      	beq.n	400266 <RTT_Handler+0x32>
		 //tc_start(Tc * TC, int ID_TC, int TC_CHANNEL, int freq);
		 f_rtt_alarme = true;
  400256:	4b09      	ldr	r3, [pc, #36]	; (40027c <RTT_Handler+0x48>)
  400258:	2201      	movs	r2, #1
  40025a:	701a      	strb	r2, [r3, #0]
		 pulsos += 1;
  40025c:	4b08      	ldr	r3, [pc, #32]	; (400280 <RTT_Handler+0x4c>)
  40025e:	681b      	ldr	r3, [r3, #0]
  400260:	3301      	adds	r3, #1
  400262:	4a07      	ldr	r2, [pc, #28]	; (400280 <RTT_Handler+0x4c>)
  400264:	6013      	str	r3, [r2, #0]
	}
	}
}
  400266:	bf00      	nop
  400268:	3708      	adds	r7, #8
  40026a:	46bd      	mov	sp, r7
  40026c:	bd80      	pop	{r7, pc}
  40026e:	bf00      	nop
  400270:	400e1830 	.word	0x400e1830
  400274:	004001d5 	.word	0x004001d5
  400278:	204009d5 	.word	0x204009d5
  40027c:	204009d4 	.word	0x204009d4
  400280:	20400e64 	.word	0x20400e64

00400284 <configure_lcd>:

struct ili9488_opt_t g_ili9488_display_opt;

void configure_lcd(void){
  400284:	b598      	push	{r3, r4, r7, lr}
  400286:	af00      	add	r7, sp, #0
	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  400288:	4b0d      	ldr	r3, [pc, #52]	; (4002c0 <configure_lcd+0x3c>)
  40028a:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40028e:	601a      	str	r2, [r3, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  400290:	4b0b      	ldr	r3, [pc, #44]	; (4002c0 <configure_lcd+0x3c>)
  400292:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  400296:	605a      	str	r2, [r3, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  400298:	4b09      	ldr	r3, [pc, #36]	; (4002c0 <configure_lcd+0x3c>)
  40029a:	4a0a      	ldr	r2, [pc, #40]	; (4002c4 <configure_lcd+0x40>)
  40029c:	609a      	str	r2, [r3, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  40029e:	4b08      	ldr	r3, [pc, #32]	; (4002c0 <configure_lcd+0x3c>)
  4002a0:	4a08      	ldr	r2, [pc, #32]	; (4002c4 <configure_lcd+0x40>)
  4002a2:	60da      	str	r2, [r3, #12]

	/* Initialize LCD */
	ili9488_init(&g_ili9488_display_opt);
  4002a4:	4806      	ldr	r0, [pc, #24]	; (4002c0 <configure_lcd+0x3c>)
  4002a6:	4b08      	ldr	r3, [pc, #32]	; (4002c8 <configure_lcd+0x44>)
  4002a8:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  4002aa:	f240 13df 	movw	r3, #479	; 0x1df
  4002ae:	f240 123f 	movw	r2, #319	; 0x13f
  4002b2:	2100      	movs	r1, #0
  4002b4:	2000      	movs	r0, #0
  4002b6:	4c05      	ldr	r4, [pc, #20]	; (4002cc <configure_lcd+0x48>)
  4002b8:	47a0      	blx	r4
	
}
  4002ba:	bf00      	nop
  4002bc:	bd98      	pop	{r3, r4, r7, pc}
  4002be:	bf00      	nop
  4002c0:	20400e54 	.word	0x20400e54
  4002c4:	00fcfcfc 	.word	0x00fcfcfc
  4002c8:	00400da1 	.word	0x00400da1
  4002cc:	00400fed 	.word	0x00400fed

004002d0 <font_draw_text>:


void font_draw_text(tFont *font, const char *text, int x, int y, int spacing) {
  4002d0:	b590      	push	{r4, r7, lr}
  4002d2:	b08b      	sub	sp, #44	; 0x2c
  4002d4:	af02      	add	r7, sp, #8
  4002d6:	60f8      	str	r0, [r7, #12]
  4002d8:	60b9      	str	r1, [r7, #8]
  4002da:	607a      	str	r2, [r7, #4]
  4002dc:	603b      	str	r3, [r7, #0]
	char *p = text;
  4002de:	68bb      	ldr	r3, [r7, #8]
  4002e0:	61fb      	str	r3, [r7, #28]
	while(*p != NULL) {
  4002e2:	e02e      	b.n	400342 <font_draw_text+0x72>
		char letter = *p;
  4002e4:	69fb      	ldr	r3, [r7, #28]
  4002e6:	781b      	ldrb	r3, [r3, #0]
  4002e8:	76fb      	strb	r3, [r7, #27]
		int letter_offset = letter - font->start_char;
  4002ea:	7efb      	ldrb	r3, [r7, #27]
  4002ec:	68fa      	ldr	r2, [r7, #12]
  4002ee:	7a12      	ldrb	r2, [r2, #8]
  4002f0:	1a9b      	subs	r3, r3, r2
  4002f2:	617b      	str	r3, [r7, #20]
		if(letter <= font->end_char) {
  4002f4:	68fb      	ldr	r3, [r7, #12]
  4002f6:	7a5b      	ldrb	r3, [r3, #9]
  4002f8:	7efa      	ldrb	r2, [r7, #27]
  4002fa:	429a      	cmp	r2, r3
  4002fc:	d81e      	bhi.n	40033c <font_draw_text+0x6c>
			tChar *current_char = font->chars + letter_offset;
  4002fe:	68fb      	ldr	r3, [r7, #12]
  400300:	685a      	ldr	r2, [r3, #4]
  400302:	697b      	ldr	r3, [r7, #20]
  400304:	00db      	lsls	r3, r3, #3
  400306:	4413      	add	r3, r2
  400308:	613b      	str	r3, [r7, #16]
			ili9488_draw_pixmap(x, y, current_char->image->width, current_char->image->height, current_char->image->data);
  40030a:	6878      	ldr	r0, [r7, #4]
  40030c:	6839      	ldr	r1, [r7, #0]
  40030e:	693b      	ldr	r3, [r7, #16]
  400310:	685b      	ldr	r3, [r3, #4]
  400312:	685b      	ldr	r3, [r3, #4]
  400314:	461a      	mov	r2, r3
  400316:	693b      	ldr	r3, [r7, #16]
  400318:	685b      	ldr	r3, [r3, #4]
  40031a:	689b      	ldr	r3, [r3, #8]
  40031c:	461c      	mov	r4, r3
  40031e:	693b      	ldr	r3, [r7, #16]
  400320:	685b      	ldr	r3, [r3, #4]
  400322:	681b      	ldr	r3, [r3, #0]
  400324:	9300      	str	r3, [sp, #0]
  400326:	4623      	mov	r3, r4
  400328:	4c0a      	ldr	r4, [pc, #40]	; (400354 <font_draw_text+0x84>)
  40032a:	47a0      	blx	r4
			x += current_char->image->width + spacing;
  40032c:	693b      	ldr	r3, [r7, #16]
  40032e:	685b      	ldr	r3, [r3, #4]
  400330:	685a      	ldr	r2, [r3, #4]
  400332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400334:	4413      	add	r3, r2
  400336:	687a      	ldr	r2, [r7, #4]
  400338:	4413      	add	r3, r2
  40033a:	607b      	str	r3, [r7, #4]
		}
		p++;
  40033c:	69fb      	ldr	r3, [r7, #28]
  40033e:	3301      	adds	r3, #1
  400340:	61fb      	str	r3, [r7, #28]
	while(*p != NULL) {
  400342:	69fb      	ldr	r3, [r7, #28]
  400344:	781b      	ldrb	r3, [r3, #0]
  400346:	2b00      	cmp	r3, #0
  400348:	d1cc      	bne.n	4002e4 <font_draw_text+0x14>
	}	
}
  40034a:	bf00      	nop
  40034c:	3724      	adds	r7, #36	; 0x24
  40034e:	46bd      	mov	sp, r7
  400350:	bd90      	pop	{r4, r7, pc}
  400352:	bf00      	nop
  400354:	004010c9 	.word	0x004010c9

00400358 <main>:


int main(void) {
  400358:	b5f0      	push	{r4, r5, r6, r7, lr}
  40035a:	b0a1      	sub	sp, #132	; 0x84
  40035c:	af02      	add	r7, sp, #8
	board_init();
  40035e:	4b4e      	ldr	r3, [pc, #312]	; (400498 <main+0x140>)
  400360:	4798      	blx	r3
	sysclk_init();	
  400362:	4b4e      	ldr	r3, [pc, #312]	; (40049c <main+0x144>)
  400364:	4798      	blx	r3
	configure_lcd();
  400366:	4b4e      	ldr	r3, [pc, #312]	; (4004a0 <main+0x148>)
  400368:	4798      	blx	r3
	
	while(1) {
		if (f_rtt_alarme){
  40036a:	4b4e      	ldr	r3, [pc, #312]	; (4004a4 <main+0x14c>)
  40036c:	781b      	ldrb	r3, [r3, #0]
  40036e:	b2db      	uxtb	r3, r3
  400370:	2b00      	cmp	r3, #0
  400372:	d0fa      	beq.n	40036a <main+0x12>
       * 
       * Nesse exemplo o irqRTTvalue = 8, causando uma
       * interrup??o a cada 2 segundos (lembre que usamos o 
       * pllPreScale, cada incremento do RTT leva 500ms (2Hz).
       */
      uint16_t pllPreScale = (int) (((float) 32768) / 2.0);
  400374:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  400378:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
      uint32_t irqRTTvalue  = 4;
  40037c:	2304      	movs	r3, #4
  40037e:	673b      	str	r3, [r7, #112]	; 0x70
	  char distanciaTotalBuffer[32];
	  char tempoTrechoTotalBuffer[32];
	  char omegaBuffer[32];
 
		  
		  int (omega)          = 2 * PI * pulsos/dT;  
  400380:	4b49      	ldr	r3, [pc, #292]	; (4004a8 <main+0x150>)
  400382:	681a      	ldr	r2, [r3, #0]
  400384:	4b49      	ldr	r3, [pc, #292]	; (4004ac <main+0x154>)
  400386:	4610      	mov	r0, r2
  400388:	4798      	blx	r3
  40038a:	4c49      	ldr	r4, [pc, #292]	; (4004b0 <main+0x158>)
  40038c:	a33c      	add	r3, pc, #240	; (adr r3, 400480 <main+0x128>)
  40038e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400392:	47a0      	blx	r4
  400394:	4603      	mov	r3, r0
  400396:	460c      	mov	r4, r1
  400398:	461d      	mov	r5, r3
  40039a:	4626      	mov	r6, r4
  40039c:	4b45      	ldr	r3, [pc, #276]	; (4004b4 <main+0x15c>)
  40039e:	681a      	ldr	r2, [r3, #0]
  4003a0:	4b42      	ldr	r3, [pc, #264]	; (4004ac <main+0x154>)
  4003a2:	4610      	mov	r0, r2
  4003a4:	4798      	blx	r3
  4003a6:	4602      	mov	r2, r0
  4003a8:	460b      	mov	r3, r1
  4003aa:	4c43      	ldr	r4, [pc, #268]	; (4004b8 <main+0x160>)
  4003ac:	4628      	mov	r0, r5
  4003ae:	4631      	mov	r1, r6
  4003b0:	47a0      	blx	r4
  4003b2:	4603      	mov	r3, r0
  4003b4:	460c      	mov	r4, r1
  4003b6:	4619      	mov	r1, r3
  4003b8:	4622      	mov	r2, r4
  4003ba:	4b40      	ldr	r3, [pc, #256]	; (4004bc <main+0x164>)
  4003bc:	4608      	mov	r0, r1
  4003be:	4611      	mov	r1, r2
  4003c0:	4798      	blx	r3
  4003c2:	4603      	mov	r3, r0
  4003c4:	66fb      	str	r3, [r7, #108]	; 0x6c
		  int (velocidade)     = omega * 0.650;
  4003c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
  4003c8:	4b38      	ldr	r3, [pc, #224]	; (4004ac <main+0x154>)
  4003ca:	4610      	mov	r0, r2
  4003cc:	4798      	blx	r3
  4003ce:	4c38      	ldr	r4, [pc, #224]	; (4004b0 <main+0x158>)
  4003d0:	a32d      	add	r3, pc, #180	; (adr r3, 400488 <main+0x130>)
  4003d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003d6:	47a0      	blx	r4
  4003d8:	4603      	mov	r3, r0
  4003da:	460c      	mov	r4, r1
  4003dc:	4619      	mov	r1, r3
  4003de:	4622      	mov	r2, r4
  4003e0:	4b36      	ldr	r3, [pc, #216]	; (4004bc <main+0x164>)
  4003e2:	4608      	mov	r0, r1
  4003e4:	4611      	mov	r1, r2
  4003e6:	4798      	blx	r3
  4003e8:	4603      	mov	r3, r0
  4003ea:	66bb      	str	r3, [r7, #104]	; 0x68
		  int (distanciaTotal) = 2 * PI * 0.650 * pulsos;
  4003ec:	4b2e      	ldr	r3, [pc, #184]	; (4004a8 <main+0x150>)
  4003ee:	681a      	ldr	r2, [r3, #0]
  4003f0:	4b2e      	ldr	r3, [pc, #184]	; (4004ac <main+0x154>)
  4003f2:	4610      	mov	r0, r2
  4003f4:	4798      	blx	r3
  4003f6:	4c2e      	ldr	r4, [pc, #184]	; (4004b0 <main+0x158>)
  4003f8:	a325      	add	r3, pc, #148	; (adr r3, 400490 <main+0x138>)
  4003fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003fe:	47a0      	blx	r4
  400400:	4603      	mov	r3, r0
  400402:	460c      	mov	r4, r1
  400404:	4619      	mov	r1, r3
  400406:	4622      	mov	r2, r4
  400408:	4b2c      	ldr	r3, [pc, #176]	; (4004bc <main+0x164>)
  40040a:	4608      	mov	r0, r1
  40040c:	4611      	mov	r1, r2
  40040e:	4798      	blx	r3
  400410:	4603      	mov	r3, r0
  400412:	667b      	str	r3, [r7, #100]	; 0x64
		  
		  sprintf(omegaBuffer,"%d",omega);
  400414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
  400416:	f107 0344 	add.w	r3, r7, #68	; 0x44
  40041a:	4929      	ldr	r1, [pc, #164]	; (4004c0 <main+0x168>)
  40041c:	4618      	mov	r0, r3
  40041e:	4b29      	ldr	r3, [pc, #164]	; (4004c4 <main+0x16c>)
  400420:	4798      	blx	r3
		  sprintf(velocidadeBuffer,"%d",velocidade);
  400422:	6eba      	ldr	r2, [r7, #104]	; 0x68
  400424:	1d3b      	adds	r3, r7, #4
  400426:	4926      	ldr	r1, [pc, #152]	; (4004c0 <main+0x168>)
  400428:	4618      	mov	r0, r3
  40042a:	4b26      	ldr	r3, [pc, #152]	; (4004c4 <main+0x16c>)
  40042c:	4798      	blx	r3
		  sprintf(distanciaTotalBuffer,"%d",distanciaTotal);
  40042e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
  400430:	f107 0324 	add.w	r3, r7, #36	; 0x24
  400434:	4922      	ldr	r1, [pc, #136]	; (4004c0 <main+0x168>)
  400436:	4618      	mov	r0, r3
  400438:	4b22      	ldr	r3, [pc, #136]	; (4004c4 <main+0x16c>)
  40043a:	4798      	blx	r3
		  
		  font_draw_text(&omega,omega, 50, 100, 1);
  40043c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  40043e:	4619      	mov	r1, r3
  400440:	f107 006c 	add.w	r0, r7, #108	; 0x6c
  400444:	2301      	movs	r3, #1
  400446:	9300      	str	r3, [sp, #0]
  400448:	2364      	movs	r3, #100	; 0x64
  40044a:	2232      	movs	r2, #50	; 0x32
  40044c:	4c1e      	ldr	r4, [pc, #120]	; (4004c8 <main+0x170>)
  40044e:	47a0      	blx	r4
		  font_draw_text(&velocidade, velocidade, 50, 100, 1);
  400450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  400452:	4619      	mov	r1, r3
  400454:	f107 0068 	add.w	r0, r7, #104	; 0x68
  400458:	2301      	movs	r3, #1
  40045a:	9300      	str	r3, [sp, #0]
  40045c:	2364      	movs	r3, #100	; 0x64
  40045e:	2232      	movs	r2, #50	; 0x32
  400460:	4c19      	ldr	r4, [pc, #100]	; (4004c8 <main+0x170>)
  400462:	47a0      	blx	r4
		  font_draw_text(&distanciaTotal,distanciaTotal, 50, 100, 2); 			  
  400464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  400466:	4619      	mov	r1, r3
  400468:	f107 0064 	add.w	r0, r7, #100	; 0x64
  40046c:	2302      	movs	r3, #2
  40046e:	9300      	str	r3, [sp, #0]
  400470:	2364      	movs	r3, #100	; 0x64
  400472:	2232      	movs	r2, #50	; 0x32
  400474:	4c14      	ldr	r4, [pc, #80]	; (4004c8 <main+0x170>)
  400476:	47a0      	blx	r4
      *   rtt_read_timer_value()
      */
      /*
       * CLEAR FLAG
       */
      f_rtt_alarme = false;
  400478:	4b0a      	ldr	r3, [pc, #40]	; (4004a4 <main+0x14c>)
  40047a:	2200      	movs	r2, #0
  40047c:	701a      	strb	r2, [r3, #0]
		if (f_rtt_alarme){
  40047e:	e774      	b.n	40036a <main+0x12>
  400480:	51eb851f 	.word	0x51eb851f
  400484:	40191eb8 	.word	0x40191eb8
  400488:	cccccccd 	.word	0xcccccccd
  40048c:	3fe4cccc 	.word	0x3fe4cccc
  400490:	ced91688 	.word	0xced91688
  400494:	401053f7 	.word	0x401053f7
  400498:	00401d2d 	.word	0x00401d2d
  40049c:	00401869 	.word	0x00401869
  4004a0:	00400285 	.word	0x00400285
  4004a4:	204009d4 	.word	0x204009d4
  4004a8:	20400e64 	.word	0x20400e64
  4004ac:	00402ec1 	.word	0x00402ec1
  4004b0:	00402f8d 	.word	0x00402f8d
  4004b4:	20400e40 	.word	0x20400e40
  4004b8:	004031e1 	.word	0x004031e1
  4004bc:	004033b1 	.word	0x004033b1
  4004c0:	00407510 	.word	0x00407510
  4004c4:	004034ed 	.word	0x004034ed
  4004c8:	004002d1 	.word	0x004002d1

004004cc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4004cc:	b480      	push	{r7}
  4004ce:	b083      	sub	sp, #12
  4004d0:	af00      	add	r7, sp, #0
  4004d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4004d4:	687b      	ldr	r3, [r7, #4]
  4004d6:	2b07      	cmp	r3, #7
  4004d8:	d825      	bhi.n	400526 <osc_get_rate+0x5a>
  4004da:	a201      	add	r2, pc, #4	; (adr r2, 4004e0 <osc_get_rate+0x14>)
  4004dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4004e0:	00400501 	.word	0x00400501
  4004e4:	00400507 	.word	0x00400507
  4004e8:	0040050d 	.word	0x0040050d
  4004ec:	00400513 	.word	0x00400513
  4004f0:	00400517 	.word	0x00400517
  4004f4:	0040051b 	.word	0x0040051b
  4004f8:	0040051f 	.word	0x0040051f
  4004fc:	00400523 	.word	0x00400523
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400500:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400504:	e010      	b.n	400528 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40050a:	e00d      	b.n	400528 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40050c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400510:	e00a      	b.n	400528 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400512:	4b08      	ldr	r3, [pc, #32]	; (400534 <osc_get_rate+0x68>)
  400514:	e008      	b.n	400528 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400516:	4b08      	ldr	r3, [pc, #32]	; (400538 <osc_get_rate+0x6c>)
  400518:	e006      	b.n	400528 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40051a:	4b08      	ldr	r3, [pc, #32]	; (40053c <osc_get_rate+0x70>)
  40051c:	e004      	b.n	400528 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40051e:	4b07      	ldr	r3, [pc, #28]	; (40053c <osc_get_rate+0x70>)
  400520:	e002      	b.n	400528 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400522:	4b06      	ldr	r3, [pc, #24]	; (40053c <osc_get_rate+0x70>)
  400524:	e000      	b.n	400528 <osc_get_rate+0x5c>
	}

	return 0;
  400526:	2300      	movs	r3, #0
}
  400528:	4618      	mov	r0, r3
  40052a:	370c      	adds	r7, #12
  40052c:	46bd      	mov	sp, r7
  40052e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400532:	4770      	bx	lr
  400534:	003d0900 	.word	0x003d0900
  400538:	007a1200 	.word	0x007a1200
  40053c:	00b71b00 	.word	0x00b71b00

00400540 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400540:	b580      	push	{r7, lr}
  400542:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400544:	2006      	movs	r0, #6
  400546:	4b05      	ldr	r3, [pc, #20]	; (40055c <sysclk_get_main_hz+0x1c>)
  400548:	4798      	blx	r3
  40054a:	4602      	mov	r2, r0
  40054c:	4613      	mov	r3, r2
  40054e:	009b      	lsls	r3, r3, #2
  400550:	4413      	add	r3, r2
  400552:	009a      	lsls	r2, r3, #2
  400554:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400556:	4618      	mov	r0, r3
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	004004cd 	.word	0x004004cd

00400560 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400560:	b580      	push	{r7, lr}
  400562:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400564:	4b02      	ldr	r3, [pc, #8]	; (400570 <sysclk_get_peripheral_hz+0x10>)
  400566:	4798      	blx	r3
  400568:	4603      	mov	r3, r0
  40056a:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  40056c:	4618      	mov	r0, r3
  40056e:	bd80      	pop	{r7, pc}
  400570:	00400541 	.word	0x00400541

00400574 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
  400574:	b480      	push	{r7}
  400576:	b083      	sub	sp, #12
  400578:	af00      	add	r7, sp, #0
  40057a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40057c:	687b      	ldr	r3, [r7, #4]
  40057e:	2280      	movs	r2, #128	; 0x80
  400580:	601a      	str	r2, [r3, #0]
}
  400582:	bf00      	nop
  400584:	370c      	adds	r7, #12
  400586:	46bd      	mov	sp, r7
  400588:	f85d 7b04 	ldr.w	r7, [sp], #4
  40058c:	4770      	bx	lr

0040058e <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
  40058e:	b480      	push	{r7}
  400590:	b083      	sub	sp, #12
  400592:	af00      	add	r7, sp, #0
  400594:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400596:	687b      	ldr	r3, [r7, #4]
  400598:	685b      	ldr	r3, [r3, #4]
  40059a:	f043 0201 	orr.w	r2, r3, #1
  40059e:	687b      	ldr	r3, [r7, #4]
  4005a0:	605a      	str	r2, [r3, #4]
}
  4005a2:	bf00      	nop
  4005a4:	370c      	adds	r7, #12
  4005a6:	46bd      	mov	sp, r7
  4005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005ac:	4770      	bx	lr

004005ae <spi_set_fixed_peripheral_select>:
 *  Peripheral Chip Select is controlled by SPI_MR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
  4005ae:	b480      	push	{r7}
  4005b0:	b083      	sub	sp, #12
  4005b2:	af00      	add	r7, sp, #0
  4005b4:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4005b6:	687b      	ldr	r3, [r7, #4]
  4005b8:	685b      	ldr	r3, [r3, #4]
  4005ba:	f023 0202 	bic.w	r2, r3, #2
  4005be:	687b      	ldr	r3, [r7, #4]
  4005c0:	605a      	str	r2, [r3, #4]
}
  4005c2:	bf00      	nop
  4005c4:	370c      	adds	r7, #12
  4005c6:	46bd      	mov	sp, r7
  4005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005cc:	4770      	bx	lr

004005ce <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
  4005ce:	b480      	push	{r7}
  4005d0:	b083      	sub	sp, #12
  4005d2:	af00      	add	r7, sp, #0
  4005d4:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4005d6:	687b      	ldr	r3, [r7, #4]
  4005d8:	685b      	ldr	r3, [r3, #4]
  4005da:	f023 0204 	bic.w	r2, r3, #4
  4005de:	687b      	ldr	r3, [r7, #4]
  4005e0:	605a      	str	r2, [r3, #4]
}
  4005e2:	bf00      	nop
  4005e4:	370c      	adds	r7, #12
  4005e6:	46bd      	mov	sp, r7
  4005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005ec:	4770      	bx	lr

004005ee <spi_get_peripheral_select_decode_setting>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
  4005ee:	b480      	push	{r7}
  4005f0:	b083      	sub	sp, #12
  4005f2:	af00      	add	r7, sp, #0
  4005f4:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4005f6:	687b      	ldr	r3, [r7, #4]
  4005f8:	685b      	ldr	r3, [r3, #4]
  4005fa:	f003 0304 	and.w	r3, r3, #4
  4005fe:	2b00      	cmp	r3, #0
  400600:	d001      	beq.n	400606 <spi_get_peripheral_select_decode_setting+0x18>
		return 1;
  400602:	2301      	movs	r3, #1
  400604:	e000      	b.n	400608 <spi_get_peripheral_select_decode_setting+0x1a>
	} else {
		return 0;
  400606:	2300      	movs	r3, #0
	}
}
  400608:	4618      	mov	r0, r3
  40060a:	370c      	adds	r7, #12
  40060c:	46bd      	mov	sp, r7
  40060e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400612:	4770      	bx	lr

00400614 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  400614:	b480      	push	{r7}
  400616:	b083      	sub	sp, #12
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	685b      	ldr	r3, [r3, #4]
  400620:	f043 0210 	orr.w	r2, r3, #16
  400624:	687b      	ldr	r3, [r7, #4]
  400626:	605a      	str	r2, [r3, #4]
}
  400628:	bf00      	nop
  40062a:	370c      	adds	r7, #12
  40062c:	46bd      	mov	sp, r7
  40062e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400632:	4770      	bx	lr

00400634 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  400634:	b480      	push	{r7}
  400636:	b083      	sub	sp, #12
  400638:	af00      	add	r7, sp, #0
  40063a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	685b      	ldr	r3, [r3, #4]
  400640:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  400644:	687b      	ldr	r3, [r7, #4]
  400646:	605a      	str	r2, [r3, #4]
}
  400648:	bf00      	nop
  40064a:	370c      	adds	r7, #12
  40064c:	46bd      	mov	sp, r7
  40064e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400652:	4770      	bx	lr

00400654 <spi_put>:
 * \param p_spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
  400654:	b480      	push	{r7}
  400656:	b083      	sub	sp, #12
  400658:	af00      	add	r7, sp, #0
  40065a:	6078      	str	r0, [r7, #4]
  40065c:	460b      	mov	r3, r1
  40065e:	807b      	strh	r3, [r7, #2]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400660:	887a      	ldrh	r2, [r7, #2]
  400662:	687b      	ldr	r3, [r7, #4]
  400664:	60da      	str	r2, [r3, #12]
}
  400666:	bf00      	nop
  400668:	370c      	adds	r7, #12
  40066a:	46bd      	mov	sp, r7
  40066c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400670:	4770      	bx	lr

00400672 <spi_get>:
 * \param p_spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
  400672:	b480      	push	{r7}
  400674:	b083      	sub	sp, #12
  400676:	af00      	add	r7, sp, #0
  400678:	6078      	str	r0, [r7, #4]
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  40067a:	687b      	ldr	r3, [r7, #4]
  40067c:	689b      	ldr	r3, [r3, #8]
  40067e:	b29b      	uxth	r3, r3
}
  400680:	4618      	mov	r0, r3
  400682:	370c      	adds	r7, #12
  400684:	46bd      	mov	sp, r7
  400686:	f85d 7b04 	ldr.w	r7, [sp], #4
  40068a:	4770      	bx	lr

0040068c <spi_is_tx_ready>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
  40068c:	b480      	push	{r7}
  40068e:	b083      	sub	sp, #12
  400690:	af00      	add	r7, sp, #0
  400692:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400694:	687b      	ldr	r3, [r7, #4]
  400696:	691b      	ldr	r3, [r3, #16]
  400698:	f003 0302 	and.w	r3, r3, #2
  40069c:	2b00      	cmp	r3, #0
  40069e:	d001      	beq.n	4006a4 <spi_is_tx_ready+0x18>
		return 1;
  4006a0:	2301      	movs	r3, #1
  4006a2:	e000      	b.n	4006a6 <spi_is_tx_ready+0x1a>
	} else {
		return 0;
  4006a4:	2300      	movs	r3, #0
	}
}
  4006a6:	4618      	mov	r0, r3
  4006a8:	370c      	adds	r7, #12
  4006aa:	46bd      	mov	sp, r7
  4006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006b0:	4770      	bx	lr

004006b2 <spi_is_rx_ready>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
  4006b2:	b480      	push	{r7}
  4006b4:	b083      	sub	sp, #12
  4006b6:	af00      	add	r7, sp, #0
  4006b8:	6078      	str	r0, [r7, #4]
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4006ba:	687b      	ldr	r3, [r7, #4]
  4006bc:	691a      	ldr	r2, [r3, #16]
  4006be:	f240 2301 	movw	r3, #513	; 0x201
  4006c2:	4013      	ands	r3, r2
  4006c4:	f240 2201 	movw	r2, #513	; 0x201
  4006c8:	4293      	cmp	r3, r2
  4006ca:	d101      	bne.n	4006d0 <spi_is_rx_ready+0x1e>
			== (SPI_SR_RDRF | SPI_SR_TXEMPTY)) {
		return 1;
  4006cc:	2301      	movs	r3, #1
  4006ce:	e000      	b.n	4006d2 <spi_is_rx_ready+0x20>
	} else {
		return 0;
  4006d0:	2300      	movs	r3, #0
	}
}
  4006d2:	4618      	mov	r0, r3
  4006d4:	370c      	adds	r7, #12
  4006d6:	46bd      	mov	sp, r7
  4006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006dc:	4770      	bx	lr
	...

004006e0 <spi_write_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to write.
 *
 */
static inline void spi_write_single(Spi *p_spi, uint8_t data)
{
  4006e0:	b580      	push	{r7, lr}
  4006e2:	b082      	sub	sp, #8
  4006e4:	af00      	add	r7, sp, #0
  4006e6:	6078      	str	r0, [r7, #4]
  4006e8:	460b      	mov	r3, r1
  4006ea:	70fb      	strb	r3, [r7, #3]
	spi_put(p_spi, (uint16_t)data);
  4006ec:	78fb      	ldrb	r3, [r7, #3]
  4006ee:	b29b      	uxth	r3, r3
  4006f0:	4619      	mov	r1, r3
  4006f2:	6878      	ldr	r0, [r7, #4]
  4006f4:	4b02      	ldr	r3, [pc, #8]	; (400700 <spi_write_single+0x20>)
  4006f6:	4798      	blx	r3
}
  4006f8:	bf00      	nop
  4006fa:	3708      	adds	r7, #8
  4006fc:	46bd      	mov	sp, r7
  4006fe:	bd80      	pop	{r7, pc}
  400700:	00400655 	.word	0x00400655

00400704 <spi_read_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
  400704:	b580      	push	{r7, lr}
  400706:	b082      	sub	sp, #8
  400708:	af00      	add	r7, sp, #0
  40070a:	6078      	str	r0, [r7, #4]
  40070c:	6039      	str	r1, [r7, #0]
	*data = (uint8_t)spi_get(p_spi);
  40070e:	6878      	ldr	r0, [r7, #4]
  400710:	4b04      	ldr	r3, [pc, #16]	; (400724 <spi_read_single+0x20>)
  400712:	4798      	blx	r3
  400714:	4603      	mov	r3, r0
  400716:	b2da      	uxtb	r2, r3
  400718:	683b      	ldr	r3, [r7, #0]
  40071a:	701a      	strb	r2, [r3, #0]
}
  40071c:	bf00      	nop
  40071e:	3708      	adds	r7, #8
  400720:	46bd      	mov	sp, r7
  400722:	bd80      	pop	{r7, pc}
  400724:	00400673 	.word	0x00400673

00400728 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400728:	b580      	push	{r7, lr}
  40072a:	b082      	sub	sp, #8
  40072c:	af00      	add	r7, sp, #0
  40072e:	6078      	str	r0, [r7, #4]
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  400730:	6878      	ldr	r0, [r7, #4]
  400732:	4b10      	ldr	r3, [pc, #64]	; (400774 <spi_master_init+0x4c>)
  400734:	4798      	blx	r3
#endif
	spi_reset(p_spi);
  400736:	6878      	ldr	r0, [r7, #4]
  400738:	4b0f      	ldr	r3, [pc, #60]	; (400778 <spi_master_init+0x50>)
  40073a:	4798      	blx	r3
	spi_set_master_mode(p_spi);
  40073c:	6878      	ldr	r0, [r7, #4]
  40073e:	4b0f      	ldr	r3, [pc, #60]	; (40077c <spi_master_init+0x54>)
  400740:	4798      	blx	r3
	spi_disable_mode_fault_detect(p_spi);
  400742:	6878      	ldr	r0, [r7, #4]
  400744:	4b0e      	ldr	r3, [pc, #56]	; (400780 <spi_master_init+0x58>)
  400746:	4798      	blx	r3
	spi_disable_loopback(p_spi);
  400748:	6878      	ldr	r0, [r7, #4]
  40074a:	4b0e      	ldr	r3, [pc, #56]	; (400784 <spi_master_init+0x5c>)
  40074c:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  40074e:	2100      	movs	r1, #0
  400750:	6878      	ldr	r0, [r7, #4]
  400752:	4b0d      	ldr	r3, [pc, #52]	; (400788 <spi_master_init+0x60>)
  400754:	4798      	blx	r3
	spi_set_fixed_peripheral_select(p_spi);
  400756:	6878      	ldr	r0, [r7, #4]
  400758:	4b0c      	ldr	r3, [pc, #48]	; (40078c <spi_master_init+0x64>)
  40075a:	4798      	blx	r3
	spi_disable_peripheral_select_decode(p_spi);
  40075c:	6878      	ldr	r0, [r7, #4]
  40075e:	4b0c      	ldr	r3, [pc, #48]	; (400790 <spi_master_init+0x68>)
  400760:	4798      	blx	r3
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400762:	2100      	movs	r1, #0
  400764:	6878      	ldr	r0, [r7, #4]
  400766:	4b0b      	ldr	r3, [pc, #44]	; (400794 <spi_master_init+0x6c>)
  400768:	4798      	blx	r3
}
  40076a:	bf00      	nop
  40076c:	3708      	adds	r7, #8
  40076e:	46bd      	mov	sp, r7
  400770:	bd80      	pop	{r7, pc}
  400772:	bf00      	nop
  400774:	004011c1 	.word	0x004011c1
  400778:	00400575 	.word	0x00400575
  40077c:	0040058f 	.word	0x0040058f
  400780:	00400615 	.word	0x00400615
  400784:	00400635 	.word	0x00400635
  400788:	004011fd 	.word	0x004011fd
  40078c:	004005af 	.word	0x004005af
  400790:	004005cf 	.word	0x004005cf
  400794:	00401231 	.word	0x00401231

00400798 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400798:	b590      	push	{r4, r7, lr}
  40079a:	b087      	sub	sp, #28
  40079c:	af00      	add	r7, sp, #0
  40079e:	60f8      	str	r0, [r7, #12]
  4007a0:	60b9      	str	r1, [r7, #8]
  4007a2:	603b      	str	r3, [r7, #0]
  4007a4:	4613      	mov	r3, r2
  4007a6:	71fb      	strb	r3, [r7, #7]
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4007a8:	4b20      	ldr	r3, [pc, #128]	; (40082c <spi_master_setup_device+0x94>)
  4007aa:	4798      	blx	r3
  4007ac:	4603      	mov	r3, r0
  4007ae:	4619      	mov	r1, r3
  4007b0:	6838      	ldr	r0, [r7, #0]
  4007b2:	4b1f      	ldr	r3, [pc, #124]	; (400830 <spi_master_setup_device+0x98>)
  4007b4:	4798      	blx	r3
  4007b6:	4603      	mov	r3, r0
  4007b8:	82fb      	strh	r3, [r7, #22]
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  4007ba:	68bb      	ldr	r3, [r7, #8]
  4007bc:	6819      	ldr	r1, [r3, #0]
  4007be:	2300      	movs	r3, #0
  4007c0:	2200      	movs	r2, #0
  4007c2:	68f8      	ldr	r0, [r7, #12]
  4007c4:	4c1b      	ldr	r4, [pc, #108]	; (400834 <spi_master_setup_device+0x9c>)
  4007c6:	47a0      	blx	r4
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  4007c8:	68bb      	ldr	r3, [r7, #8]
  4007ca:	681b      	ldr	r3, [r3, #0]
  4007cc:	2208      	movs	r2, #8
  4007ce:	4619      	mov	r1, r3
  4007d0:	68f8      	ldr	r0, [r7, #12]
  4007d2:	4b19      	ldr	r3, [pc, #100]	; (400838 <spi_master_setup_device+0xa0>)
  4007d4:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  4007d6:	68bb      	ldr	r3, [r7, #8]
  4007d8:	681b      	ldr	r3, [r3, #0]
  4007da:	8afa      	ldrh	r2, [r7, #22]
  4007dc:	b2d2      	uxtb	r2, r2
  4007de:	4619      	mov	r1, r3
  4007e0:	68f8      	ldr	r0, [r7, #12]
  4007e2:	4b16      	ldr	r3, [pc, #88]	; (40083c <spi_master_setup_device+0xa4>)
  4007e4:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  4007e6:	68bb      	ldr	r3, [r7, #8]
  4007e8:	681b      	ldr	r3, [r3, #0]
  4007ea:	2208      	movs	r2, #8
  4007ec:	4619      	mov	r1, r3
  4007ee:	68f8      	ldr	r0, [r7, #12]
  4007f0:	4b13      	ldr	r3, [pc, #76]	; (400840 <spi_master_setup_device+0xa8>)
  4007f2:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4007f4:	68bb      	ldr	r3, [r7, #8]
  4007f6:	6819      	ldr	r1, [r3, #0]
  4007f8:	79fb      	ldrb	r3, [r7, #7]
  4007fa:	085b      	lsrs	r3, r3, #1
  4007fc:	b2db      	uxtb	r3, r3
  4007fe:	461a      	mov	r2, r3
  400800:	68f8      	ldr	r0, [r7, #12]
  400802:	4b10      	ldr	r3, [pc, #64]	; (400844 <spi_master_setup_device+0xac>)
  400804:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400806:	68bb      	ldr	r3, [r7, #8]
  400808:	6819      	ldr	r1, [r3, #0]
  40080a:	79fb      	ldrb	r3, [r7, #7]
  40080c:	f003 0301 	and.w	r3, r3, #1
  400810:	2b00      	cmp	r3, #0
  400812:	bf0c      	ite	eq
  400814:	2301      	moveq	r3, #1
  400816:	2300      	movne	r3, #0
  400818:	b2db      	uxtb	r3, r3
  40081a:	461a      	mov	r2, r3
  40081c:	68f8      	ldr	r0, [r7, #12]
  40081e:	4b0a      	ldr	r3, [pc, #40]	; (400848 <spi_master_setup_device+0xb0>)
  400820:	4798      	blx	r3
}
  400822:	bf00      	nop
  400824:	371c      	adds	r7, #28
  400826:	46bd      	mov	sp, r7
  400828:	bd90      	pop	{r4, r7, pc}
  40082a:	bf00      	nop
  40082c:	00400561 	.word	0x00400561
  400830:	00401471 	.word	0x00401471
  400834:	0040150b 	.word	0x0040150b
  400838:	00401427 	.word	0x00401427
  40083c:	004014ad 	.word	0x004014ad
  400840:	00401381 	.word	0x00401381
  400844:	004012e1 	.word	0x004012e1
  400848:	00401331 	.word	0x00401331

0040084c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  40084c:	b580      	push	{r7, lr}
  40084e:	b082      	sub	sp, #8
  400850:	af00      	add	r7, sp, #0
  400852:	6078      	str	r0, [r7, #4]
  400854:	6039      	str	r1, [r7, #0]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400856:	6878      	ldr	r0, [r7, #4]
  400858:	4b10      	ldr	r3, [pc, #64]	; (40089c <spi_select_device+0x50>)
  40085a:	4798      	blx	r3
  40085c:	4603      	mov	r3, r0
  40085e:	2b00      	cmp	r3, #0
  400860:	d00a      	beq.n	400878 <spi_select_device+0x2c>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400862:	683b      	ldr	r3, [r7, #0]
  400864:	681b      	ldr	r3, [r3, #0]
  400866:	2b0f      	cmp	r3, #15
  400868:	d814      	bhi.n	400894 <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  40086a:	683b      	ldr	r3, [r7, #0]
  40086c:	681b      	ldr	r3, [r3, #0]
  40086e:	4619      	mov	r1, r3
  400870:	6878      	ldr	r0, [r7, #4]
  400872:	4b0b      	ldr	r3, [pc, #44]	; (4008a0 <spi_select_device+0x54>)
  400874:	4798      	blx	r3
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
		}
	}
}
  400876:	e00d      	b.n	400894 <spi_select_device+0x48>
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400878:	683b      	ldr	r3, [r7, #0]
  40087a:	681b      	ldr	r3, [r3, #0]
  40087c:	2b03      	cmp	r3, #3
  40087e:	d809      	bhi.n	400894 <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400880:	683b      	ldr	r3, [r7, #0]
  400882:	681b      	ldr	r3, [r3, #0]
  400884:	2201      	movs	r2, #1
  400886:	fa02 f303 	lsl.w	r3, r2, r3
  40088a:	43db      	mvns	r3, r3
  40088c:	4619      	mov	r1, r3
  40088e:	6878      	ldr	r0, [r7, #4]
  400890:	4b03      	ldr	r3, [pc, #12]	; (4008a0 <spi_select_device+0x54>)
  400892:	4798      	blx	r3
}
  400894:	bf00      	nop
  400896:	3708      	adds	r7, #8
  400898:	46bd      	mov	sp, r7
  40089a:	bd80      	pop	{r7, pc}
  40089c:	004005ef 	.word	0x004005ef
  4008a0:	004011fd 	.word	0x004011fd

004008a4 <spi_write_packet>:
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data,
		size_t len)
{
  4008a4:	b580      	push	{r7, lr}
  4008a6:	b088      	sub	sp, #32
  4008a8:	af00      	add	r7, sp, #0
  4008aa:	60f8      	str	r0, [r7, #12]
  4008ac:	60b9      	str	r1, [r7, #8]
  4008ae:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
  4008b0:	f643 2398 	movw	r3, #15000	; 0x3a98
  4008b4:	61fb      	str	r3, [r7, #28]
	uint32_t i = 0;
  4008b6:	2300      	movs	r3, #0
  4008b8:	61bb      	str	r3, [r7, #24]
	uint8_t val;

	while (len) {
  4008ba:	e021      	b.n	400900 <spi_write_packet+0x5c>
		timeout = SPI_TIMEOUT;
  4008bc:	f643 2398 	movw	r3, #15000	; 0x3a98
  4008c0:	61fb      	str	r3, [r7, #28]
		while (!spi_is_tx_ready(p_spi)) {
  4008c2:	e007      	b.n	4008d4 <spi_write_packet+0x30>
			if (!timeout--) {
  4008c4:	69fb      	ldr	r3, [r7, #28]
  4008c6:	1e5a      	subs	r2, r3, #1
  4008c8:	61fa      	str	r2, [r7, #28]
  4008ca:	2b00      	cmp	r3, #0
  4008cc:	d102      	bne.n	4008d4 <spi_write_packet+0x30>
				return ERR_TIMEOUT;
  4008ce:	f06f 0302 	mvn.w	r3, #2
  4008d2:	e019      	b.n	400908 <spi_write_packet+0x64>
		while (!spi_is_tx_ready(p_spi)) {
  4008d4:	68f8      	ldr	r0, [r7, #12]
  4008d6:	4b0e      	ldr	r3, [pc, #56]	; (400910 <spi_write_packet+0x6c>)
  4008d8:	4798      	blx	r3
  4008da:	4603      	mov	r3, r0
  4008dc:	2b00      	cmp	r3, #0
  4008de:	d0f1      	beq.n	4008c4 <spi_write_packet+0x20>
			}
		}
		val = data[i];
  4008e0:	68ba      	ldr	r2, [r7, #8]
  4008e2:	69bb      	ldr	r3, [r7, #24]
  4008e4:	4413      	add	r3, r2
  4008e6:	781b      	ldrb	r3, [r3, #0]
  4008e8:	75fb      	strb	r3, [r7, #23]
		spi_write_single(p_spi, val);
  4008ea:	7dfb      	ldrb	r3, [r7, #23]
  4008ec:	4619      	mov	r1, r3
  4008ee:	68f8      	ldr	r0, [r7, #12]
  4008f0:	4b08      	ldr	r3, [pc, #32]	; (400914 <spi_write_packet+0x70>)
  4008f2:	4798      	blx	r3
		i++;
  4008f4:	69bb      	ldr	r3, [r7, #24]
  4008f6:	3301      	adds	r3, #1
  4008f8:	61bb      	str	r3, [r7, #24]
		len--;
  4008fa:	687b      	ldr	r3, [r7, #4]
  4008fc:	3b01      	subs	r3, #1
  4008fe:	607b      	str	r3, [r7, #4]
	while (len) {
  400900:	687b      	ldr	r3, [r7, #4]
  400902:	2b00      	cmp	r3, #0
  400904:	d1da      	bne.n	4008bc <spi_write_packet+0x18>
	}

	return STATUS_OK;
  400906:	2300      	movs	r3, #0
}
  400908:	4618      	mov	r0, r3
  40090a:	3720      	adds	r7, #32
  40090c:	46bd      	mov	sp, r7
  40090e:	bd80      	pop	{r7, pc}
  400910:	0040068d 	.word	0x0040068d
  400914:	004006e1 	.word	0x004006e1

00400918 <spi_read_packet>:
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
  400918:	b580      	push	{r7, lr}
  40091a:	b088      	sub	sp, #32
  40091c:	af00      	add	r7, sp, #0
  40091e:	60f8      	str	r0, [r7, #12]
  400920:	60b9      	str	r1, [r7, #8]
  400922:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
  400924:	f643 2398 	movw	r3, #15000	; 0x3a98
  400928:	61fb      	str	r3, [r7, #28]
	uint8_t val;
	uint32_t i = 0;
  40092a:	2300      	movs	r3, #0
  40092c:	61bb      	str	r3, [r7, #24]

	while (len) {
  40092e:	e038      	b.n	4009a2 <spi_read_packet+0x8a>
		timeout = SPI_TIMEOUT;
  400930:	f643 2398 	movw	r3, #15000	; 0x3a98
  400934:	61fb      	str	r3, [r7, #28]
		while (!spi_is_tx_ready(p_spi)) {
  400936:	e007      	b.n	400948 <spi_read_packet+0x30>
			if (!timeout--) {
  400938:	69fb      	ldr	r3, [r7, #28]
  40093a:	1e5a      	subs	r2, r3, #1
  40093c:	61fa      	str	r2, [r7, #28]
  40093e:	2b00      	cmp	r3, #0
  400940:	d102      	bne.n	400948 <spi_read_packet+0x30>
				return ERR_TIMEOUT;
  400942:	f06f 0302 	mvn.w	r3, #2
  400946:	e030      	b.n	4009aa <spi_read_packet+0x92>
		while (!spi_is_tx_ready(p_spi)) {
  400948:	68f8      	ldr	r0, [r7, #12]
  40094a:	4b1a      	ldr	r3, [pc, #104]	; (4009b4 <spi_read_packet+0x9c>)
  40094c:	4798      	blx	r3
  40094e:	4603      	mov	r3, r0
  400950:	2b00      	cmp	r3, #0
  400952:	d0f1      	beq.n	400938 <spi_read_packet+0x20>
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
  400954:	21ff      	movs	r1, #255	; 0xff
  400956:	68f8      	ldr	r0, [r7, #12]
  400958:	4b17      	ldr	r3, [pc, #92]	; (4009b8 <spi_read_packet+0xa0>)
  40095a:	4798      	blx	r3

		timeout = SPI_TIMEOUT;
  40095c:	f643 2398 	movw	r3, #15000	; 0x3a98
  400960:	61fb      	str	r3, [r7, #28]
		while (!spi_is_rx_ready(p_spi)) {
  400962:	e007      	b.n	400974 <spi_read_packet+0x5c>
			if (!timeout--) {
  400964:	69fb      	ldr	r3, [r7, #28]
  400966:	1e5a      	subs	r2, r3, #1
  400968:	61fa      	str	r2, [r7, #28]
  40096a:	2b00      	cmp	r3, #0
  40096c:	d102      	bne.n	400974 <spi_read_packet+0x5c>
				return ERR_TIMEOUT;
  40096e:	f06f 0302 	mvn.w	r3, #2
  400972:	e01a      	b.n	4009aa <spi_read_packet+0x92>
		while (!spi_is_rx_ready(p_spi)) {
  400974:	68f8      	ldr	r0, [r7, #12]
  400976:	4b11      	ldr	r3, [pc, #68]	; (4009bc <spi_read_packet+0xa4>)
  400978:	4798      	blx	r3
  40097a:	4603      	mov	r3, r0
  40097c:	2b00      	cmp	r3, #0
  40097e:	d0f1      	beq.n	400964 <spi_read_packet+0x4c>
			}
		}
		spi_read_single(p_spi, &val);
  400980:	f107 0317 	add.w	r3, r7, #23
  400984:	4619      	mov	r1, r3
  400986:	68f8      	ldr	r0, [r7, #12]
  400988:	4b0d      	ldr	r3, [pc, #52]	; (4009c0 <spi_read_packet+0xa8>)
  40098a:	4798      	blx	r3

		data[i] = val;
  40098c:	68ba      	ldr	r2, [r7, #8]
  40098e:	69bb      	ldr	r3, [r7, #24]
  400990:	4413      	add	r3, r2
  400992:	7dfa      	ldrb	r2, [r7, #23]
  400994:	701a      	strb	r2, [r3, #0]
		i++;
  400996:	69bb      	ldr	r3, [r7, #24]
  400998:	3301      	adds	r3, #1
  40099a:	61bb      	str	r3, [r7, #24]
		len--;
  40099c:	687b      	ldr	r3, [r7, #4]
  40099e:	3b01      	subs	r3, #1
  4009a0:	607b      	str	r3, [r7, #4]
	while (len) {
  4009a2:	687b      	ldr	r3, [r7, #4]
  4009a4:	2b00      	cmp	r3, #0
  4009a6:	d1c3      	bne.n	400930 <spi_read_packet+0x18>
	}

	return STATUS_OK;
  4009a8:	2300      	movs	r3, #0
}
  4009aa:	4618      	mov	r0, r3
  4009ac:	3720      	adds	r7, #32
  4009ae:	46bd      	mov	sp, r7
  4009b0:	bd80      	pop	{r7, pc}
  4009b2:	bf00      	nop
  4009b4:	0040068d 	.word	0x0040068d
  4009b8:	004006e1 	.word	0x004006e1
  4009bc:	004006b3 	.word	0x004006b3
  4009c0:	00400705 	.word	0x00400705

004009c4 <spi_enable>:
{
  4009c4:	b480      	push	{r7}
  4009c6:	b083      	sub	sp, #12
  4009c8:	af00      	add	r7, sp, #0
  4009ca:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4009cc:	687b      	ldr	r3, [r7, #4]
  4009ce:	2201      	movs	r2, #1
  4009d0:	601a      	str	r2, [r3, #0]
}
  4009d2:	bf00      	nop
  4009d4:	370c      	adds	r7, #12
  4009d6:	46bd      	mov	sp, r7
  4009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009dc:	4770      	bx	lr

004009de <spi_enable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
  4009de:	b480      	push	{r7}
  4009e0:	b083      	sub	sp, #12
  4009e2:	af00      	add	r7, sp, #0
  4009e4:	6078      	str	r0, [r7, #4]
  4009e6:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IER = ul_sources;
  4009e8:	687b      	ldr	r3, [r7, #4]
  4009ea:	683a      	ldr	r2, [r7, #0]
  4009ec:	615a      	str	r2, [r3, #20]
}
  4009ee:	bf00      	nop
  4009f0:	370c      	adds	r7, #12
  4009f2:	46bd      	mov	sp, r7
  4009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009f8:	4770      	bx	lr
	...

004009fc <ili9488_write_ram_prepare>:
#ifdef ILI9488_SPIMODE
/**
 * \brief Prepare to write GRAM data.
 */
static void ili9488_write_ram_prepare(void)
{
  4009fc:	b590      	push	{r4, r7, lr}
  4009fe:	b083      	sub	sp, #12
  400a00:	af00      	add	r7, sp, #0
	volatile uint32_t i;
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400a02:	2006      	movs	r0, #6
  400a04:	4b0a      	ldr	r3, [pc, #40]	; (400a30 <ili9488_write_ram_prepare+0x34>)
  400a06:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  400a08:	2300      	movs	r3, #0
  400a0a:	2203      	movs	r2, #3
  400a0c:	212c      	movs	r1, #44	; 0x2c
  400a0e:	4809      	ldr	r0, [pc, #36]	; (400a34 <ili9488_write_ram_prepare+0x38>)
  400a10:	4c09      	ldr	r4, [pc, #36]	; (400a38 <ili9488_write_ram_prepare+0x3c>)
  400a12:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400a14:	2300      	movs	r3, #0
  400a16:	607b      	str	r3, [r7, #4]
  400a18:	e002      	b.n	400a20 <ili9488_write_ram_prepare+0x24>
  400a1a:	687b      	ldr	r3, [r7, #4]
  400a1c:	3301      	adds	r3, #1
  400a1e:	607b      	str	r3, [r7, #4]
  400a20:	687b      	ldr	r3, [r7, #4]
  400a22:	2bfe      	cmp	r3, #254	; 0xfe
  400a24:	d9f9      	bls.n	400a1a <ili9488_write_ram_prepare+0x1e>
}
  400a26:	bf00      	nop
  400a28:	370c      	adds	r7, #12
  400a2a:	46bd      	mov	sp, r7
  400a2c:	bd90      	pop	{r4, r7, pc}
  400a2e:	bf00      	nop
  400a30:	00402239 	.word	0x00402239
  400a34:	40008000 	.word	0x40008000
  400a38:	00401261 	.word	0x00401261

00400a3c <ili9488_write_ram_buffer>:
 *
 * \param p_ul_buf data buffer.
 * \param ul_size size in pixels.
 */
static void ili9488_write_ram_buffer(const ili9488_color_t *p_ul_buf, uint32_t ul_size)
{
  400a3c:	b580      	push	{r7, lr}
  400a3e:	b084      	sub	sp, #16
  400a40:	af00      	add	r7, sp, #0
  400a42:	6078      	str	r0, [r7, #4]
  400a44:	6039      	str	r1, [r7, #0]
	volatile uint32_t i;
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400a46:	2006      	movs	r0, #6
  400a48:	4b09      	ldr	r3, [pc, #36]	; (400a70 <ili9488_write_ram_buffer+0x34>)
  400a4a:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400a4c:	683a      	ldr	r2, [r7, #0]
  400a4e:	6879      	ldr	r1, [r7, #4]
  400a50:	4808      	ldr	r0, [pc, #32]	; (400a74 <ili9488_write_ram_buffer+0x38>)
  400a52:	4b09      	ldr	r3, [pc, #36]	; (400a78 <ili9488_write_ram_buffer+0x3c>)
  400a54:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400a56:	2300      	movs	r3, #0
  400a58:	60fb      	str	r3, [r7, #12]
  400a5a:	e002      	b.n	400a62 <ili9488_write_ram_buffer+0x26>
  400a5c:	68fb      	ldr	r3, [r7, #12]
  400a5e:	3301      	adds	r3, #1
  400a60:	60fb      	str	r3, [r7, #12]
  400a62:	68fb      	ldr	r3, [r7, #12]
  400a64:	2bfe      	cmp	r3, #254	; 0xfe
  400a66:	d9f9      	bls.n	400a5c <ili9488_write_ram_buffer+0x20>
}
  400a68:	bf00      	nop
  400a6a:	3710      	adds	r7, #16
  400a6c:	46bd      	mov	sp, r7
  400a6e:	bd80      	pop	{r7, pc}
  400a70:	00402209 	.word	0x00402209
  400a74:	40008000 	.word	0x40008000
  400a78:	004008a5 	.word	0x004008a5

00400a7c <ili9488_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 * \param size the number of parameters.
 */
static void ili9488_write_register(uint8_t uc_reg, const ili9488_color_t *us_data, uint32_t size)
{
  400a7c:	b590      	push	{r4, r7, lr}
  400a7e:	b087      	sub	sp, #28
  400a80:	af00      	add	r7, sp, #0
  400a82:	4603      	mov	r3, r0
  400a84:	60b9      	str	r1, [r7, #8]
  400a86:	607a      	str	r2, [r7, #4]
  400a88:	73fb      	strb	r3, [r7, #15]
	volatile uint32_t i;

	/* Transfer cmd */
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400a8a:	2006      	movs	r0, #6
  400a8c:	4b14      	ldr	r3, [pc, #80]	; (400ae0 <ili9488_write_register+0x64>)
  400a8e:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400a90:	7bfb      	ldrb	r3, [r7, #15]
  400a92:	b299      	uxth	r1, r3
  400a94:	2300      	movs	r3, #0
  400a96:	2203      	movs	r2, #3
  400a98:	4812      	ldr	r0, [pc, #72]	; (400ae4 <ili9488_write_register+0x68>)
  400a9a:	4c13      	ldr	r4, [pc, #76]	; (400ae8 <ili9488_write_register+0x6c>)
  400a9c:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400a9e:	2300      	movs	r3, #0
  400aa0:	617b      	str	r3, [r7, #20]
  400aa2:	e002      	b.n	400aaa <ili9488_write_register+0x2e>
  400aa4:	697b      	ldr	r3, [r7, #20]
  400aa6:	3301      	adds	r3, #1
  400aa8:	617b      	str	r3, [r7, #20]
  400aaa:	697b      	ldr	r3, [r7, #20]
  400aac:	2bfe      	cmp	r3, #254	; 0xfe
  400aae:	d9f9      	bls.n	400aa4 <ili9488_write_register+0x28>

	if(size > 0) {
  400ab0:	687b      	ldr	r3, [r7, #4]
  400ab2:	2b00      	cmp	r3, #0
  400ab4:	d010      	beq.n	400ad8 <ili9488_write_register+0x5c>
		/* Transfer data */
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400ab6:	2006      	movs	r0, #6
  400ab8:	4b0c      	ldr	r3, [pc, #48]	; (400aec <ili9488_write_register+0x70>)
  400aba:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400abc:	687a      	ldr	r2, [r7, #4]
  400abe:	68b9      	ldr	r1, [r7, #8]
  400ac0:	4808      	ldr	r0, [pc, #32]	; (400ae4 <ili9488_write_register+0x68>)
  400ac2:	4b0b      	ldr	r3, [pc, #44]	; (400af0 <ili9488_write_register+0x74>)
  400ac4:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400ac6:	2300      	movs	r3, #0
  400ac8:	617b      	str	r3, [r7, #20]
  400aca:	e002      	b.n	400ad2 <ili9488_write_register+0x56>
  400acc:	697b      	ldr	r3, [r7, #20]
  400ace:	3301      	adds	r3, #1
  400ad0:	617b      	str	r3, [r7, #20]
  400ad2:	697b      	ldr	r3, [r7, #20]
  400ad4:	2b5e      	cmp	r3, #94	; 0x5e
  400ad6:	d9f9      	bls.n	400acc <ili9488_write_register+0x50>
	}
}
  400ad8:	bf00      	nop
  400ada:	371c      	adds	r7, #28
  400adc:	46bd      	mov	sp, r7
  400ade:	bd90      	pop	{r4, r7, pc}
  400ae0:	00402239 	.word	0x00402239
  400ae4:	40008000 	.word	0x40008000
  400ae8:	00401261 	.word	0x00401261
  400aec:	00402209 	.word	0x00402209
  400af0:	004008a5 	.word	0x004008a5

00400af4 <ili9488_read_chipid>:
 * \brief Read chipid.
 *
 * \return chipid value.
 */
static uint32_t ili9488_read_chipid(void)
{
  400af4:	b580      	push	{r7, lr}
  400af6:	b084      	sub	sp, #16
  400af8:	af00      	add	r7, sp, #0
	uint32_t i, chipid = 0;
  400afa:	2300      	movs	r3, #0
  400afc:	60bb      	str	r3, [r7, #8]
	volatile uint32_t j;
	ili9488_color_t chipidBuf, reg, param;

	reg = 0x81;
  400afe:	2381      	movs	r3, #129	; 0x81
  400b00:	70bb      	strb	r3, [r7, #2]
	param = 0x0;
  400b02:	2300      	movs	r3, #0
  400b04:	707b      	strb	r3, [r7, #1]
	for (i = 3; i > 0; i--) {
  400b06:	2303      	movs	r3, #3
  400b08:	60fb      	str	r3, [r7, #12]
  400b0a:	e048      	b.n	400b9e <ili9488_read_chipid+0xaa>
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400b0c:	1cbb      	adds	r3, r7, #2
  400b0e:	2201      	movs	r2, #1
  400b10:	4619      	mov	r1, r3
  400b12:	20fb      	movs	r0, #251	; 0xfb
  400b14:	4b26      	ldr	r3, [pc, #152]	; (400bb0 <ili9488_read_chipid+0xbc>)
  400b16:	4798      	blx	r3
		reg++;
  400b18:	78bb      	ldrb	r3, [r7, #2]
  400b1a:	3301      	adds	r3, #1
  400b1c:	b2db      	uxtb	r3, r3
  400b1e:	70bb      	strb	r3, [r7, #2]
		for(j = 0; j < 0xFF; j++);
  400b20:	2300      	movs	r3, #0
  400b22:	607b      	str	r3, [r7, #4]
  400b24:	e002      	b.n	400b2c <ili9488_read_chipid+0x38>
  400b26:	687b      	ldr	r3, [r7, #4]
  400b28:	3301      	adds	r3, #1
  400b2a:	607b      	str	r3, [r7, #4]
  400b2c:	687b      	ldr	r3, [r7, #4]
  400b2e:	2bfe      	cmp	r3, #254	; 0xfe
  400b30:	d9f9      	bls.n	400b26 <ili9488_read_chipid+0x32>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  400b32:	2200      	movs	r2, #0
  400b34:	2100      	movs	r1, #0
  400b36:	20d3      	movs	r0, #211	; 0xd3
  400b38:	4b1d      	ldr	r3, [pc, #116]	; (400bb0 <ili9488_read_chipid+0xbc>)
  400b3a:	4798      	blx	r3
		{
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  400b3c:	2006      	movs	r0, #6
  400b3e:	4b1d      	ldr	r3, [pc, #116]	; (400bb4 <ili9488_read_chipid+0xc0>)
  400b40:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  400b42:	1cfb      	adds	r3, r7, #3
  400b44:	2201      	movs	r2, #1
  400b46:	4619      	mov	r1, r3
  400b48:	481b      	ldr	r0, [pc, #108]	; (400bb8 <ili9488_read_chipid+0xc4>)
  400b4a:	4b1c      	ldr	r3, [pc, #112]	; (400bbc <ili9488_read_chipid+0xc8>)
  400b4c:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  400b4e:	2300      	movs	r3, #0
  400b50:	607b      	str	r3, [r7, #4]
  400b52:	e002      	b.n	400b5a <ili9488_read_chipid+0x66>
  400b54:	687b      	ldr	r3, [r7, #4]
  400b56:	3301      	adds	r3, #1
  400b58:	607b      	str	r3, [r7, #4]
  400b5a:	687b      	ldr	r3, [r7, #4]
  400b5c:	2bfe      	cmp	r3, #254	; 0xfe
  400b5e:	d9f9      	bls.n	400b54 <ili9488_read_chipid+0x60>
		}
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  400b60:	78fb      	ldrb	r3, [r7, #3]
  400b62:	461a      	mov	r2, r3
  400b64:	68fb      	ldr	r3, [r7, #12]
  400b66:	3b01      	subs	r3, #1
  400b68:	00db      	lsls	r3, r3, #3
  400b6a:	fa02 f303 	lsl.w	r3, r2, r3
  400b6e:	461a      	mov	r2, r3
  400b70:	68bb      	ldr	r3, [r7, #8]
  400b72:	4313      	orrs	r3, r2
  400b74:	60bb      	str	r3, [r7, #8]
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  400b76:	1c7b      	adds	r3, r7, #1
  400b78:	2201      	movs	r2, #1
  400b7a:	4619      	mov	r1, r3
  400b7c:	20fb      	movs	r0, #251	; 0xfb
  400b7e:	4b0c      	ldr	r3, [pc, #48]	; (400bb0 <ili9488_read_chipid+0xbc>)
  400b80:	4798      	blx	r3
		for(j = 0; j < 0xFFF; j++);
  400b82:	2300      	movs	r3, #0
  400b84:	607b      	str	r3, [r7, #4]
  400b86:	e002      	b.n	400b8e <ili9488_read_chipid+0x9a>
  400b88:	687b      	ldr	r3, [r7, #4]
  400b8a:	3301      	adds	r3, #1
  400b8c:	607b      	str	r3, [r7, #4]
  400b8e:	687b      	ldr	r3, [r7, #4]
  400b90:	f640 72fe 	movw	r2, #4094	; 0xffe
  400b94:	4293      	cmp	r3, r2
  400b96:	d9f7      	bls.n	400b88 <ili9488_read_chipid+0x94>
	for (i = 3; i > 0; i--) {
  400b98:	68fb      	ldr	r3, [r7, #12]
  400b9a:	3b01      	subs	r3, #1
  400b9c:	60fb      	str	r3, [r7, #12]
  400b9e:	68fb      	ldr	r3, [r7, #12]
  400ba0:	2b00      	cmp	r3, #0
  400ba2:	d1b3      	bne.n	400b0c <ili9488_read_chipid+0x18>
	}
	return chipid;
  400ba4:	68bb      	ldr	r3, [r7, #8]
}
  400ba6:	4618      	mov	r0, r3
  400ba8:	3710      	adds	r7, #16
  400baa:	46bd      	mov	sp, r7
  400bac:	bd80      	pop	{r7, pc}
  400bae:	bf00      	nop
  400bb0:	00400a7d 	.word	0x00400a7d
  400bb4:	00402209 	.word	0x00402209
  400bb8:	40008000 	.word	0x40008000
  400bbc:	00400919 	.word	0x00400919

00400bc0 <ili9488_delay>:

/**
 * \brief Delay function.
 */
void ili9488_delay(uint32_t ul_ms)
{
  400bc0:	b480      	push	{r7}
  400bc2:	b085      	sub	sp, #20
  400bc4:	af00      	add	r7, sp, #0
  400bc6:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400bc8:	2300      	movs	r3, #0
  400bca:	60fb      	str	r3, [r7, #12]
  400bcc:	e00c      	b.n	400be8 <ili9488_delay+0x28>
		for(i = 0; i < 100000; i++) {
  400bce:	2300      	movs	r3, #0
  400bd0:	60fb      	str	r3, [r7, #12]
  400bd2:	e002      	b.n	400bda <ili9488_delay+0x1a>
  400bd4:	68fb      	ldr	r3, [r7, #12]
  400bd6:	3301      	adds	r3, #1
  400bd8:	60fb      	str	r3, [r7, #12]
  400bda:	68fb      	ldr	r3, [r7, #12]
  400bdc:	4a07      	ldr	r2, [pc, #28]	; (400bfc <ili9488_delay+0x3c>)
  400bde:	4293      	cmp	r3, r2
  400be0:	d9f8      	bls.n	400bd4 <ili9488_delay+0x14>
	for(i = 0; i < ul_ms; i++) {
  400be2:	68fb      	ldr	r3, [r7, #12]
  400be4:	3301      	adds	r3, #1
  400be6:	60fb      	str	r3, [r7, #12]
  400be8:	68fa      	ldr	r2, [r7, #12]
  400bea:	687b      	ldr	r3, [r7, #4]
  400bec:	429a      	cmp	r2, r3
  400bee:	d3ee      	bcc.n	400bce <ili9488_delay+0xe>
		}
	}
}
  400bf0:	bf00      	nop
  400bf2:	3714      	adds	r7, #20
  400bf4:	46bd      	mov	sp, r7
  400bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bfa:	4770      	bx	lr
  400bfc:	0001869f 	.word	0x0001869f

00400c00 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400c00:	b480      	push	{r7}
  400c02:	b087      	sub	sp, #28
  400c04:	af00      	add	r7, sp, #0
  400c06:	60f8      	str	r0, [r7, #12]
  400c08:	60b9      	str	r1, [r7, #8]
  400c0a:	607a      	str	r2, [r7, #4]
  400c0c:	603b      	str	r3, [r7, #0]
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400c0e:	68fb      	ldr	r3, [r7, #12]
  400c10:	681b      	ldr	r3, [r3, #0]
  400c12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  400c16:	d303      	bcc.n	400c20 <ili9488_check_box_coordinates+0x20>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400c18:	68fb      	ldr	r3, [r7, #12]
  400c1a:	f240 123f 	movw	r2, #319	; 0x13f
  400c1e:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400c20:	687b      	ldr	r3, [r7, #4]
  400c22:	681b      	ldr	r3, [r3, #0]
  400c24:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  400c28:	d303      	bcc.n	400c32 <ili9488_check_box_coordinates+0x32>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400c2a:	687b      	ldr	r3, [r7, #4]
  400c2c:	f240 123f 	movw	r2, #319	; 0x13f
  400c30:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400c32:	68bb      	ldr	r3, [r7, #8]
  400c34:	681b      	ldr	r3, [r3, #0]
  400c36:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
  400c3a:	d303      	bcc.n	400c44 <ili9488_check_box_coordinates+0x44>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400c3c:	68bb      	ldr	r3, [r7, #8]
  400c3e:	f240 12df 	movw	r2, #479	; 0x1df
  400c42:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400c44:	683b      	ldr	r3, [r7, #0]
  400c46:	681b      	ldr	r3, [r3, #0]
  400c48:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
  400c4c:	d303      	bcc.n	400c56 <ili9488_check_box_coordinates+0x56>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400c4e:	683b      	ldr	r3, [r7, #0]
  400c50:	f240 12df 	movw	r2, #479	; 0x1df
  400c54:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400c56:	68fb      	ldr	r3, [r7, #12]
  400c58:	681a      	ldr	r2, [r3, #0]
  400c5a:	687b      	ldr	r3, [r7, #4]
  400c5c:	681b      	ldr	r3, [r3, #0]
  400c5e:	429a      	cmp	r2, r3
  400c60:	d909      	bls.n	400c76 <ili9488_check_box_coordinates+0x76>
		dw = *p_ul_x1;
  400c62:	68fb      	ldr	r3, [r7, #12]
  400c64:	681b      	ldr	r3, [r3, #0]
  400c66:	617b      	str	r3, [r7, #20]
		*p_ul_x1 = *p_ul_x2;
  400c68:	687b      	ldr	r3, [r7, #4]
  400c6a:	681a      	ldr	r2, [r3, #0]
  400c6c:	68fb      	ldr	r3, [r7, #12]
  400c6e:	601a      	str	r2, [r3, #0]
		*p_ul_x2 = dw;
  400c70:	687b      	ldr	r3, [r7, #4]
  400c72:	697a      	ldr	r2, [r7, #20]
  400c74:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400c76:	68bb      	ldr	r3, [r7, #8]
  400c78:	681a      	ldr	r2, [r3, #0]
  400c7a:	683b      	ldr	r3, [r7, #0]
  400c7c:	681b      	ldr	r3, [r3, #0]
  400c7e:	429a      	cmp	r2, r3
  400c80:	d909      	bls.n	400c96 <ili9488_check_box_coordinates+0x96>
		dw = *p_ul_y1;
  400c82:	68bb      	ldr	r3, [r7, #8]
  400c84:	681b      	ldr	r3, [r3, #0]
  400c86:	617b      	str	r3, [r7, #20]
		*p_ul_y1 = *p_ul_y2;
  400c88:	683b      	ldr	r3, [r7, #0]
  400c8a:	681a      	ldr	r2, [r3, #0]
  400c8c:	68bb      	ldr	r3, [r7, #8]
  400c8e:	601a      	str	r2, [r3, #0]
		*p_ul_y2 = dw;
  400c90:	683b      	ldr	r3, [r7, #0]
  400c92:	697a      	ldr	r2, [r7, #20]
  400c94:	601a      	str	r2, [r3, #0]
	}
}
  400c96:	bf00      	nop
  400c98:	371c      	adds	r7, #28
  400c9a:	46bd      	mov	sp, r7
  400c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ca0:	4770      	bx	lr
	...

00400ca4 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400ca4:	b580      	push	{r7, lr}
  400ca6:	b084      	sub	sp, #16
  400ca8:	af00      	add	r7, sp, #0
  400caa:	4603      	mov	r3, r0
  400cac:	71fb      	strb	r3, [r7, #7]
	ili9488_color_t value;
	if(direction) {
  400cae:	79fb      	ldrb	r3, [r7, #7]
  400cb0:	2b00      	cmp	r3, #0
  400cb2:	d002      	beq.n	400cba <ili9488_set_display_direction+0x16>
		value = 0xE8;
  400cb4:	23e8      	movs	r3, #232	; 0xe8
  400cb6:	73fb      	strb	r3, [r7, #15]
  400cb8:	e001      	b.n	400cbe <ili9488_set_display_direction+0x1a>
	} else {
		value = 0x48;
  400cba:	2348      	movs	r3, #72	; 0x48
  400cbc:	73fb      	strb	r3, [r7, #15]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400cbe:	f107 030f 	add.w	r3, r7, #15
  400cc2:	2201      	movs	r2, #1
  400cc4:	4619      	mov	r1, r3
  400cc6:	2036      	movs	r0, #54	; 0x36
  400cc8:	4b02      	ldr	r3, [pc, #8]	; (400cd4 <ili9488_set_display_direction+0x30>)
  400cca:	4798      	blx	r3
}
  400ccc:	bf00      	nop
  400cce:	3710      	adds	r7, #16
  400cd0:	46bd      	mov	sp, r7
  400cd2:	bd80      	pop	{r7, pc}
  400cd4:	00400a7d 	.word	0x00400a7d

00400cd8 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400cd8:	b590      	push	{r4, r7, lr}
  400cda:	b087      	sub	sp, #28
  400cdc:	af00      	add	r7, sp, #0
  400cde:	4604      	mov	r4, r0
  400ce0:	4608      	mov	r0, r1
  400ce2:	4611      	mov	r1, r2
  400ce4:	461a      	mov	r2, r3
  400ce6:	4623      	mov	r3, r4
  400ce8:	80fb      	strh	r3, [r7, #6]
  400cea:	4603      	mov	r3, r0
  400cec:	80bb      	strh	r3, [r7, #4]
  400cee:	460b      	mov	r3, r1
  400cf0:	807b      	strh	r3, [r7, #2]
  400cf2:	4613      	mov	r3, r2
  400cf4:	803b      	strh	r3, [r7, #0]
	uint16_t col_start, col_end, row_start, row_end;
	uint32_t cnt = 0;
  400cf6:	2300      	movs	r3, #0
  400cf8:	617b      	str	r3, [r7, #20]
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);
  400cfa:	2304      	movs	r3, #4
  400cfc:	617b      	str	r3, [r7, #20]

	col_start  =  x ;
  400cfe:	88fb      	ldrh	r3, [r7, #6]
  400d00:	827b      	strh	r3, [r7, #18]
	col_end    =  width + x - 1;
  400d02:	887a      	ldrh	r2, [r7, #2]
  400d04:	88fb      	ldrh	r3, [r7, #6]
  400d06:	4413      	add	r3, r2
  400d08:	b29b      	uxth	r3, r3
  400d0a:	3b01      	subs	r3, #1
  400d0c:	b29b      	uxth	r3, r3
  400d0e:	823b      	strh	r3, [r7, #16]

	row_start = y ;
  400d10:	88bb      	ldrh	r3, [r7, #4]
  400d12:	81fb      	strh	r3, [r7, #14]
	row_end   = height + y - 1;
  400d14:	883a      	ldrh	r2, [r7, #0]
  400d16:	88bb      	ldrh	r3, [r7, #4]
  400d18:	4413      	add	r3, r2
  400d1a:	b29b      	uxth	r3, r3
  400d1c:	3b01      	subs	r3, #1
  400d1e:	b29b      	uxth	r3, r3
  400d20:	81bb      	strh	r3, [r7, #12]

	buf[0] = get_8b_to_16b(col_start);
  400d22:	f107 0312 	add.w	r3, r7, #18
  400d26:	785b      	ldrb	r3, [r3, #1]
  400d28:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(col_start);
  400d2a:	f107 0312 	add.w	r3, r7, #18
  400d2e:	781b      	ldrb	r3, [r3, #0]
  400d30:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(col_end);
  400d32:	f107 0310 	add.w	r3, r7, #16
  400d36:	785b      	ldrb	r3, [r3, #1]
  400d38:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(col_end);
  400d3a:	f107 0310 	add.w	r3, r7, #16
  400d3e:	781b      	ldrb	r3, [r3, #0]
  400d40:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400d42:	f107 0308 	add.w	r3, r7, #8
  400d46:	697a      	ldr	r2, [r7, #20]
  400d48:	4619      	mov	r1, r3
  400d4a:	202a      	movs	r0, #42	; 0x2a
  400d4c:	4b13      	ldr	r3, [pc, #76]	; (400d9c <ili9488_set_window+0xc4>)
  400d4e:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400d50:	2200      	movs	r2, #0
  400d52:	2100      	movs	r1, #0
  400d54:	2000      	movs	r0, #0
  400d56:	4b11      	ldr	r3, [pc, #68]	; (400d9c <ili9488_set_window+0xc4>)
  400d58:	4798      	blx	r3

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400d5a:	f107 030e 	add.w	r3, r7, #14
  400d5e:	785b      	ldrb	r3, [r3, #1]
  400d60:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(row_start);
  400d62:	f107 030e 	add.w	r3, r7, #14
  400d66:	781b      	ldrb	r3, [r3, #0]
  400d68:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(row_end);
  400d6a:	f107 030c 	add.w	r3, r7, #12
  400d6e:	785b      	ldrb	r3, [r3, #1]
  400d70:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(row_end);
  400d72:	f107 030c 	add.w	r3, r7, #12
  400d76:	781b      	ldrb	r3, [r3, #0]
  400d78:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400d7a:	f107 0308 	add.w	r3, r7, #8
  400d7e:	697a      	ldr	r2, [r7, #20]
  400d80:	4619      	mov	r1, r3
  400d82:	202b      	movs	r0, #43	; 0x2b
  400d84:	4b05      	ldr	r3, [pc, #20]	; (400d9c <ili9488_set_window+0xc4>)
  400d86:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400d88:	2200      	movs	r2, #0
  400d8a:	2100      	movs	r1, #0
  400d8c:	2000      	movs	r0, #0
  400d8e:	4b03      	ldr	r3, [pc, #12]	; (400d9c <ili9488_set_window+0xc4>)
  400d90:	4798      	blx	r3
}
  400d92:	bf00      	nop
  400d94:	371c      	adds	r7, #28
  400d96:	46bd      	mov	sp, r7
  400d98:	bd90      	pop	{r4, r7, pc}
  400d9a:	bf00      	nop
  400d9c:	00400a7d 	.word	0x00400a7d

00400da0 <ili9488_init>:
 * \param p_opt pointer to ILI9488 option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili9488_init(struct ili9488_opt_t *p_opt)
{
  400da0:	b590      	push	{r4, r7, lr}
  400da2:	b089      	sub	sp, #36	; 0x24
  400da4:	af02      	add	r7, sp, #8
  400da6:	6078      	str	r0, [r7, #4]
			| SMC_MODE_DBW_16_BIT
			| SMC_MODE_EXNW_MODE_DISABLED
			| SMC_MODE_TDF_CYCLES(0xF));
#endif
#ifdef ILI9488_SPIMODE
	struct spi_device ILI9488_SPI_DEVICE = {
  400da8:	2303      	movs	r3, #3
  400daa:	60fb      	str	r3, [r7, #12]
		// Board specific chip select configuration
		.id = BOARD_ILI9488_SPI_NPCS
	};

	/* Init, select and configure the chip */
	spi_master_init(BOARD_ILI9488_SPI);
  400dac:	4843      	ldr	r0, [pc, #268]	; (400ebc <ili9488_init+0x11c>)
  400dae:	4b44      	ldr	r3, [pc, #272]	; (400ec0 <ili9488_init+0x120>)
  400db0:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  400db2:	f107 010c 	add.w	r1, r7, #12
  400db6:	2300      	movs	r3, #0
  400db8:	9300      	str	r3, [sp, #0]
  400dba:	4b42      	ldr	r3, [pc, #264]	; (400ec4 <ili9488_init+0x124>)
  400dbc:	2203      	movs	r2, #3
  400dbe:	483f      	ldr	r0, [pc, #252]	; (400ebc <ili9488_init+0x11c>)
  400dc0:	4c41      	ldr	r4, [pc, #260]	; (400ec8 <ili9488_init+0x128>)
  400dc2:	47a0      	blx	r4
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400dc4:	2200      	movs	r2, #0
  400dc6:	2103      	movs	r1, #3
  400dc8:	483c      	ldr	r0, [pc, #240]	; (400ebc <ili9488_init+0x11c>)
  400dca:	4b40      	ldr	r3, [pc, #256]	; (400ecc <ili9488_init+0x12c>)
  400dcc:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  400dce:	f107 030c 	add.w	r3, r7, #12
  400dd2:	4619      	mov	r1, r3
  400dd4:	4839      	ldr	r0, [pc, #228]	; (400ebc <ili9488_init+0x11c>)
  400dd6:	4b3e      	ldr	r3, [pc, #248]	; (400ed0 <ili9488_init+0x130>)
  400dd8:	4798      	blx	r3

	/* Enable the SPI peripheral */
	spi_enable(BOARD_ILI9488_SPI);
  400dda:	4838      	ldr	r0, [pc, #224]	; (400ebc <ili9488_init+0x11c>)
  400ddc:	4b3d      	ldr	r3, [pc, #244]	; (400ed4 <ili9488_init+0x134>)
  400dde:	4798      	blx	r3
	spi_enable_interrupt(BOARD_ILI9488_SPI, SPI_IER_RDRF);
  400de0:	2101      	movs	r1, #1
  400de2:	4836      	ldr	r0, [pc, #216]	; (400ebc <ili9488_init+0x11c>)
  400de4:	4b3c      	ldr	r3, [pc, #240]	; (400ed8 <ili9488_init+0x138>)
  400de6:	4798      	blx	r3
#endif

	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  400de8:	2200      	movs	r2, #0
  400dea:	2100      	movs	r1, #0
  400dec:	2001      	movs	r0, #1
  400dee:	4b3b      	ldr	r3, [pc, #236]	; (400edc <ili9488_init+0x13c>)
  400df0:	4798      	blx	r3
	ili9488_delay(200);
  400df2:	20c8      	movs	r0, #200	; 0xc8
  400df4:	4b3a      	ldr	r3, [pc, #232]	; (400ee0 <ili9488_init+0x140>)
  400df6:	4798      	blx	r3

	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  400df8:	2200      	movs	r2, #0
  400dfa:	2100      	movs	r1, #0
  400dfc:	2011      	movs	r0, #17
  400dfe:	4b37      	ldr	r3, [pc, #220]	; (400edc <ili9488_init+0x13c>)
  400e00:	4798      	blx	r3
	ili9488_delay(200);
  400e02:	20c8      	movs	r0, #200	; 0xc8
  400e04:	4b36      	ldr	r3, [pc, #216]	; (400ee0 <ili9488_init+0x140>)
  400e06:	4798      	blx	r3

	/** read chipid */
	chipid = ili9488_read_chipid();
  400e08:	4b36      	ldr	r3, [pc, #216]	; (400ee4 <ili9488_init+0x144>)
  400e0a:	4798      	blx	r3
  400e0c:	6178      	str	r0, [r7, #20]
	if (chipid != ILI9488_DEVICE_CODE) {
  400e0e:	697b      	ldr	r3, [r7, #20]
  400e10:	f249 4288 	movw	r2, #38024	; 0x9488
  400e14:	4293      	cmp	r3, r2
  400e16:	d001      	beq.n	400e1c <ili9488_init+0x7c>
		return 1;
  400e18:	2301      	movs	r3, #1
  400e1a:	e04a      	b.n	400eb2 <ili9488_init+0x112>
	}

	/** make it tRGB and reverse the column order */
	param = 0x48;
  400e1c:	2348      	movs	r3, #72	; 0x48
  400e1e:	74fb      	strb	r3, [r7, #19]
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  400e20:	f107 0313 	add.w	r3, r7, #19
  400e24:	2201      	movs	r2, #1
  400e26:	4619      	mov	r1, r3
  400e28:	2036      	movs	r0, #54	; 0x36
  400e2a:	4b2c      	ldr	r3, [pc, #176]	; (400edc <ili9488_init+0x13c>)
  400e2c:	4798      	blx	r3
	ili9488_delay(100);
  400e2e:	2064      	movs	r0, #100	; 0x64
  400e30:	4b2b      	ldr	r3, [pc, #172]	; (400ee0 <ili9488_init+0x140>)
  400e32:	4798      	blx	r3

	param = 0x04;
  400e34:	2304      	movs	r3, #4
  400e36:	74fb      	strb	r3, [r7, #19]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  400e38:	f107 0313 	add.w	r3, r7, #19
  400e3c:	2201      	movs	r2, #1
  400e3e:	4619      	mov	r1, r3
  400e40:	20cf      	movs	r0, #207	; 0xcf
  400e42:	4b26      	ldr	r3, [pc, #152]	; (400edc <ili9488_init+0x13c>)
  400e44:	4798      	blx	r3
	ili9488_delay(100);
  400e46:	2064      	movs	r0, #100	; 0x64
  400e48:	4b25      	ldr	r3, [pc, #148]	; (400ee0 <ili9488_init+0x140>)
  400e4a:	4798      	blx	r3
	ili9488_delay(100);
	ili9488_write_register(ILI9488_CMD_PARTIAL_MODE_ON, 0, 0);
	ili9488_delay(100);
#endif
#ifdef ILI9488_SPIMODE
	param = 0x06;
  400e4c:	2306      	movs	r3, #6
  400e4e:	74fb      	strb	r3, [r7, #19]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  400e50:	f107 0313 	add.w	r3, r7, #19
  400e54:	2201      	movs	r2, #1
  400e56:	4619      	mov	r1, r3
  400e58:	203a      	movs	r0, #58	; 0x3a
  400e5a:	4b20      	ldr	r3, [pc, #128]	; (400edc <ili9488_init+0x13c>)
  400e5c:	4798      	blx	r3
	ili9488_delay(100);
  400e5e:	2064      	movs	r0, #100	; 0x64
  400e60:	4b1f      	ldr	r3, [pc, #124]	; (400ee0 <ili9488_init+0x140>)
  400e62:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  400e64:	2200      	movs	r2, #0
  400e66:	2100      	movs	r1, #0
  400e68:	2013      	movs	r0, #19
  400e6a:	4b1c      	ldr	r3, [pc, #112]	; (400edc <ili9488_init+0x13c>)
  400e6c:	4798      	blx	r3
	ili9488_delay(100);
  400e6e:	2064      	movs	r0, #100	; 0x64
  400e70:	4b1b      	ldr	r3, [pc, #108]	; (400ee0 <ili9488_init+0x140>)
  400e72:	4798      	blx	r3
#endif

	ili9488_display_on();
  400e74:	4b1c      	ldr	r3, [pc, #112]	; (400ee8 <ili9488_init+0x148>)
  400e76:	4798      	blx	r3
	ili9488_delay(100);
  400e78:	2064      	movs	r0, #100	; 0x64
  400e7a:	4b19      	ldr	r3, [pc, #100]	; (400ee0 <ili9488_init+0x140>)
  400e7c:	4798      	blx	r3

	ili9488_set_display_direction(LANDSCAPE);
  400e7e:	2000      	movs	r0, #0
  400e80:	4b1a      	ldr	r3, [pc, #104]	; (400eec <ili9488_init+0x14c>)
  400e82:	4798      	blx	r3
	ili9488_delay(100);
  400e84:	2064      	movs	r0, #100	; 0x64
  400e86:	4b16      	ldr	r3, [pc, #88]	; (400ee0 <ili9488_init+0x140>)
  400e88:	4798      	blx	r3

	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  400e8a:	687b      	ldr	r3, [r7, #4]
  400e8c:	681b      	ldr	r3, [r3, #0]
  400e8e:	b29a      	uxth	r2, r3
  400e90:	687b      	ldr	r3, [r7, #4]
  400e92:	685b      	ldr	r3, [r3, #4]
  400e94:	b29b      	uxth	r3, r3
  400e96:	2100      	movs	r1, #0
  400e98:	2000      	movs	r0, #0
  400e9a:	4c15      	ldr	r4, [pc, #84]	; (400ef0 <ili9488_init+0x150>)
  400e9c:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  400e9e:	687b      	ldr	r3, [r7, #4]
  400ea0:	689b      	ldr	r3, [r3, #8]
  400ea2:	4618      	mov	r0, r3
  400ea4:	4b13      	ldr	r3, [pc, #76]	; (400ef4 <ili9488_init+0x154>)
  400ea6:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  400ea8:	2100      	movs	r1, #0
  400eaa:	2000      	movs	r0, #0
  400eac:	4b12      	ldr	r3, [pc, #72]	; (400ef8 <ili9488_init+0x158>)
  400eae:	4798      	blx	r3

	return 0;
  400eb0:	2300      	movs	r3, #0
}
  400eb2:	4618      	mov	r0, r3
  400eb4:	371c      	adds	r7, #28
  400eb6:	46bd      	mov	sp, r7
  400eb8:	bd90      	pop	{r4, r7, pc}
  400eba:	bf00      	nop
  400ebc:	40008000 	.word	0x40008000
  400ec0:	00400729 	.word	0x00400729
  400ec4:	01312d00 	.word	0x01312d00
  400ec8:	00400799 	.word	0x00400799
  400ecc:	00401381 	.word	0x00401381
  400ed0:	0040084d 	.word	0x0040084d
  400ed4:	004009c5 	.word	0x004009c5
  400ed8:	004009df 	.word	0x004009df
  400edc:	00400a7d 	.word	0x00400a7d
  400ee0:	00400bc1 	.word	0x00400bc1
  400ee4:	00400af5 	.word	0x00400af5
  400ee8:	00400efd 	.word	0x00400efd
  400eec:	00400ca5 	.word	0x00400ca5
  400ef0:	00400cd9 	.word	0x00400cd9
  400ef4:	00400f15 	.word	0x00400f15
  400ef8:	00400f69 	.word	0x00400f69

00400efc <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	af00      	add	r7, sp, #0
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400f00:	2200      	movs	r2, #0
  400f02:	2100      	movs	r1, #0
  400f04:	2029      	movs	r0, #41	; 0x29
  400f06:	4b02      	ldr	r3, [pc, #8]	; (400f10 <ili9488_display_on+0x14>)
  400f08:	4798      	blx	r3
}
  400f0a:	bf00      	nop
  400f0c:	bd80      	pop	{r7, pc}
  400f0e:	bf00      	nop
  400f10:	00400a7d 	.word	0x00400a7d

00400f14 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400f14:	b480      	push	{r7}
  400f16:	b085      	sub	sp, #20
  400f18:	af00      	add	r7, sp, #0
  400f1a:	6078      	str	r0, [r7, #4]
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400f1c:	2300      	movs	r3, #0
  400f1e:	60fb      	str	r3, [r7, #12]
  400f20:	e016      	b.n	400f50 <ili9488_set_foreground_color+0x3c>
		g_ul_pixel_cache[i++] = ul_color>>16;
  400f22:	68fb      	ldr	r3, [r7, #12]
  400f24:	1c5a      	adds	r2, r3, #1
  400f26:	60fa      	str	r2, [r7, #12]
  400f28:	687a      	ldr	r2, [r7, #4]
  400f2a:	0c12      	lsrs	r2, r2, #16
  400f2c:	b2d1      	uxtb	r1, r2
  400f2e:	4a0d      	ldr	r2, [pc, #52]	; (400f64 <ili9488_set_foreground_color+0x50>)
  400f30:	54d1      	strb	r1, [r2, r3]
		g_ul_pixel_cache[i++] = ul_color>>8;
  400f32:	68fb      	ldr	r3, [r7, #12]
  400f34:	1c5a      	adds	r2, r3, #1
  400f36:	60fa      	str	r2, [r7, #12]
  400f38:	687a      	ldr	r2, [r7, #4]
  400f3a:	0a12      	lsrs	r2, r2, #8
  400f3c:	b2d1      	uxtb	r1, r2
  400f3e:	4a09      	ldr	r2, [pc, #36]	; (400f64 <ili9488_set_foreground_color+0x50>)
  400f40:	54d1      	strb	r1, [r2, r3]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  400f42:	68fb      	ldr	r3, [r7, #12]
  400f44:	1c5a      	adds	r2, r3, #1
  400f46:	60fa      	str	r2, [r7, #12]
  400f48:	687a      	ldr	r2, [r7, #4]
  400f4a:	b2d1      	uxtb	r1, r2
  400f4c:	4a05      	ldr	r2, [pc, #20]	; (400f64 <ili9488_set_foreground_color+0x50>)
  400f4e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400f50:	68fb      	ldr	r3, [r7, #12]
  400f52:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
  400f56:	d3e4      	bcc.n	400f22 <ili9488_set_foreground_color+0xe>
	}
#endif
}
  400f58:	bf00      	nop
  400f5a:	3714      	adds	r7, #20
  400f5c:	46bd      	mov	sp, r7
  400f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f62:	4770      	bx	lr
  400f64:	204009d8 	.word	0x204009d8

00400f68 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400f68:	b580      	push	{r7, lr}
  400f6a:	b084      	sub	sp, #16
  400f6c:	af00      	add	r7, sp, #0
  400f6e:	4603      	mov	r3, r0
  400f70:	460a      	mov	r2, r1
  400f72:	80fb      	strh	r3, [r7, #6]
  400f74:	4613      	mov	r3, r2
  400f76:	80bb      	strh	r3, [r7, #4]
	/* Set Horizontal Address Start Position */
	uint32_t cnt = 0;
  400f78:	2300      	movs	r3, #0
  400f7a:	60fb      	str	r3, [r7, #12]

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);
  400f7c:	2304      	movs	r3, #4
  400f7e:	60fb      	str	r3, [r7, #12]

	buf[0] = get_8b_to_16b(x);
  400f80:	1dbb      	adds	r3, r7, #6
  400f82:	785b      	ldrb	r3, [r3, #1]
  400f84:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(x);
  400f86:	1dbb      	adds	r3, r7, #6
  400f88:	781b      	ldrb	r3, [r3, #0]
  400f8a:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(x);
  400f8c:	1dbb      	adds	r3, r7, #6
  400f8e:	785b      	ldrb	r3, [r3, #1]
  400f90:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(x);
  400f92:	1dbb      	adds	r3, r7, #6
  400f94:	781b      	ldrb	r3, [r3, #0]
  400f96:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400f98:	f107 0308 	add.w	r3, r7, #8
  400f9c:	68fa      	ldr	r2, [r7, #12]
  400f9e:	4619      	mov	r1, r3
  400fa0:	202a      	movs	r0, #42	; 0x2a
  400fa2:	4b11      	ldr	r3, [pc, #68]	; (400fe8 <ili9488_set_cursor_position+0x80>)
  400fa4:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400fa6:	2200      	movs	r2, #0
  400fa8:	2100      	movs	r1, #0
  400faa:	2000      	movs	r0, #0
  400fac:	4b0e      	ldr	r3, [pc, #56]	; (400fe8 <ili9488_set_cursor_position+0x80>)
  400fae:	4798      	blx	r3


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  400fb0:	1d3b      	adds	r3, r7, #4
  400fb2:	785b      	ldrb	r3, [r3, #1]
  400fb4:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(y);
  400fb6:	1d3b      	adds	r3, r7, #4
  400fb8:	781b      	ldrb	r3, [r3, #0]
  400fba:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(y);
  400fbc:	1d3b      	adds	r3, r7, #4
  400fbe:	785b      	ldrb	r3, [r3, #1]
  400fc0:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(y);
  400fc2:	1d3b      	adds	r3, r7, #4
  400fc4:	781b      	ldrb	r3, [r3, #0]
  400fc6:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400fc8:	f107 0308 	add.w	r3, r7, #8
  400fcc:	68fa      	ldr	r2, [r7, #12]
  400fce:	4619      	mov	r1, r3
  400fd0:	202b      	movs	r0, #43	; 0x2b
  400fd2:	4b05      	ldr	r3, [pc, #20]	; (400fe8 <ili9488_set_cursor_position+0x80>)
  400fd4:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400fd6:	2200      	movs	r2, #0
  400fd8:	2100      	movs	r1, #0
  400fda:	2000      	movs	r0, #0
  400fdc:	4b02      	ldr	r3, [pc, #8]	; (400fe8 <ili9488_set_cursor_position+0x80>)
  400fde:	4798      	blx	r3
}
  400fe0:	bf00      	nop
  400fe2:	3710      	adds	r7, #16
  400fe4:	46bd      	mov	sp, r7
  400fe6:	bd80      	pop	{r7, pc}
  400fe8:	00400a7d 	.word	0x00400a7d

00400fec <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  400fec:	b590      	push	{r4, r7, lr}
  400fee:	b087      	sub	sp, #28
  400ff0:	af00      	add	r7, sp, #0
  400ff2:	60f8      	str	r0, [r7, #12]
  400ff4:	60b9      	str	r1, [r7, #8]
  400ff6:	607a      	str	r2, [r7, #4]
  400ff8:	603b      	str	r3, [r7, #0]
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  400ffa:	463b      	mov	r3, r7
  400ffc:	1d3a      	adds	r2, r7, #4
  400ffe:	f107 0108 	add.w	r1, r7, #8
  401002:	f107 000c 	add.w	r0, r7, #12
  401006:	4c2a      	ldr	r4, [pc, #168]	; (4010b0 <ili9488_draw_filled_rectangle+0xc4>)
  401008:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  40100a:	68fb      	ldr	r3, [r7, #12]
  40100c:	b298      	uxth	r0, r3
  40100e:	68bb      	ldr	r3, [r7, #8]
  401010:	b299      	uxth	r1, r3
  401012:	687b      	ldr	r3, [r7, #4]
  401014:	b29a      	uxth	r2, r3
  401016:	68fb      	ldr	r3, [r7, #12]
  401018:	b29b      	uxth	r3, r3
  40101a:	1ad3      	subs	r3, r2, r3
  40101c:	b29b      	uxth	r3, r3
  40101e:	3301      	adds	r3, #1
  401020:	b29c      	uxth	r4, r3
  401022:	683b      	ldr	r3, [r7, #0]
  401024:	b29a      	uxth	r2, r3
  401026:	68bb      	ldr	r3, [r7, #8]
  401028:	b29b      	uxth	r3, r3
  40102a:	1ad3      	subs	r3, r2, r3
  40102c:	b29b      	uxth	r3, r3
  40102e:	3301      	adds	r3, #1
  401030:	b29b      	uxth	r3, r3
  401032:	4622      	mov	r2, r4
  401034:	4c1f      	ldr	r4, [pc, #124]	; (4010b4 <ili9488_draw_filled_rectangle+0xc8>)
  401036:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  401038:	4b1f      	ldr	r3, [pc, #124]	; (4010b8 <ili9488_draw_filled_rectangle+0xcc>)
  40103a:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  40103c:	687a      	ldr	r2, [r7, #4]
  40103e:	68fb      	ldr	r3, [r7, #12]
  401040:	1ad3      	subs	r3, r2, r3
  401042:	3301      	adds	r3, #1
  401044:	6839      	ldr	r1, [r7, #0]
  401046:	68ba      	ldr	r2, [r7, #8]
  401048:	1a8a      	subs	r2, r1, r2
  40104a:	3201      	adds	r2, #1
  40104c:	fb02 f303 	mul.w	r3, r2, r3
  401050:	613b      	str	r3, [r7, #16]
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401052:	693b      	ldr	r3, [r7, #16]
  401054:	4a19      	ldr	r2, [pc, #100]	; (4010bc <ili9488_draw_filled_rectangle+0xd0>)
  401056:	fba2 2303 	umull	r2, r3, r2, r3
  40105a:	0a1b      	lsrs	r3, r3, #8
  40105c:	617b      	str	r3, [r7, #20]
	while (blocks--) {
  40105e:	e004      	b.n	40106a <ili9488_draw_filled_rectangle+0x7e>
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  401060:	f44f 7170 	mov.w	r1, #960	; 0x3c0
  401064:	4816      	ldr	r0, [pc, #88]	; (4010c0 <ili9488_draw_filled_rectangle+0xd4>)
  401066:	4b17      	ldr	r3, [pc, #92]	; (4010c4 <ili9488_draw_filled_rectangle+0xd8>)
  401068:	4798      	blx	r3
	while (blocks--) {
  40106a:	697b      	ldr	r3, [r7, #20]
  40106c:	1e5a      	subs	r2, r3, #1
  40106e:	617a      	str	r2, [r7, #20]
  401070:	2b00      	cmp	r3, #0
  401072:	d1f5      	bne.n	401060 <ili9488_draw_filled_rectangle+0x74>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  401074:	6939      	ldr	r1, [r7, #16]
  401076:	4b11      	ldr	r3, [pc, #68]	; (4010bc <ili9488_draw_filled_rectangle+0xd0>)
  401078:	fba3 2301 	umull	r2, r3, r3, r1
  40107c:	0a1a      	lsrs	r2, r3, #8
  40107e:	4613      	mov	r3, r2
  401080:	009b      	lsls	r3, r3, #2
  401082:	4413      	add	r3, r2
  401084:	019b      	lsls	r3, r3, #6
  401086:	1aca      	subs	r2, r1, r3
  401088:	4613      	mov	r3, r2
  40108a:	005b      	lsls	r3, r3, #1
  40108c:	4413      	add	r3, r2
  40108e:	4619      	mov	r1, r3
  401090:	480b      	ldr	r0, [pc, #44]	; (4010c0 <ili9488_draw_filled_rectangle+0xd4>)
  401092:	4b0c      	ldr	r3, [pc, #48]	; (4010c4 <ili9488_draw_filled_rectangle+0xd8>)
  401094:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  401096:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  40109a:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40109e:	2100      	movs	r1, #0
  4010a0:	2000      	movs	r0, #0
  4010a2:	4c04      	ldr	r4, [pc, #16]	; (4010b4 <ili9488_draw_filled_rectangle+0xc8>)
  4010a4:	47a0      	blx	r4

}
  4010a6:	bf00      	nop
  4010a8:	371c      	adds	r7, #28
  4010aa:	46bd      	mov	sp, r7
  4010ac:	bd90      	pop	{r4, r7, pc}
  4010ae:	bf00      	nop
  4010b0:	00400c01 	.word	0x00400c01
  4010b4:	00400cd9 	.word	0x00400cd9
  4010b8:	004009fd 	.word	0x004009fd
  4010bc:	cccccccd 	.word	0xcccccccd
  4010c0:	204009d8 	.word	0x204009d8
  4010c4:	00400a3d 	.word	0x00400a3d

004010c8 <ili9488_draw_pixmap>:
 * \param ul_height height of the picture.
 * \param p_ul_pixmap pixmap of the image.
 */
void ili9488_draw_pixmap(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height, const ili9488_color_t *p_ul_pixmap)
{
  4010c8:	b590      	push	{r4, r7, lr}
  4010ca:	b08b      	sub	sp, #44	; 0x2c
  4010cc:	af00      	add	r7, sp, #0
  4010ce:	60f8      	str	r0, [r7, #12]
  4010d0:	60b9      	str	r1, [r7, #8]
  4010d2:	607a      	str	r2, [r7, #4]
  4010d4:	603b      	str	r3, [r7, #0]
	uint32_t size;
	uint32_t dwX1, dwY1, dwX2, dwY2;
	dwX1 = ul_x;
  4010d6:	68fb      	ldr	r3, [r7, #12]
  4010d8:	623b      	str	r3, [r7, #32]
	dwY1 = ul_y;
  4010da:	68bb      	ldr	r3, [r7, #8]
  4010dc:	61fb      	str	r3, [r7, #28]
	dwX2 = ul_x + ul_width - 1;
  4010de:	68fa      	ldr	r2, [r7, #12]
  4010e0:	687b      	ldr	r3, [r7, #4]
  4010e2:	4413      	add	r3, r2
  4010e4:	3b01      	subs	r3, #1
  4010e6:	61bb      	str	r3, [r7, #24]
	dwY2 = ul_y + ul_height - 1;
  4010e8:	68ba      	ldr	r2, [r7, #8]
  4010ea:	683b      	ldr	r3, [r7, #0]
  4010ec:	4413      	add	r3, r2
  4010ee:	3b01      	subs	r3, #1
  4010f0:	617b      	str	r3, [r7, #20]

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&dwX1, &dwY1, &dwX2, &dwY2);
  4010f2:	f107 0314 	add.w	r3, r7, #20
  4010f6:	f107 0218 	add.w	r2, r7, #24
  4010fa:	f107 011c 	add.w	r1, r7, #28
  4010fe:	f107 0020 	add.w	r0, r7, #32
  401102:	4c1b      	ldr	r4, [pc, #108]	; (401170 <ili9488_draw_pixmap+0xa8>)
  401104:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(dwX1, dwY1, (dwX2 - dwX1 + 1), (dwY2 - dwY1 + 1));
  401106:	6a3b      	ldr	r3, [r7, #32]
  401108:	b298      	uxth	r0, r3
  40110a:	69fb      	ldr	r3, [r7, #28]
  40110c:	b299      	uxth	r1, r3
  40110e:	69bb      	ldr	r3, [r7, #24]
  401110:	b29a      	uxth	r2, r3
  401112:	6a3b      	ldr	r3, [r7, #32]
  401114:	b29b      	uxth	r3, r3
  401116:	1ad3      	subs	r3, r2, r3
  401118:	b29b      	uxth	r3, r3
  40111a:	3301      	adds	r3, #1
  40111c:	b29c      	uxth	r4, r3
  40111e:	697b      	ldr	r3, [r7, #20]
  401120:	b29a      	uxth	r2, r3
  401122:	69fb      	ldr	r3, [r7, #28]
  401124:	b29b      	uxth	r3, r3
  401126:	1ad3      	subs	r3, r2, r3
  401128:	b29b      	uxth	r3, r3
  40112a:	3301      	adds	r3, #1
  40112c:	b29b      	uxth	r3, r3
  40112e:	4622      	mov	r2, r4
  401130:	4c10      	ldr	r4, [pc, #64]	; (401174 <ili9488_draw_pixmap+0xac>)
  401132:	47a0      	blx	r4

	size = (dwX2 - dwX1) * (dwY2 - dwY1);
  401134:	69ba      	ldr	r2, [r7, #24]
  401136:	6a3b      	ldr	r3, [r7, #32]
  401138:	1ad3      	subs	r3, r2, r3
  40113a:	6979      	ldr	r1, [r7, #20]
  40113c:	69fa      	ldr	r2, [r7, #28]
  40113e:	1a8a      	subs	r2, r1, r2
  401140:	fb02 f303 	mul.w	r3, r2, r3
  401144:	627b      	str	r3, [r7, #36]	; 0x24

	ili9488_write_register(ILI9488_CMD_MEMORY_WRITE, p_ul_pixmap, size * LCD_DATA_COLOR_UNIT);
  401146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  401148:	4613      	mov	r3, r2
  40114a:	005b      	lsls	r3, r3, #1
  40114c:	4413      	add	r3, r2
  40114e:	461a      	mov	r2, r3
  401150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401152:	202c      	movs	r0, #44	; 0x2c
  401154:	4b08      	ldr	r3, [pc, #32]	; (401178 <ili9488_draw_pixmap+0xb0>)
  401156:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  401158:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  40115c:	f44f 72a0 	mov.w	r2, #320	; 0x140
  401160:	2100      	movs	r1, #0
  401162:	2000      	movs	r0, #0
  401164:	4c03      	ldr	r4, [pc, #12]	; (401174 <ili9488_draw_pixmap+0xac>)
  401166:	47a0      	blx	r4
}
  401168:	bf00      	nop
  40116a:	372c      	adds	r7, #44	; 0x2c
  40116c:	46bd      	mov	sp, r7
  40116e:	bd90      	pop	{r4, r7, pc}
  401170:	00400c01 	.word	0x00400c01
  401174:	00400cd9 	.word	0x00400cd9
  401178:	00400a7d 	.word	0x00400a7d

0040117c <spi_get_peripheral_select_mode>:
{
  40117c:	b480      	push	{r7}
  40117e:	b083      	sub	sp, #12
  401180:	af00      	add	r7, sp, #0
  401182:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401184:	687b      	ldr	r3, [r7, #4]
  401186:	685b      	ldr	r3, [r3, #4]
  401188:	f003 0302 	and.w	r3, r3, #2
  40118c:	2b00      	cmp	r3, #0
  40118e:	d001      	beq.n	401194 <spi_get_peripheral_select_mode+0x18>
		return 1;
  401190:	2301      	movs	r3, #1
  401192:	e000      	b.n	401196 <spi_get_peripheral_select_mode+0x1a>
		return 0;
  401194:	2300      	movs	r3, #0
}
  401196:	4618      	mov	r0, r3
  401198:	370c      	adds	r7, #12
  40119a:	46bd      	mov	sp, r7
  40119c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011a0:	4770      	bx	lr
	...

004011a4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4011a4:	b580      	push	{r7, lr}
  4011a6:	b082      	sub	sp, #8
  4011a8:	af00      	add	r7, sp, #0
  4011aa:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4011ac:	6878      	ldr	r0, [r7, #4]
  4011ae:	4b03      	ldr	r3, [pc, #12]	; (4011bc <sysclk_enable_peripheral_clock+0x18>)
  4011b0:	4798      	blx	r3
}
  4011b2:	bf00      	nop
  4011b4:	3708      	adds	r7, #8
  4011b6:	46bd      	mov	sp, r7
  4011b8:	bd80      	pop	{r7, pc}
  4011ba:	bf00      	nop
  4011bc:	00402831 	.word	0x00402831

004011c0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4011c0:	b580      	push	{r7, lr}
  4011c2:	b082      	sub	sp, #8
  4011c4:	af00      	add	r7, sp, #0
  4011c6:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4011c8:	687b      	ldr	r3, [r7, #4]
  4011ca:	4a09      	ldr	r2, [pc, #36]	; (4011f0 <spi_enable_clock+0x30>)
  4011cc:	4293      	cmp	r3, r2
  4011ce:	d103      	bne.n	4011d8 <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  4011d0:	2015      	movs	r0, #21
  4011d2:	4b08      	ldr	r3, [pc, #32]	; (4011f4 <spi_enable_clock+0x34>)
  4011d4:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4011d6:	e006      	b.n	4011e6 <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  4011d8:	687b      	ldr	r3, [r7, #4]
  4011da:	4a07      	ldr	r2, [pc, #28]	; (4011f8 <spi_enable_clock+0x38>)
  4011dc:	4293      	cmp	r3, r2
  4011de:	d102      	bne.n	4011e6 <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  4011e0:	202a      	movs	r0, #42	; 0x2a
  4011e2:	4b04      	ldr	r3, [pc, #16]	; (4011f4 <spi_enable_clock+0x34>)
  4011e4:	4798      	blx	r3
}
  4011e6:	bf00      	nop
  4011e8:	3708      	adds	r7, #8
  4011ea:	46bd      	mov	sp, r7
  4011ec:	bd80      	pop	{r7, pc}
  4011ee:	bf00      	nop
  4011f0:	40008000 	.word	0x40008000
  4011f4:	004011a5 	.word	0x004011a5
  4011f8:	40058000 	.word	0x40058000

004011fc <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  4011fc:	b480      	push	{r7}
  4011fe:	b083      	sub	sp, #12
  401200:	af00      	add	r7, sp, #0
  401202:	6078      	str	r0, [r7, #4]
  401204:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401206:	687b      	ldr	r3, [r7, #4]
  401208:	685b      	ldr	r3, [r3, #4]
  40120a:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  40120e:	687b      	ldr	r3, [r7, #4]
  401210:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401212:	687b      	ldr	r3, [r7, #4]
  401214:	685a      	ldr	r2, [r3, #4]
  401216:	683b      	ldr	r3, [r7, #0]
  401218:	041b      	lsls	r3, r3, #16
  40121a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  40121e:	431a      	orrs	r2, r3
  401220:	687b      	ldr	r3, [r7, #4]
  401222:	605a      	str	r2, [r3, #4]
}
  401224:	bf00      	nop
  401226:	370c      	adds	r7, #12
  401228:	46bd      	mov	sp, r7
  40122a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40122e:	4770      	bx	lr

00401230 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
  401230:	b480      	push	{r7}
  401232:	b083      	sub	sp, #12
  401234:	af00      	add	r7, sp, #0
  401236:	6078      	str	r0, [r7, #4]
  401238:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  40123a:	687b      	ldr	r3, [r7, #4]
  40123c:	685b      	ldr	r3, [r3, #4]
  40123e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  401242:	687b      	ldr	r3, [r7, #4]
  401244:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401246:	687b      	ldr	r3, [r7, #4]
  401248:	685a      	ldr	r2, [r3, #4]
  40124a:	683b      	ldr	r3, [r7, #0]
  40124c:	061b      	lsls	r3, r3, #24
  40124e:	431a      	orrs	r2, r3
  401250:	687b      	ldr	r3, [r7, #4]
  401252:	605a      	str	r2, [r3, #4]
}
  401254:	bf00      	nop
  401256:	370c      	adds	r7, #12
  401258:	46bd      	mov	sp, r7
  40125a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40125e:	4770      	bx	lr

00401260 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401260:	b580      	push	{r7, lr}
  401262:	b084      	sub	sp, #16
  401264:	af00      	add	r7, sp, #0
  401266:	6078      	str	r0, [r7, #4]
  401268:	4608      	mov	r0, r1
  40126a:	4611      	mov	r1, r2
  40126c:	461a      	mov	r2, r3
  40126e:	4603      	mov	r3, r0
  401270:	807b      	strh	r3, [r7, #2]
  401272:	460b      	mov	r3, r1
  401274:	707b      	strb	r3, [r7, #1]
  401276:	4613      	mov	r3, r2
  401278:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  40127a:	f643 2398 	movw	r3, #15000	; 0x3a98
  40127e:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401280:	e006      	b.n	401290 <spi_write+0x30>
		if (!timeout--) {
  401282:	68fb      	ldr	r3, [r7, #12]
  401284:	1e5a      	subs	r2, r3, #1
  401286:	60fa      	str	r2, [r7, #12]
  401288:	2b00      	cmp	r3, #0
  40128a:	d101      	bne.n	401290 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  40128c:	2301      	movs	r3, #1
  40128e:	e020      	b.n	4012d2 <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401290:	687b      	ldr	r3, [r7, #4]
  401292:	691b      	ldr	r3, [r3, #16]
  401294:	f003 0302 	and.w	r3, r3, #2
  401298:	2b00      	cmp	r3, #0
  40129a:	d0f2      	beq.n	401282 <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40129c:	6878      	ldr	r0, [r7, #4]
  40129e:	4b0f      	ldr	r3, [pc, #60]	; (4012dc <spi_write+0x7c>)
  4012a0:	4798      	blx	r3
  4012a2:	4603      	mov	r3, r0
  4012a4:	2b00      	cmp	r3, #0
  4012a6:	d00e      	beq.n	4012c6 <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4012a8:	887a      	ldrh	r2, [r7, #2]
  4012aa:	787b      	ldrb	r3, [r7, #1]
  4012ac:	041b      	lsls	r3, r3, #16
  4012ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  4012b2:	4313      	orrs	r3, r2
  4012b4:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  4012b6:	783b      	ldrb	r3, [r7, #0]
  4012b8:	2b00      	cmp	r3, #0
  4012ba:	d006      	beq.n	4012ca <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  4012bc:	68bb      	ldr	r3, [r7, #8]
  4012be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4012c2:	60bb      	str	r3, [r7, #8]
  4012c4:	e001      	b.n	4012ca <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  4012c6:	887b      	ldrh	r3, [r7, #2]
  4012c8:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  4012ca:	687b      	ldr	r3, [r7, #4]
  4012cc:	68ba      	ldr	r2, [r7, #8]
  4012ce:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  4012d0:	2300      	movs	r3, #0
}
  4012d2:	4618      	mov	r0, r3
  4012d4:	3710      	adds	r7, #16
  4012d6:	46bd      	mov	sp, r7
  4012d8:	bd80      	pop	{r7, pc}
  4012da:	bf00      	nop
  4012dc:	0040117d 	.word	0x0040117d

004012e0 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  4012e0:	b480      	push	{r7}
  4012e2:	b085      	sub	sp, #20
  4012e4:	af00      	add	r7, sp, #0
  4012e6:	60f8      	str	r0, [r7, #12]
  4012e8:	60b9      	str	r1, [r7, #8]
  4012ea:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  4012ec:	687b      	ldr	r3, [r7, #4]
  4012ee:	2b00      	cmp	r3, #0
  4012f0:	d00c      	beq.n	40130c <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4012f2:	68fb      	ldr	r3, [r7, #12]
  4012f4:	68ba      	ldr	r2, [r7, #8]
  4012f6:	320c      	adds	r2, #12
  4012f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4012fc:	f043 0101 	orr.w	r1, r3, #1
  401300:	68fb      	ldr	r3, [r7, #12]
  401302:	68ba      	ldr	r2, [r7, #8]
  401304:	320c      	adds	r2, #12
  401306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  40130a:	e00b      	b.n	401324 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40130c:	68fb      	ldr	r3, [r7, #12]
  40130e:	68ba      	ldr	r2, [r7, #8]
  401310:	320c      	adds	r2, #12
  401312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401316:	f023 0101 	bic.w	r1, r3, #1
  40131a:	68fb      	ldr	r3, [r7, #12]
  40131c:	68ba      	ldr	r2, [r7, #8]
  40131e:	320c      	adds	r2, #12
  401320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401324:	bf00      	nop
  401326:	3714      	adds	r7, #20
  401328:	46bd      	mov	sp, r7
  40132a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40132e:	4770      	bx	lr

00401330 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  401330:	b480      	push	{r7}
  401332:	b085      	sub	sp, #20
  401334:	af00      	add	r7, sp, #0
  401336:	60f8      	str	r0, [r7, #12]
  401338:	60b9      	str	r1, [r7, #8]
  40133a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  40133c:	687b      	ldr	r3, [r7, #4]
  40133e:	2b00      	cmp	r3, #0
  401340:	d00c      	beq.n	40135c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401342:	68fb      	ldr	r3, [r7, #12]
  401344:	68ba      	ldr	r2, [r7, #8]
  401346:	320c      	adds	r2, #12
  401348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40134c:	f043 0102 	orr.w	r1, r3, #2
  401350:	68fb      	ldr	r3, [r7, #12]
  401352:	68ba      	ldr	r2, [r7, #8]
  401354:	320c      	adds	r2, #12
  401356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  40135a:	e00b      	b.n	401374 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40135c:	68fb      	ldr	r3, [r7, #12]
  40135e:	68ba      	ldr	r2, [r7, #8]
  401360:	320c      	adds	r2, #12
  401362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401366:	f023 0102 	bic.w	r1, r3, #2
  40136a:	68fb      	ldr	r3, [r7, #12]
  40136c:	68ba      	ldr	r2, [r7, #8]
  40136e:	320c      	adds	r2, #12
  401370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401374:	bf00      	nop
  401376:	3714      	adds	r7, #20
  401378:	46bd      	mov	sp, r7
  40137a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40137e:	4770      	bx	lr

00401380 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  401380:	b480      	push	{r7}
  401382:	b085      	sub	sp, #20
  401384:	af00      	add	r7, sp, #0
  401386:	60f8      	str	r0, [r7, #12]
  401388:	60b9      	str	r1, [r7, #8]
  40138a:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40138c:	687b      	ldr	r3, [r7, #4]
  40138e:	2b04      	cmp	r3, #4
  401390:	d118      	bne.n	4013c4 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401392:	68fb      	ldr	r3, [r7, #12]
  401394:	68ba      	ldr	r2, [r7, #8]
  401396:	320c      	adds	r2, #12
  401398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40139c:	f023 0108 	bic.w	r1, r3, #8
  4013a0:	68fb      	ldr	r3, [r7, #12]
  4013a2:	68ba      	ldr	r2, [r7, #8]
  4013a4:	320c      	adds	r2, #12
  4013a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4013aa:	68fb      	ldr	r3, [r7, #12]
  4013ac:	68ba      	ldr	r2, [r7, #8]
  4013ae:	320c      	adds	r2, #12
  4013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4013b4:	f043 0104 	orr.w	r1, r3, #4
  4013b8:	68fb      	ldr	r3, [r7, #12]
  4013ba:	68ba      	ldr	r2, [r7, #8]
  4013bc:	320c      	adds	r2, #12
  4013be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  4013c2:	e02a      	b.n	40141a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4013c4:	687b      	ldr	r3, [r7, #4]
  4013c6:	2b00      	cmp	r3, #0
  4013c8:	d118      	bne.n	4013fc <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4013ca:	68fb      	ldr	r3, [r7, #12]
  4013cc:	68ba      	ldr	r2, [r7, #8]
  4013ce:	320c      	adds	r2, #12
  4013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4013d4:	f023 0108 	bic.w	r1, r3, #8
  4013d8:	68fb      	ldr	r3, [r7, #12]
  4013da:	68ba      	ldr	r2, [r7, #8]
  4013dc:	320c      	adds	r2, #12
  4013de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4013e2:	68fb      	ldr	r3, [r7, #12]
  4013e4:	68ba      	ldr	r2, [r7, #8]
  4013e6:	320c      	adds	r2, #12
  4013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4013ec:	f023 0104 	bic.w	r1, r3, #4
  4013f0:	68fb      	ldr	r3, [r7, #12]
  4013f2:	68ba      	ldr	r2, [r7, #8]
  4013f4:	320c      	adds	r2, #12
  4013f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4013fa:	e00e      	b.n	40141a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4013fc:	687b      	ldr	r3, [r7, #4]
  4013fe:	2b08      	cmp	r3, #8
  401400:	d10b      	bne.n	40141a <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401402:	68fb      	ldr	r3, [r7, #12]
  401404:	68ba      	ldr	r2, [r7, #8]
  401406:	320c      	adds	r2, #12
  401408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40140c:	f043 0108 	orr.w	r1, r3, #8
  401410:	68fb      	ldr	r3, [r7, #12]
  401412:	68ba      	ldr	r2, [r7, #8]
  401414:	320c      	adds	r2, #12
  401416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40141a:	bf00      	nop
  40141c:	3714      	adds	r7, #20
  40141e:	46bd      	mov	sp, r7
  401420:	f85d 7b04 	ldr.w	r7, [sp], #4
  401424:	4770      	bx	lr

00401426 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401426:	b480      	push	{r7}
  401428:	b085      	sub	sp, #20
  40142a:	af00      	add	r7, sp, #0
  40142c:	60f8      	str	r0, [r7, #12]
  40142e:	60b9      	str	r1, [r7, #8]
  401430:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401432:	68fb      	ldr	r3, [r7, #12]
  401434:	68ba      	ldr	r2, [r7, #8]
  401436:	320c      	adds	r2, #12
  401438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40143c:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  401440:	68fb      	ldr	r3, [r7, #12]
  401442:	68ba      	ldr	r2, [r7, #8]
  401444:	320c      	adds	r2, #12
  401446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40144a:	68fb      	ldr	r3, [r7, #12]
  40144c:	68ba      	ldr	r2, [r7, #8]
  40144e:	320c      	adds	r2, #12
  401450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  401454:	687b      	ldr	r3, [r7, #4]
  401456:	ea42 0103 	orr.w	r1, r2, r3
  40145a:	68fb      	ldr	r3, [r7, #12]
  40145c:	68ba      	ldr	r2, [r7, #8]
  40145e:	320c      	adds	r2, #12
  401460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401464:	bf00      	nop
  401466:	3714      	adds	r7, #20
  401468:	46bd      	mov	sp, r7
  40146a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40146e:	4770      	bx	lr

00401470 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  401470:	b480      	push	{r7}
  401472:	b085      	sub	sp, #20
  401474:	af00      	add	r7, sp, #0
  401476:	6078      	str	r0, [r7, #4]
  401478:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  40147a:	683a      	ldr	r2, [r7, #0]
  40147c:	687b      	ldr	r3, [r7, #4]
  40147e:	4413      	add	r3, r2
  401480:	1e5a      	subs	r2, r3, #1
  401482:	687b      	ldr	r3, [r7, #4]
  401484:	fbb2 f3f3 	udiv	r3, r2, r3
  401488:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40148a:	68fb      	ldr	r3, [r7, #12]
  40148c:	2b00      	cmp	r3, #0
  40148e:	dd02      	ble.n	401496 <spi_calc_baudrate_div+0x26>
  401490:	68fb      	ldr	r3, [r7, #12]
  401492:	2bff      	cmp	r3, #255	; 0xff
  401494:	dd02      	ble.n	40149c <spi_calc_baudrate_div+0x2c>
		return -1;
  401496:	f04f 33ff 	mov.w	r3, #4294967295
  40149a:	e001      	b.n	4014a0 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  40149c:	68fb      	ldr	r3, [r7, #12]
  40149e:	b21b      	sxth	r3, r3
}
  4014a0:	4618      	mov	r0, r3
  4014a2:	3714      	adds	r7, #20
  4014a4:	46bd      	mov	sp, r7
  4014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014aa:	4770      	bx	lr

004014ac <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4014ac:	b480      	push	{r7}
  4014ae:	b085      	sub	sp, #20
  4014b0:	af00      	add	r7, sp, #0
  4014b2:	60f8      	str	r0, [r7, #12]
  4014b4:	60b9      	str	r1, [r7, #8]
  4014b6:	4613      	mov	r3, r2
  4014b8:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4014ba:	79fb      	ldrb	r3, [r7, #7]
  4014bc:	2b00      	cmp	r3, #0
  4014be:	d102      	bne.n	4014c6 <spi_set_baudrate_div+0x1a>
        return -1;
  4014c0:	f04f 33ff 	mov.w	r3, #4294967295
  4014c4:	e01b      	b.n	4014fe <spi_set_baudrate_div+0x52>
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4014c6:	68fb      	ldr	r3, [r7, #12]
  4014c8:	68ba      	ldr	r2, [r7, #8]
  4014ca:	320c      	adds	r2, #12
  4014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4014d0:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  4014d4:	68fb      	ldr	r3, [r7, #12]
  4014d6:	68ba      	ldr	r2, [r7, #8]
  4014d8:	320c      	adds	r2, #12
  4014da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4014de:	68fb      	ldr	r3, [r7, #12]
  4014e0:	68ba      	ldr	r2, [r7, #8]
  4014e2:	320c      	adds	r2, #12
  4014e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4014e8:	79fb      	ldrb	r3, [r7, #7]
  4014ea:	021b      	lsls	r3, r3, #8
  4014ec:	b29b      	uxth	r3, r3
  4014ee:	ea42 0103 	orr.w	r1, r2, r3
  4014f2:	68fb      	ldr	r3, [r7, #12]
  4014f4:	68ba      	ldr	r2, [r7, #8]
  4014f6:	320c      	adds	r2, #12
  4014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  4014fc:	2300      	movs	r3, #0
}
  4014fe:	4618      	mov	r0, r3
  401500:	3714      	adds	r7, #20
  401502:	46bd      	mov	sp, r7
  401504:	f85d 7b04 	ldr.w	r7, [sp], #4
  401508:	4770      	bx	lr

0040150a <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  40150a:	b480      	push	{r7}
  40150c:	b085      	sub	sp, #20
  40150e:	af00      	add	r7, sp, #0
  401510:	60f8      	str	r0, [r7, #12]
  401512:	60b9      	str	r1, [r7, #8]
  401514:	4611      	mov	r1, r2
  401516:	461a      	mov	r2, r3
  401518:	460b      	mov	r3, r1
  40151a:	71fb      	strb	r3, [r7, #7]
  40151c:	4613      	mov	r3, r2
  40151e:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401520:	68fb      	ldr	r3, [r7, #12]
  401522:	68ba      	ldr	r2, [r7, #8]
  401524:	320c      	adds	r2, #12
  401526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40152a:	b299      	uxth	r1, r3
  40152c:	68fb      	ldr	r3, [r7, #12]
  40152e:	68ba      	ldr	r2, [r7, #8]
  401530:	320c      	adds	r2, #12
  401532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401536:	68fb      	ldr	r3, [r7, #12]
  401538:	68ba      	ldr	r2, [r7, #8]
  40153a:	320c      	adds	r2, #12
  40153c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  401540:	79fb      	ldrb	r3, [r7, #7]
  401542:	041b      	lsls	r3, r3, #16
  401544:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
  401548:	79b9      	ldrb	r1, [r7, #6]
  40154a:	0609      	lsls	r1, r1, #24
  40154c:	430b      	orrs	r3, r1
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40154e:	ea42 0103 	orr.w	r1, r2, r3
  401552:	68fb      	ldr	r3, [r7, #12]
  401554:	68ba      	ldr	r2, [r7, #8]
  401556:	320c      	adds	r2, #12
  401558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40155c:	bf00      	nop
  40155e:	3714      	adds	r7, #20
  401560:	46bd      	mov	sp, r7
  401562:	f85d 7b04 	ldr.w	r7, [sp], #4
  401566:	4770      	bx	lr

00401568 <osc_enable>:
{
  401568:	b580      	push	{r7, lr}
  40156a:	b082      	sub	sp, #8
  40156c:	af00      	add	r7, sp, #0
  40156e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401570:	687b      	ldr	r3, [r7, #4]
  401572:	2b07      	cmp	r3, #7
  401574:	d831      	bhi.n	4015da <osc_enable+0x72>
  401576:	a201      	add	r2, pc, #4	; (adr r2, 40157c <osc_enable+0x14>)
  401578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40157c:	004015d9 	.word	0x004015d9
  401580:	0040159d 	.word	0x0040159d
  401584:	004015a5 	.word	0x004015a5
  401588:	004015ad 	.word	0x004015ad
  40158c:	004015b5 	.word	0x004015b5
  401590:	004015bd 	.word	0x004015bd
  401594:	004015c5 	.word	0x004015c5
  401598:	004015cf 	.word	0x004015cf
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40159c:	2000      	movs	r0, #0
  40159e:	4b11      	ldr	r3, [pc, #68]	; (4015e4 <osc_enable+0x7c>)
  4015a0:	4798      	blx	r3
		break;
  4015a2:	e01a      	b.n	4015da <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4015a4:	2001      	movs	r0, #1
  4015a6:	4b0f      	ldr	r3, [pc, #60]	; (4015e4 <osc_enable+0x7c>)
  4015a8:	4798      	blx	r3
		break;
  4015aa:	e016      	b.n	4015da <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4015ac:	2000      	movs	r0, #0
  4015ae:	4b0e      	ldr	r3, [pc, #56]	; (4015e8 <osc_enable+0x80>)
  4015b0:	4798      	blx	r3
		break;
  4015b2:	e012      	b.n	4015da <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4015b4:	2010      	movs	r0, #16
  4015b6:	4b0c      	ldr	r3, [pc, #48]	; (4015e8 <osc_enable+0x80>)
  4015b8:	4798      	blx	r3
		break;
  4015ba:	e00e      	b.n	4015da <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4015bc:	2020      	movs	r0, #32
  4015be:	4b0a      	ldr	r3, [pc, #40]	; (4015e8 <osc_enable+0x80>)
  4015c0:	4798      	blx	r3
		break;
  4015c2:	e00a      	b.n	4015da <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4015c4:	213e      	movs	r1, #62	; 0x3e
  4015c6:	2000      	movs	r0, #0
  4015c8:	4b08      	ldr	r3, [pc, #32]	; (4015ec <osc_enable+0x84>)
  4015ca:	4798      	blx	r3
		break;
  4015cc:	e005      	b.n	4015da <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4015ce:	213e      	movs	r1, #62	; 0x3e
  4015d0:	2001      	movs	r0, #1
  4015d2:	4b06      	ldr	r3, [pc, #24]	; (4015ec <osc_enable+0x84>)
  4015d4:	4798      	blx	r3
		break;
  4015d6:	e000      	b.n	4015da <osc_enable+0x72>
		break;
  4015d8:	bf00      	nop
}
  4015da:	bf00      	nop
  4015dc:	3708      	adds	r7, #8
  4015de:	46bd      	mov	sp, r7
  4015e0:	bd80      	pop	{r7, pc}
  4015e2:	bf00      	nop
  4015e4:	0040266d 	.word	0x0040266d
  4015e8:	004026d9 	.word	0x004026d9
  4015ec:	00402749 	.word	0x00402749

004015f0 <osc_is_ready>:
{
  4015f0:	b580      	push	{r7, lr}
  4015f2:	b082      	sub	sp, #8
  4015f4:	af00      	add	r7, sp, #0
  4015f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4015f8:	687b      	ldr	r3, [r7, #4]
  4015fa:	2b07      	cmp	r3, #7
  4015fc:	d826      	bhi.n	40164c <osc_is_ready+0x5c>
  4015fe:	a201      	add	r2, pc, #4	; (adr r2, 401604 <osc_is_ready+0x14>)
  401600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401604:	00401625 	.word	0x00401625
  401608:	00401629 	.word	0x00401629
  40160c:	00401629 	.word	0x00401629
  401610:	0040163b 	.word	0x0040163b
  401614:	0040163b 	.word	0x0040163b
  401618:	0040163b 	.word	0x0040163b
  40161c:	0040163b 	.word	0x0040163b
  401620:	0040163b 	.word	0x0040163b
		return 1;
  401624:	2301      	movs	r3, #1
  401626:	e012      	b.n	40164e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  401628:	4b0b      	ldr	r3, [pc, #44]	; (401658 <osc_is_ready+0x68>)
  40162a:	4798      	blx	r3
  40162c:	4603      	mov	r3, r0
  40162e:	2b00      	cmp	r3, #0
  401630:	bf14      	ite	ne
  401632:	2301      	movne	r3, #1
  401634:	2300      	moveq	r3, #0
  401636:	b2db      	uxtb	r3, r3
  401638:	e009      	b.n	40164e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  40163a:	4b08      	ldr	r3, [pc, #32]	; (40165c <osc_is_ready+0x6c>)
  40163c:	4798      	blx	r3
  40163e:	4603      	mov	r3, r0
  401640:	2b00      	cmp	r3, #0
  401642:	bf14      	ite	ne
  401644:	2301      	movne	r3, #1
  401646:	2300      	moveq	r3, #0
  401648:	b2db      	uxtb	r3, r3
  40164a:	e000      	b.n	40164e <osc_is_ready+0x5e>
	return 0;
  40164c:	2300      	movs	r3, #0
}
  40164e:	4618      	mov	r0, r3
  401650:	3708      	adds	r7, #8
  401652:	46bd      	mov	sp, r7
  401654:	bd80      	pop	{r7, pc}
  401656:	bf00      	nop
  401658:	004026a5 	.word	0x004026a5
  40165c:	004027c1 	.word	0x004027c1

00401660 <osc_get_rate>:
{
  401660:	b480      	push	{r7}
  401662:	b083      	sub	sp, #12
  401664:	af00      	add	r7, sp, #0
  401666:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401668:	687b      	ldr	r3, [r7, #4]
  40166a:	2b07      	cmp	r3, #7
  40166c:	d825      	bhi.n	4016ba <osc_get_rate+0x5a>
  40166e:	a201      	add	r2, pc, #4	; (adr r2, 401674 <osc_get_rate+0x14>)
  401670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401674:	00401695 	.word	0x00401695
  401678:	0040169b 	.word	0x0040169b
  40167c:	004016a1 	.word	0x004016a1
  401680:	004016a7 	.word	0x004016a7
  401684:	004016ab 	.word	0x004016ab
  401688:	004016af 	.word	0x004016af
  40168c:	004016b3 	.word	0x004016b3
  401690:	004016b7 	.word	0x004016b7
		return OSC_SLCK_32K_RC_HZ;
  401694:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401698:	e010      	b.n	4016bc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40169a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40169e:	e00d      	b.n	4016bc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4016a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4016a4:	e00a      	b.n	4016bc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4016a6:	4b08      	ldr	r3, [pc, #32]	; (4016c8 <osc_get_rate+0x68>)
  4016a8:	e008      	b.n	4016bc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4016aa:	4b08      	ldr	r3, [pc, #32]	; (4016cc <osc_get_rate+0x6c>)
  4016ac:	e006      	b.n	4016bc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4016ae:	4b08      	ldr	r3, [pc, #32]	; (4016d0 <osc_get_rate+0x70>)
  4016b0:	e004      	b.n	4016bc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4016b2:	4b07      	ldr	r3, [pc, #28]	; (4016d0 <osc_get_rate+0x70>)
  4016b4:	e002      	b.n	4016bc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4016b6:	4b06      	ldr	r3, [pc, #24]	; (4016d0 <osc_get_rate+0x70>)
  4016b8:	e000      	b.n	4016bc <osc_get_rate+0x5c>
	return 0;
  4016ba:	2300      	movs	r3, #0
}
  4016bc:	4618      	mov	r0, r3
  4016be:	370c      	adds	r7, #12
  4016c0:	46bd      	mov	sp, r7
  4016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016c6:	4770      	bx	lr
  4016c8:	003d0900 	.word	0x003d0900
  4016cc:	007a1200 	.word	0x007a1200
  4016d0:	00b71b00 	.word	0x00b71b00

004016d4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4016d4:	b580      	push	{r7, lr}
  4016d6:	b082      	sub	sp, #8
  4016d8:	af00      	add	r7, sp, #0
  4016da:	4603      	mov	r3, r0
  4016dc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4016de:	bf00      	nop
  4016e0:	79fb      	ldrb	r3, [r7, #7]
  4016e2:	4618      	mov	r0, r3
  4016e4:	4b05      	ldr	r3, [pc, #20]	; (4016fc <osc_wait_ready+0x28>)
  4016e6:	4798      	blx	r3
  4016e8:	4603      	mov	r3, r0
  4016ea:	f083 0301 	eor.w	r3, r3, #1
  4016ee:	b2db      	uxtb	r3, r3
  4016f0:	2b00      	cmp	r3, #0
  4016f2:	d1f5      	bne.n	4016e0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4016f4:	bf00      	nop
  4016f6:	3708      	adds	r7, #8
  4016f8:	46bd      	mov	sp, r7
  4016fa:	bd80      	pop	{r7, pc}
  4016fc:	004015f1 	.word	0x004015f1

00401700 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401700:	b580      	push	{r7, lr}
  401702:	b086      	sub	sp, #24
  401704:	af00      	add	r7, sp, #0
  401706:	60f8      	str	r0, [r7, #12]
  401708:	607a      	str	r2, [r7, #4]
  40170a:	603b      	str	r3, [r7, #0]
  40170c:	460b      	mov	r3, r1
  40170e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  401710:	687b      	ldr	r3, [r7, #4]
  401712:	2b00      	cmp	r3, #0
  401714:	d107      	bne.n	401726 <pll_config_init+0x26>
  401716:	683b      	ldr	r3, [r7, #0]
  401718:	2b00      	cmp	r3, #0
  40171a:	d104      	bne.n	401726 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  40171c:	68fb      	ldr	r3, [r7, #12]
  40171e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  401722:	601a      	str	r2, [r3, #0]
  401724:	e019      	b.n	40175a <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401726:	7afb      	ldrb	r3, [r7, #11]
  401728:	4618      	mov	r0, r3
  40172a:	4b0e      	ldr	r3, [pc, #56]	; (401764 <pll_config_init+0x64>)
  40172c:	4798      	blx	r3
  40172e:	4602      	mov	r2, r0
  401730:	687b      	ldr	r3, [r7, #4]
  401732:	fbb2 f3f3 	udiv	r3, r2, r3
  401736:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401738:	697b      	ldr	r3, [r7, #20]
  40173a:	683a      	ldr	r2, [r7, #0]
  40173c:	fb02 f303 	mul.w	r3, r2, r3
  401740:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  401742:	683b      	ldr	r3, [r7, #0]
  401744:	3b01      	subs	r3, #1
  401746:	041a      	lsls	r2, r3, #16
  401748:	4b07      	ldr	r3, [pc, #28]	; (401768 <pll_config_init+0x68>)
  40174a:	4013      	ands	r3, r2
  40174c:	687a      	ldr	r2, [r7, #4]
  40174e:	b2d2      	uxtb	r2, r2
  401750:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401752:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  401756:	68fb      	ldr	r3, [r7, #12]
  401758:	601a      	str	r2, [r3, #0]
	}
}
  40175a:	bf00      	nop
  40175c:	3718      	adds	r7, #24
  40175e:	46bd      	mov	sp, r7
  401760:	bd80      	pop	{r7, pc}
  401762:	bf00      	nop
  401764:	00401661 	.word	0x00401661
  401768:	07ff0000 	.word	0x07ff0000

0040176c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40176c:	b580      	push	{r7, lr}
  40176e:	b082      	sub	sp, #8
  401770:	af00      	add	r7, sp, #0
  401772:	6078      	str	r0, [r7, #4]
  401774:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401776:	683b      	ldr	r3, [r7, #0]
  401778:	2b00      	cmp	r3, #0
  40177a:	d108      	bne.n	40178e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  40177c:	4b09      	ldr	r3, [pc, #36]	; (4017a4 <pll_enable+0x38>)
  40177e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401780:	4a09      	ldr	r2, [pc, #36]	; (4017a8 <pll_enable+0x3c>)
  401782:	687b      	ldr	r3, [r7, #4]
  401784:	681b      	ldr	r3, [r3, #0]
  401786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40178a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  40178c:	e005      	b.n	40179a <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  40178e:	4a06      	ldr	r2, [pc, #24]	; (4017a8 <pll_enable+0x3c>)
  401790:	687b      	ldr	r3, [r7, #4]
  401792:	681b      	ldr	r3, [r3, #0]
  401794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401798:	61d3      	str	r3, [r2, #28]
}
  40179a:	bf00      	nop
  40179c:	3708      	adds	r7, #8
  40179e:	46bd      	mov	sp, r7
  4017a0:	bd80      	pop	{r7, pc}
  4017a2:	bf00      	nop
  4017a4:	004027dd 	.word	0x004027dd
  4017a8:	400e0600 	.word	0x400e0600

004017ac <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4017ac:	b580      	push	{r7, lr}
  4017ae:	b082      	sub	sp, #8
  4017b0:	af00      	add	r7, sp, #0
  4017b2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4017b4:	687b      	ldr	r3, [r7, #4]
  4017b6:	2b00      	cmp	r3, #0
  4017b8:	d103      	bne.n	4017c2 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4017ba:	4b05      	ldr	r3, [pc, #20]	; (4017d0 <pll_is_locked+0x24>)
  4017bc:	4798      	blx	r3
  4017be:	4603      	mov	r3, r0
  4017c0:	e002      	b.n	4017c8 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4017c2:	4b04      	ldr	r3, [pc, #16]	; (4017d4 <pll_is_locked+0x28>)
  4017c4:	4798      	blx	r3
  4017c6:	4603      	mov	r3, r0
	}
}
  4017c8:	4618      	mov	r0, r3
  4017ca:	3708      	adds	r7, #8
  4017cc:	46bd      	mov	sp, r7
  4017ce:	bd80      	pop	{r7, pc}
  4017d0:	004027f9 	.word	0x004027f9
  4017d4:	00402815 	.word	0x00402815

004017d8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4017d8:	b580      	push	{r7, lr}
  4017da:	b082      	sub	sp, #8
  4017dc:	af00      	add	r7, sp, #0
  4017de:	4603      	mov	r3, r0
  4017e0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4017e2:	79fb      	ldrb	r3, [r7, #7]
  4017e4:	3b03      	subs	r3, #3
  4017e6:	2b04      	cmp	r3, #4
  4017e8:	d808      	bhi.n	4017fc <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4017ea:	79fb      	ldrb	r3, [r7, #7]
  4017ec:	4618      	mov	r0, r3
  4017ee:	4b06      	ldr	r3, [pc, #24]	; (401808 <pll_enable_source+0x30>)
  4017f0:	4798      	blx	r3
		osc_wait_ready(e_src);
  4017f2:	79fb      	ldrb	r3, [r7, #7]
  4017f4:	4618      	mov	r0, r3
  4017f6:	4b05      	ldr	r3, [pc, #20]	; (40180c <pll_enable_source+0x34>)
  4017f8:	4798      	blx	r3
		break;
  4017fa:	e000      	b.n	4017fe <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4017fc:	bf00      	nop
	}
}
  4017fe:	bf00      	nop
  401800:	3708      	adds	r7, #8
  401802:	46bd      	mov	sp, r7
  401804:	bd80      	pop	{r7, pc}
  401806:	bf00      	nop
  401808:	00401569 	.word	0x00401569
  40180c:	004016d5 	.word	0x004016d5

00401810 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401810:	b580      	push	{r7, lr}
  401812:	b082      	sub	sp, #8
  401814:	af00      	add	r7, sp, #0
  401816:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401818:	bf00      	nop
  40181a:	6878      	ldr	r0, [r7, #4]
  40181c:	4b04      	ldr	r3, [pc, #16]	; (401830 <pll_wait_for_lock+0x20>)
  40181e:	4798      	blx	r3
  401820:	4603      	mov	r3, r0
  401822:	2b00      	cmp	r3, #0
  401824:	d0f9      	beq.n	40181a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401826:	2300      	movs	r3, #0
}
  401828:	4618      	mov	r0, r3
  40182a:	3708      	adds	r7, #8
  40182c:	46bd      	mov	sp, r7
  40182e:	bd80      	pop	{r7, pc}
  401830:	004017ad 	.word	0x004017ad

00401834 <sysclk_get_main_hz>:
{
  401834:	b580      	push	{r7, lr}
  401836:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401838:	2006      	movs	r0, #6
  40183a:	4b05      	ldr	r3, [pc, #20]	; (401850 <sysclk_get_main_hz+0x1c>)
  40183c:	4798      	blx	r3
  40183e:	4602      	mov	r2, r0
  401840:	4613      	mov	r3, r2
  401842:	009b      	lsls	r3, r3, #2
  401844:	4413      	add	r3, r2
  401846:	009a      	lsls	r2, r3, #2
  401848:	4413      	add	r3, r2
}
  40184a:	4618      	mov	r0, r3
  40184c:	bd80      	pop	{r7, pc}
  40184e:	bf00      	nop
  401850:	00401661 	.word	0x00401661

00401854 <sysclk_get_cpu_hz>:
{
  401854:	b580      	push	{r7, lr}
  401856:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401858:	4b02      	ldr	r3, [pc, #8]	; (401864 <sysclk_get_cpu_hz+0x10>)
  40185a:	4798      	blx	r3
  40185c:	4603      	mov	r3, r0
}
  40185e:	4618      	mov	r0, r3
  401860:	bd80      	pop	{r7, pc}
  401862:	bf00      	nop
  401864:	00401835 	.word	0x00401835

00401868 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401868:	b590      	push	{r4, r7, lr}
  40186a:	b083      	sub	sp, #12
  40186c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40186e:	4813      	ldr	r0, [pc, #76]	; (4018bc <sysclk_init+0x54>)
  401870:	4b13      	ldr	r3, [pc, #76]	; (4018c0 <sysclk_init+0x58>)
  401872:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  401874:	2006      	movs	r0, #6
  401876:	4b13      	ldr	r3, [pc, #76]	; (4018c4 <sysclk_init+0x5c>)
  401878:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40187a:	1d38      	adds	r0, r7, #4
  40187c:	2319      	movs	r3, #25
  40187e:	2201      	movs	r2, #1
  401880:	2106      	movs	r1, #6
  401882:	4c11      	ldr	r4, [pc, #68]	; (4018c8 <sysclk_init+0x60>)
  401884:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401886:	1d3b      	adds	r3, r7, #4
  401888:	2100      	movs	r1, #0
  40188a:	4618      	mov	r0, r3
  40188c:	4b0f      	ldr	r3, [pc, #60]	; (4018cc <sysclk_init+0x64>)
  40188e:	4798      	blx	r3
		pll_wait_for_lock(0);
  401890:	2000      	movs	r0, #0
  401892:	4b0f      	ldr	r3, [pc, #60]	; (4018d0 <sysclk_init+0x68>)
  401894:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401896:	2002      	movs	r0, #2
  401898:	4b0e      	ldr	r3, [pc, #56]	; (4018d4 <sysclk_init+0x6c>)
  40189a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40189c:	2000      	movs	r0, #0
  40189e:	4b0e      	ldr	r3, [pc, #56]	; (4018d8 <sysclk_init+0x70>)
  4018a0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4018a2:	4b0e      	ldr	r3, [pc, #56]	; (4018dc <sysclk_init+0x74>)
  4018a4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4018a6:	4b0e      	ldr	r3, [pc, #56]	; (4018e0 <sysclk_init+0x78>)
  4018a8:	4798      	blx	r3
  4018aa:	4603      	mov	r3, r0
  4018ac:	4618      	mov	r0, r3
  4018ae:	4b04      	ldr	r3, [pc, #16]	; (4018c0 <sysclk_init+0x58>)
  4018b0:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4018b2:	bf00      	nop
  4018b4:	370c      	adds	r7, #12
  4018b6:	46bd      	mov	sp, r7
  4018b8:	bd90      	pop	{r4, r7, pc}
  4018ba:	bf00      	nop
  4018bc:	07270e00 	.word	0x07270e00
  4018c0:	00402b15 	.word	0x00402b15
  4018c4:	004017d9 	.word	0x004017d9
  4018c8:	00401701 	.word	0x00401701
  4018cc:	0040176d 	.word	0x0040176d
  4018d0:	00401811 	.word	0x00401811
  4018d4:	0040256d 	.word	0x0040256d
  4018d8:	004025e9 	.word	0x004025e9
  4018dc:	004029ad 	.word	0x004029ad
  4018e0:	00401855 	.word	0x00401855

004018e4 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  4018e4:	b480      	push	{r7}
  4018e6:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4018e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4018ec:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4018f0:	4b09      	ldr	r3, [pc, #36]	; (401918 <SCB_EnableICache+0x34>)
  4018f2:	2200      	movs	r2, #0
  4018f4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4018f8:	4a07      	ldr	r2, [pc, #28]	; (401918 <SCB_EnableICache+0x34>)
  4018fa:	4b07      	ldr	r3, [pc, #28]	; (401918 <SCB_EnableICache+0x34>)
  4018fc:	695b      	ldr	r3, [r3, #20]
  4018fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401902:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  401904:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401908:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  40190c:	bf00      	nop
  40190e:	46bd      	mov	sp, r7
  401910:	f85d 7b04 	ldr.w	r7, [sp], #4
  401914:	4770      	bx	lr
  401916:	bf00      	nop
  401918:	e000ed00 	.word	0xe000ed00

0040191c <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  40191c:	b480      	push	{r7}
  40191e:	b08b      	sub	sp, #44	; 0x2c
  401920:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401922:	4b26      	ldr	r3, [pc, #152]	; (4019bc <SCB_EnableDCache+0xa0>)
  401924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  401928:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40192a:	69fb      	ldr	r3, [r7, #28]
  40192c:	0b5b      	lsrs	r3, r3, #13
  40192e:	f3c3 030e 	ubfx	r3, r3, #0, #15
  401932:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401934:	69fb      	ldr	r3, [r7, #28]
  401936:	f003 0307 	and.w	r3, r3, #7
  40193a:	3304      	adds	r3, #4
  40193c:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  40193e:	69fb      	ldr	r3, [r7, #28]
  401940:	08db      	lsrs	r3, r3, #3
  401942:	f3c3 0309 	ubfx	r3, r3, #0, #10
  401946:	617b      	str	r3, [r7, #20]
  401948:	697b      	ldr	r3, [r7, #20]
  40194a:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40194c:	68bb      	ldr	r3, [r7, #8]
  40194e:	fab3 f383 	clz	r3, r3
  401952:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  401954:	687b      	ldr	r3, [r7, #4]
  401956:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  401958:	f003 031f 	and.w	r3, r3, #31
  40195c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  40195e:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  401962:	697b      	ldr	r3, [r7, #20]
  401964:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  401966:	6a3a      	ldr	r2, [r7, #32]
  401968:	693b      	ldr	r3, [r7, #16]
  40196a:	fa02 f303 	lsl.w	r3, r2, r3
  40196e:	4619      	mov	r1, r3
  401970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  401972:	69bb      	ldr	r3, [r7, #24]
  401974:	fa02 f303 	lsl.w	r3, r2, r3
  401978:	430b      	orrs	r3, r1
  40197a:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  40197c:	4a0f      	ldr	r2, [pc, #60]	; (4019bc <SCB_EnableDCache+0xa0>)
  40197e:	68fb      	ldr	r3, [r7, #12]
  401980:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  401984:	6a3b      	ldr	r3, [r7, #32]
  401986:	1e5a      	subs	r2, r3, #1
  401988:	623a      	str	r2, [r7, #32]
  40198a:	2b00      	cmp	r3, #0
  40198c:	d1eb      	bne.n	401966 <SCB_EnableDCache+0x4a>
        } while(sets--);
  40198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401990:	1e5a      	subs	r2, r3, #1
  401992:	627a      	str	r2, [r7, #36]	; 0x24
  401994:	2b00      	cmp	r3, #0
  401996:	d1e4      	bne.n	401962 <SCB_EnableDCache+0x46>
  401998:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40199c:	4a07      	ldr	r2, [pc, #28]	; (4019bc <SCB_EnableDCache+0xa0>)
  40199e:	4b07      	ldr	r3, [pc, #28]	; (4019bc <SCB_EnableDCache+0xa0>)
  4019a0:	695b      	ldr	r3, [r3, #20]
  4019a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4019a6:	6153      	str	r3, [r2, #20]
  4019a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4019ac:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  4019b0:	bf00      	nop
  4019b2:	372c      	adds	r7, #44	; 0x2c
  4019b4:	46bd      	mov	sp, r7
  4019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019ba:	4770      	bx	lr
  4019bc:	e000ed00 	.word	0xe000ed00

004019c0 <sysclk_enable_peripheral_clock>:
{
  4019c0:	b580      	push	{r7, lr}
  4019c2:	b082      	sub	sp, #8
  4019c4:	af00      	add	r7, sp, #0
  4019c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4019c8:	6878      	ldr	r0, [r7, #4]
  4019ca:	4b03      	ldr	r3, [pc, #12]	; (4019d8 <sysclk_enable_peripheral_clock+0x18>)
  4019cc:	4798      	blx	r3
}
  4019ce:	bf00      	nop
  4019d0:	3708      	adds	r7, #8
  4019d2:	46bd      	mov	sp, r7
  4019d4:	bd80      	pop	{r7, pc}
  4019d6:	bf00      	nop
  4019d8:	00402831 	.word	0x00402831

004019dc <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4019dc:	b580      	push	{r7, lr}
  4019de:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4019e0:	200a      	movs	r0, #10
  4019e2:	4b08      	ldr	r3, [pc, #32]	; (401a04 <ioport_init+0x28>)
  4019e4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4019e6:	200b      	movs	r0, #11
  4019e8:	4b06      	ldr	r3, [pc, #24]	; (401a04 <ioport_init+0x28>)
  4019ea:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4019ec:	200c      	movs	r0, #12
  4019ee:	4b05      	ldr	r3, [pc, #20]	; (401a04 <ioport_init+0x28>)
  4019f0:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4019f2:	2010      	movs	r0, #16
  4019f4:	4b03      	ldr	r3, [pc, #12]	; (401a04 <ioport_init+0x28>)
  4019f6:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  4019f8:	2011      	movs	r0, #17
  4019fa:	4b02      	ldr	r3, [pc, #8]	; (401a04 <ioport_init+0x28>)
  4019fc:	4798      	blx	r3
	arch_ioport_init();
}
  4019fe:	bf00      	nop
  401a00:	bd80      	pop	{r7, pc}
  401a02:	bf00      	nop
  401a04:	004019c1 	.word	0x004019c1

00401a08 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  401a08:	b480      	push	{r7}
  401a0a:	b08d      	sub	sp, #52	; 0x34
  401a0c:	af00      	add	r7, sp, #0
  401a0e:	6078      	str	r0, [r7, #4]
  401a10:	6039      	str	r1, [r7, #0]
  401a12:	687b      	ldr	r3, [r7, #4]
  401a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  401a16:	683b      	ldr	r3, [r7, #0]
  401a18:	62bb      	str	r3, [r7, #40]	; 0x28
  401a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a1c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401a20:	095a      	lsrs	r2, r3, #5
  401a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a24:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401a26:	6a3b      	ldr	r3, [r7, #32]
  401a28:	f003 031f 	and.w	r3, r3, #31
  401a2c:	2101      	movs	r1, #1
  401a2e:	fa01 f303 	lsl.w	r3, r1, r3
  401a32:	61fa      	str	r2, [r7, #28]
  401a34:	61bb      	str	r3, [r7, #24]
  401a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401a38:	617b      	str	r3, [r7, #20]
  401a3a:	69fb      	ldr	r3, [r7, #28]
  401a3c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401a3e:	693a      	ldr	r2, [r7, #16]
  401a40:	4b37      	ldr	r3, [pc, #220]	; (401b20 <ioport_set_pin_mode+0x118>)
  401a42:	4413      	add	r3, r2
  401a44:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  401a46:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  401a48:	697b      	ldr	r3, [r7, #20]
  401a4a:	f003 0308 	and.w	r3, r3, #8
  401a4e:	2b00      	cmp	r3, #0
  401a50:	d003      	beq.n	401a5a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  401a52:	68fb      	ldr	r3, [r7, #12]
  401a54:	69ba      	ldr	r2, [r7, #24]
  401a56:	665a      	str	r2, [r3, #100]	; 0x64
  401a58:	e002      	b.n	401a60 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  401a5a:	68fb      	ldr	r3, [r7, #12]
  401a5c:	69ba      	ldr	r2, [r7, #24]
  401a5e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  401a60:	697b      	ldr	r3, [r7, #20]
  401a62:	f003 0310 	and.w	r3, r3, #16
  401a66:	2b00      	cmp	r3, #0
  401a68:	d004      	beq.n	401a74 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  401a6a:	68fb      	ldr	r3, [r7, #12]
  401a6c:	69ba      	ldr	r2, [r7, #24]
  401a6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401a72:	e003      	b.n	401a7c <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  401a74:	68fb      	ldr	r3, [r7, #12]
  401a76:	69ba      	ldr	r2, [r7, #24]
  401a78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401a7c:	697b      	ldr	r3, [r7, #20]
  401a7e:	f003 0320 	and.w	r3, r3, #32
  401a82:	2b00      	cmp	r3, #0
  401a84:	d003      	beq.n	401a8e <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  401a86:	68fb      	ldr	r3, [r7, #12]
  401a88:	69ba      	ldr	r2, [r7, #24]
  401a8a:	651a      	str	r2, [r3, #80]	; 0x50
  401a8c:	e002      	b.n	401a94 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  401a8e:	68fb      	ldr	r3, [r7, #12]
  401a90:	69ba      	ldr	r2, [r7, #24]
  401a92:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401a94:	697b      	ldr	r3, [r7, #20]
  401a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401a9a:	2b00      	cmp	r3, #0
  401a9c:	d003      	beq.n	401aa6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  401a9e:	68fb      	ldr	r3, [r7, #12]
  401aa0:	69ba      	ldr	r2, [r7, #24]
  401aa2:	621a      	str	r2, [r3, #32]
  401aa4:	e002      	b.n	401aac <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  401aa6:	68fb      	ldr	r3, [r7, #12]
  401aa8:	69ba      	ldr	r2, [r7, #24]
  401aaa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  401aac:	697b      	ldr	r3, [r7, #20]
  401aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401ab2:	2b00      	cmp	r3, #0
  401ab4:	d004      	beq.n	401ac0 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  401ab6:	68fb      	ldr	r3, [r7, #12]
  401ab8:	69ba      	ldr	r2, [r7, #24]
  401aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401abe:	e003      	b.n	401ac8 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401ac0:	68fb      	ldr	r3, [r7, #12]
  401ac2:	69ba      	ldr	r2, [r7, #24]
  401ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401ac8:	697b      	ldr	r3, [r7, #20]
  401aca:	f003 0301 	and.w	r3, r3, #1
  401ace:	2b00      	cmp	r3, #0
  401ad0:	d006      	beq.n	401ae0 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  401ad2:	68fb      	ldr	r3, [r7, #12]
  401ad4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401ad6:	69bb      	ldr	r3, [r7, #24]
  401ad8:	431a      	orrs	r2, r3
  401ada:	68fb      	ldr	r3, [r7, #12]
  401adc:	671a      	str	r2, [r3, #112]	; 0x70
  401ade:	e006      	b.n	401aee <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401ae0:	68fb      	ldr	r3, [r7, #12]
  401ae2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401ae4:	69bb      	ldr	r3, [r7, #24]
  401ae6:	43db      	mvns	r3, r3
  401ae8:	401a      	ands	r2, r3
  401aea:	68fb      	ldr	r3, [r7, #12]
  401aec:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  401aee:	697b      	ldr	r3, [r7, #20]
  401af0:	f003 0302 	and.w	r3, r3, #2
  401af4:	2b00      	cmp	r3, #0
  401af6:	d006      	beq.n	401b06 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401af8:	68fb      	ldr	r3, [r7, #12]
  401afa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401afc:	69bb      	ldr	r3, [r7, #24]
  401afe:	431a      	orrs	r2, r3
  401b00:	68fb      	ldr	r3, [r7, #12]
  401b02:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  401b04:	e006      	b.n	401b14 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401b06:	68fb      	ldr	r3, [r7, #12]
  401b08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b0a:	69bb      	ldr	r3, [r7, #24]
  401b0c:	43db      	mvns	r3, r3
  401b0e:	401a      	ands	r2, r3
  401b10:	68fb      	ldr	r3, [r7, #12]
  401b12:	675a      	str	r2, [r3, #116]	; 0x74
  401b14:	bf00      	nop
  401b16:	3734      	adds	r7, #52	; 0x34
  401b18:	46bd      	mov	sp, r7
  401b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b1e:	4770      	bx	lr
  401b20:	00200707 	.word	0x00200707

00401b24 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  401b24:	b480      	push	{r7}
  401b26:	b08d      	sub	sp, #52	; 0x34
  401b28:	af00      	add	r7, sp, #0
  401b2a:	6078      	str	r0, [r7, #4]
  401b2c:	460b      	mov	r3, r1
  401b2e:	70fb      	strb	r3, [r7, #3]
  401b30:	687b      	ldr	r3, [r7, #4]
  401b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  401b34:	78fb      	ldrb	r3, [r7, #3]
  401b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b3c:	627b      	str	r3, [r7, #36]	; 0x24
  401b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b40:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401b42:	6a3b      	ldr	r3, [r7, #32]
  401b44:	095b      	lsrs	r3, r3, #5
  401b46:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b48:	69fa      	ldr	r2, [r7, #28]
  401b4a:	4b17      	ldr	r3, [pc, #92]	; (401ba8 <ioport_set_pin_dir+0x84>)
  401b4c:	4413      	add	r3, r2
  401b4e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401b50:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  401b52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401b56:	2b01      	cmp	r3, #1
  401b58:	d109      	bne.n	401b6e <ioport_set_pin_dir+0x4a>
  401b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b5c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401b5e:	697b      	ldr	r3, [r7, #20]
  401b60:	f003 031f 	and.w	r3, r3, #31
  401b64:	2201      	movs	r2, #1
  401b66:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401b68:	69bb      	ldr	r3, [r7, #24]
  401b6a:	611a      	str	r2, [r3, #16]
  401b6c:	e00c      	b.n	401b88 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401b72:	2b00      	cmp	r3, #0
  401b74:	d108      	bne.n	401b88 <ioport_set_pin_dir+0x64>
  401b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b78:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401b7a:	693b      	ldr	r3, [r7, #16]
  401b7c:	f003 031f 	and.w	r3, r3, #31
  401b80:	2201      	movs	r2, #1
  401b82:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401b84:	69bb      	ldr	r3, [r7, #24]
  401b86:	615a      	str	r2, [r3, #20]
  401b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b8a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401b8c:	68fb      	ldr	r3, [r7, #12]
  401b8e:	f003 031f 	and.w	r3, r3, #31
  401b92:	2201      	movs	r2, #1
  401b94:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b96:	69bb      	ldr	r3, [r7, #24]
  401b98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  401b9c:	bf00      	nop
  401b9e:	3734      	adds	r7, #52	; 0x34
  401ba0:	46bd      	mov	sp, r7
  401ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ba6:	4770      	bx	lr
  401ba8:	00200707 	.word	0x00200707

00401bac <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401bac:	b480      	push	{r7}
  401bae:	b08b      	sub	sp, #44	; 0x2c
  401bb0:	af00      	add	r7, sp, #0
  401bb2:	6078      	str	r0, [r7, #4]
  401bb4:	460b      	mov	r3, r1
  401bb6:	70fb      	strb	r3, [r7, #3]
  401bb8:	687b      	ldr	r3, [r7, #4]
  401bba:	627b      	str	r3, [r7, #36]	; 0x24
  401bbc:	78fb      	ldrb	r3, [r7, #3]
  401bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bc4:	61fb      	str	r3, [r7, #28]
  401bc6:	69fb      	ldr	r3, [r7, #28]
  401bc8:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401bca:	69bb      	ldr	r3, [r7, #24]
  401bcc:	095b      	lsrs	r3, r3, #5
  401bce:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401bd0:	697a      	ldr	r2, [r7, #20]
  401bd2:	4b10      	ldr	r3, [pc, #64]	; (401c14 <ioport_set_pin_level+0x68>)
  401bd4:	4413      	add	r3, r2
  401bd6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401bd8:	613b      	str	r3, [r7, #16]

	if (level) {
  401bda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401bde:	2b00      	cmp	r3, #0
  401be0:	d009      	beq.n	401bf6 <ioport_set_pin_level+0x4a>
  401be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401be4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401be6:	68fb      	ldr	r3, [r7, #12]
  401be8:	f003 031f 	and.w	r3, r3, #31
  401bec:	2201      	movs	r2, #1
  401bee:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401bf0:	693b      	ldr	r3, [r7, #16]
  401bf2:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  401bf4:	e008      	b.n	401c08 <ioport_set_pin_level+0x5c>
  401bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bf8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401bfa:	68bb      	ldr	r3, [r7, #8]
  401bfc:	f003 031f 	and.w	r3, r3, #31
  401c00:	2201      	movs	r2, #1
  401c02:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401c04:	693b      	ldr	r3, [r7, #16]
  401c06:	635a      	str	r2, [r3, #52]	; 0x34
  401c08:	bf00      	nop
  401c0a:	372c      	adds	r7, #44	; 0x2c
  401c0c:	46bd      	mov	sp, r7
  401c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c12:	4770      	bx	lr
  401c14:	00200707 	.word	0x00200707

00401c18 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  401c18:	b480      	push	{r7}
  401c1a:	b08d      	sub	sp, #52	; 0x34
  401c1c:	af00      	add	r7, sp, #0
  401c1e:	6078      	str	r0, [r7, #4]
  401c20:	460b      	mov	r3, r1
  401c22:	70fb      	strb	r3, [r7, #3]
  401c24:	687b      	ldr	r3, [r7, #4]
  401c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  401c28:	78fb      	ldrb	r3, [r7, #3]
  401c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401c30:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c34:	095a      	lsrs	r2, r3, #5
  401c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401c38:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401c3a:	6a3b      	ldr	r3, [r7, #32]
  401c3c:	f003 031f 	and.w	r3, r3, #31
  401c40:	2101      	movs	r1, #1
  401c42:	fa01 f303 	lsl.w	r3, r1, r3
  401c46:	61fa      	str	r2, [r7, #28]
  401c48:	61bb      	str	r3, [r7, #24]
  401c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401c4e:	75fb      	strb	r3, [r7, #23]
  401c50:	69fb      	ldr	r3, [r7, #28]
  401c52:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401c54:	693a      	ldr	r2, [r7, #16]
  401c56:	4b23      	ldr	r3, [pc, #140]	; (401ce4 <ioport_set_pin_sense_mode+0xcc>)
  401c58:	4413      	add	r3, r2
  401c5a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  401c5c:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  401c5e:	7dfb      	ldrb	r3, [r7, #23]
  401c60:	3b01      	subs	r3, #1
  401c62:	2b03      	cmp	r3, #3
  401c64:	d82e      	bhi.n	401cc4 <ioport_set_pin_sense_mode+0xac>
  401c66:	a201      	add	r2, pc, #4	; (adr r2, 401c6c <ioport_set_pin_sense_mode+0x54>)
  401c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401c6c:	00401ca1 	.word	0x00401ca1
  401c70:	00401cb3 	.word	0x00401cb3
  401c74:	00401c7d 	.word	0x00401c7d
  401c78:	00401c8f 	.word	0x00401c8f
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  401c7c:	68fb      	ldr	r3, [r7, #12]
  401c7e:	69ba      	ldr	r2, [r7, #24]
  401c80:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  401c84:	68fb      	ldr	r3, [r7, #12]
  401c86:	69ba      	ldr	r2, [r7, #24]
  401c88:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401c8c:	e01f      	b.n	401cce <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  401c8e:	68fb      	ldr	r3, [r7, #12]
  401c90:	69ba      	ldr	r2, [r7, #24]
  401c92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  401c96:	68fb      	ldr	r3, [r7, #12]
  401c98:	69ba      	ldr	r2, [r7, #24]
  401c9a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401c9e:	e016      	b.n	401cce <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  401ca0:	68fb      	ldr	r3, [r7, #12]
  401ca2:	69ba      	ldr	r2, [r7, #24]
  401ca4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  401ca8:	68fb      	ldr	r3, [r7, #12]
  401caa:	69ba      	ldr	r2, [r7, #24]
  401cac:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401cb0:	e00d      	b.n	401cce <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401cb2:	68fb      	ldr	r3, [r7, #12]
  401cb4:	69ba      	ldr	r2, [r7, #24]
  401cb6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401cba:	68fb      	ldr	r3, [r7, #12]
  401cbc:	69ba      	ldr	r2, [r7, #24]
  401cbe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401cc2:	e004      	b.n	401cce <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  401cc4:	68fb      	ldr	r3, [r7, #12]
  401cc6:	69ba      	ldr	r2, [r7, #24]
  401cc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  401ccc:	e003      	b.n	401cd6 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  401cce:	68fb      	ldr	r3, [r7, #12]
  401cd0:	69ba      	ldr	r2, [r7, #24]
  401cd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401cd6:	bf00      	nop
  401cd8:	3734      	adds	r7, #52	; 0x34
  401cda:	46bd      	mov	sp, r7
  401cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ce0:	4770      	bx	lr
  401ce2:	bf00      	nop
  401ce4:	00200707 	.word	0x00200707

00401ce8 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  401ce8:	b480      	push	{r7}
  401cea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  401cec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401cf0:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401cf4:	4a0c      	ldr	r2, [pc, #48]	; (401d28 <tcm_disable+0x40>)
  401cf6:	4b0c      	ldr	r3, [pc, #48]	; (401d28 <tcm_disable+0x40>)
  401cf8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  401cfc:	f023 0301 	bic.w	r3, r3, #1
  401d00:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401d04:	4a08      	ldr	r2, [pc, #32]	; (401d28 <tcm_disable+0x40>)
  401d06:	4b08      	ldr	r3, [pc, #32]	; (401d28 <tcm_disable+0x40>)
  401d08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  401d0c:	f023 0301 	bic.w	r3, r3, #1
  401d10:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  401d14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401d18:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  401d1c:	bf00      	nop
  401d1e:	46bd      	mov	sp, r7
  401d20:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d24:	4770      	bx	lr
  401d26:	bf00      	nop
  401d28:	e000ed00 	.word	0xe000ed00

00401d2c <board_init>:
#endif

void board_init(void)
{
  401d2c:	b598      	push	{r3, r4, r7, lr}
  401d2e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401d30:	4b4c      	ldr	r3, [pc, #304]	; (401e64 <board_init+0x138>)
  401d32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401d36:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  401d38:	4b4b      	ldr	r3, [pc, #300]	; (401e68 <board_init+0x13c>)
  401d3a:	4798      	blx	r3
	SCB_EnableDCache();
  401d3c:	4b4b      	ldr	r3, [pc, #300]	; (401e6c <board_init+0x140>)
  401d3e:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401d40:	4b4b      	ldr	r3, [pc, #300]	; (401e70 <board_init+0x144>)
  401d42:	4a4c      	ldr	r2, [pc, #304]	; (401e74 <board_init+0x148>)
  401d44:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401d46:	4b4a      	ldr	r3, [pc, #296]	; (401e70 <board_init+0x144>)
  401d48:	4a4b      	ldr	r2, [pc, #300]	; (401e78 <board_init+0x14c>)
  401d4a:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  401d4c:	4b4b      	ldr	r3, [pc, #300]	; (401e7c <board_init+0x150>)
  401d4e:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  401d50:	4b4b      	ldr	r3, [pc, #300]	; (401e80 <board_init+0x154>)
  401d52:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  401d54:	2101      	movs	r1, #1
  401d56:	2048      	movs	r0, #72	; 0x48
  401d58:	4b4a      	ldr	r3, [pc, #296]	; (401e84 <board_init+0x158>)
  401d5a:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  401d5c:	2101      	movs	r1, #1
  401d5e:	2048      	movs	r0, #72	; 0x48
  401d60:	4b49      	ldr	r3, [pc, #292]	; (401e88 <board_init+0x15c>)
  401d62:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  401d64:	2100      	movs	r1, #0
  401d66:	200b      	movs	r0, #11
  401d68:	4b46      	ldr	r3, [pc, #280]	; (401e84 <board_init+0x158>)
  401d6a:	4798      	blx	r3
  401d6c:	2188      	movs	r1, #136	; 0x88
  401d6e:	200b      	movs	r0, #11
  401d70:	4b46      	ldr	r3, [pc, #280]	; (401e8c <board_init+0x160>)
  401d72:	4798      	blx	r3
  401d74:	2102      	movs	r1, #2
  401d76:	200b      	movs	r0, #11
  401d78:	4b45      	ldr	r3, [pc, #276]	; (401e90 <board_init+0x164>)
  401d7a:	4798      	blx	r3
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  401d7c:	2300      	movs	r3, #0
  401d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401d82:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401d86:	4843      	ldr	r0, [pc, #268]	; (401e94 <board_init+0x168>)
  401d88:	4c43      	ldr	r4, [pc, #268]	; (401e98 <board_init+0x16c>)
  401d8a:	47a0      	blx	r4
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  401d8c:	2300      	movs	r3, #0
  401d8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401d92:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401d96:	483f      	ldr	r0, [pc, #252]	; (401e94 <board_init+0x168>)
  401d98:	4c3f      	ldr	r4, [pc, #252]	; (401e98 <board_init+0x16c>)
  401d9a:	47a0      	blx	r4
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  401d9c:	2301      	movs	r3, #1
  401d9e:	22ff      	movs	r2, #255	; 0xff
  401da0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401da4:	483b      	ldr	r0, [pc, #236]	; (401e94 <board_init+0x168>)
  401da6:	4c3c      	ldr	r4, [pc, #240]	; (401e98 <board_init+0x16c>)
  401da8:	47a0      	blx	r4
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  401daa:	2301      	movs	r3, #1
  401dac:	223f      	movs	r2, #63	; 0x3f
  401dae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401db2:	483a      	ldr	r0, [pc, #232]	; (401e9c <board_init+0x170>)
  401db4:	4c38      	ldr	r4, [pc, #224]	; (401e98 <board_init+0x16c>)
  401db6:	47a0      	blx	r4
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  401db8:	2301      	movs	r3, #1
  401dba:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  401dbe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401dc2:	4837      	ldr	r0, [pc, #220]	; (401ea0 <board_init+0x174>)
  401dc4:	4c34      	ldr	r4, [pc, #208]	; (401e98 <board_init+0x16c>)
  401dc6:	47a0      	blx	r4
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  401dc8:	2301      	movs	r3, #1
  401dca:	f44f 7280 	mov.w	r2, #256	; 0x100
  401dce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401dd2:	4830      	ldr	r0, [pc, #192]	; (401e94 <board_init+0x168>)
  401dd4:	4c30      	ldr	r4, [pc, #192]	; (401e98 <board_init+0x16c>)
  401dd6:	47a0      	blx	r4
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  401dd8:	2301      	movs	r3, #1
  401dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401dde:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401de2:	482c      	ldr	r0, [pc, #176]	; (401e94 <board_init+0x168>)
  401de4:	4c2c      	ldr	r4, [pc, #176]	; (401e98 <board_init+0x16c>)
  401de6:	47a0      	blx	r4
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  401de8:	2301      	movs	r3, #1
  401dea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401dee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401df2:	482c      	ldr	r0, [pc, #176]	; (401ea4 <board_init+0x178>)
  401df4:	4c28      	ldr	r4, [pc, #160]	; (401e98 <board_init+0x16c>)
  401df6:	47a0      	blx	r4
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  401df8:	2300      	movs	r3, #0
  401dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
  401dfe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e02:	4824      	ldr	r0, [pc, #144]	; (401e94 <board_init+0x168>)
  401e04:	4c24      	ldr	r4, [pc, #144]	; (401e98 <board_init+0x16c>)
  401e06:	47a0      	blx	r4
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  401e08:	f44f 7100 	mov.w	r1, #512	; 0x200
  401e0c:	4821      	ldr	r0, [pc, #132]	; (401e94 <board_init+0x168>)
  401e0e:	4b26      	ldr	r3, [pc, #152]	; (401ea8 <board_init+0x17c>)
  401e10:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  401e12:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e16:	2074      	movs	r0, #116	; 0x74
  401e18:	4b24      	ldr	r3, [pc, #144]	; (401eac <board_init+0x180>)
  401e1a:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  401e1c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e20:	2075      	movs	r0, #117	; 0x75
  401e22:	4b22      	ldr	r3, [pc, #136]	; (401eac <board_init+0x180>)
  401e24:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  401e26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e2a:	2076      	movs	r0, #118	; 0x76
  401e2c:	4b1f      	ldr	r3, [pc, #124]	; (401eac <board_init+0x180>)
  401e2e:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  401e30:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e34:	207b      	movs	r0, #123	; 0x7b
  401e36:	4b1d      	ldr	r3, [pc, #116]	; (401eac <board_init+0x180>)
  401e38:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  401e3a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401e3e:	2018      	movs	r0, #24
  401e40:	4b1a      	ldr	r3, [pc, #104]	; (401eac <board_init+0x180>)
  401e42:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  401e44:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401e48:	2006      	movs	r0, #6
  401e4a:	4b18      	ldr	r3, [pc, #96]	; (401eac <board_init+0x180>)
  401e4c:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  401e4e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401e52:	2053      	movs	r0, #83	; 0x53
  401e54:	4b15      	ldr	r3, [pc, #84]	; (401eac <board_init+0x180>)
  401e56:	4798      	blx	r3
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  401e58:	2053      	movs	r0, #83	; 0x53
  401e5a:	4b15      	ldr	r3, [pc, #84]	; (401eb0 <board_init+0x184>)
  401e5c:	4798      	blx	r3

#endif
}
  401e5e:	bf00      	nop
  401e60:	bd98      	pop	{r3, r4, r7, pc}
  401e62:	bf00      	nop
  401e64:	400e1850 	.word	0x400e1850
  401e68:	004018e5 	.word	0x004018e5
  401e6c:	0040191d 	.word	0x0040191d
  401e70:	400e0c00 	.word	0x400e0c00
  401e74:	5a00080c 	.word	0x5a00080c
  401e78:	5a00070c 	.word	0x5a00070c
  401e7c:	00401ce9 	.word	0x00401ce9
  401e80:	004019dd 	.word	0x004019dd
  401e84:	00401b25 	.word	0x00401b25
  401e88:	00401bad 	.word	0x00401bad
  401e8c:	00401a09 	.word	0x00401a09
  401e90:	00401c19 	.word	0x00401c19
  401e94:	400e1200 	.word	0x400e1200
  401e98:	004020f1 	.word	0x004020f1
  401e9c:	400e1600 	.word	0x400e1600
  401ea0:	400e0e00 	.word	0x400e0e00
  401ea4:	400e1400 	.word	0x400e1400
  401ea8:	00401ee1 	.word	0x00401ee1
  401eac:	00402269 	.word	0x00402269
  401eb0:	00402209 	.word	0x00402209

00401eb4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401eb4:	b480      	push	{r7}
  401eb6:	b085      	sub	sp, #20
  401eb8:	af00      	add	r7, sp, #0
  401eba:	60f8      	str	r0, [r7, #12]
  401ebc:	60b9      	str	r1, [r7, #8]
  401ebe:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401ec0:	687b      	ldr	r3, [r7, #4]
  401ec2:	2b00      	cmp	r3, #0
  401ec4:	d003      	beq.n	401ece <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401ec6:	68fb      	ldr	r3, [r7, #12]
  401ec8:	68ba      	ldr	r2, [r7, #8]
  401eca:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401ecc:	e002      	b.n	401ed4 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401ece:	68fb      	ldr	r3, [r7, #12]
  401ed0:	68ba      	ldr	r2, [r7, #8]
  401ed2:	661a      	str	r2, [r3, #96]	; 0x60
}
  401ed4:	bf00      	nop
  401ed6:	3714      	adds	r7, #20
  401ed8:	46bd      	mov	sp, r7
  401eda:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ede:	4770      	bx	lr

00401ee0 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  401ee0:	b480      	push	{r7}
  401ee2:	b083      	sub	sp, #12
  401ee4:	af00      	add	r7, sp, #0
  401ee6:	6078      	str	r0, [r7, #4]
  401ee8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  401eea:	687b      	ldr	r3, [r7, #4]
  401eec:	683a      	ldr	r2, [r7, #0]
  401eee:	631a      	str	r2, [r3, #48]	; 0x30
}
  401ef0:	bf00      	nop
  401ef2:	370c      	adds	r7, #12
  401ef4:	46bd      	mov	sp, r7
  401ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401efa:	4770      	bx	lr

00401efc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401efc:	b480      	push	{r7}
  401efe:	b087      	sub	sp, #28
  401f00:	af00      	add	r7, sp, #0
  401f02:	60f8      	str	r0, [r7, #12]
  401f04:	60b9      	str	r1, [r7, #8]
  401f06:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401f08:	68fb      	ldr	r3, [r7, #12]
  401f0a:	687a      	ldr	r2, [r7, #4]
  401f0c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401f0e:	68bb      	ldr	r3, [r7, #8]
  401f10:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401f14:	d04a      	beq.n	401fac <pio_set_peripheral+0xb0>
  401f16:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401f1a:	d808      	bhi.n	401f2e <pio_set_peripheral+0x32>
  401f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401f20:	d016      	beq.n	401f50 <pio_set_peripheral+0x54>
  401f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401f26:	d02c      	beq.n	401f82 <pio_set_peripheral+0x86>
  401f28:	2b00      	cmp	r3, #0
  401f2a:	d069      	beq.n	402000 <pio_set_peripheral+0x104>
  401f2c:	e064      	b.n	401ff8 <pio_set_peripheral+0xfc>
  401f2e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401f32:	d065      	beq.n	402000 <pio_set_peripheral+0x104>
  401f34:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401f38:	d803      	bhi.n	401f42 <pio_set_peripheral+0x46>
  401f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401f3e:	d04a      	beq.n	401fd6 <pio_set_peripheral+0xda>
  401f40:	e05a      	b.n	401ff8 <pio_set_peripheral+0xfc>
  401f42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401f46:	d05b      	beq.n	402000 <pio_set_peripheral+0x104>
  401f48:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401f4c:	d058      	beq.n	402000 <pio_set_peripheral+0x104>
  401f4e:	e053      	b.n	401ff8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f50:	68fb      	ldr	r3, [r7, #12]
  401f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401f54:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401f56:	68fb      	ldr	r3, [r7, #12]
  401f58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401f5a:	687b      	ldr	r3, [r7, #4]
  401f5c:	43d9      	mvns	r1, r3
  401f5e:	697b      	ldr	r3, [r7, #20]
  401f60:	400b      	ands	r3, r1
  401f62:	401a      	ands	r2, r3
  401f64:	68fb      	ldr	r3, [r7, #12]
  401f66:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401f68:	68fb      	ldr	r3, [r7, #12]
  401f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401f6c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401f6e:	68fb      	ldr	r3, [r7, #12]
  401f70:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401f72:	687b      	ldr	r3, [r7, #4]
  401f74:	43d9      	mvns	r1, r3
  401f76:	697b      	ldr	r3, [r7, #20]
  401f78:	400b      	ands	r3, r1
  401f7a:	401a      	ands	r2, r3
  401f7c:	68fb      	ldr	r3, [r7, #12]
  401f7e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401f80:	e03a      	b.n	401ff8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f82:	68fb      	ldr	r3, [r7, #12]
  401f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401f86:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401f88:	687a      	ldr	r2, [r7, #4]
  401f8a:	697b      	ldr	r3, [r7, #20]
  401f8c:	431a      	orrs	r2, r3
  401f8e:	68fb      	ldr	r3, [r7, #12]
  401f90:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401f92:	68fb      	ldr	r3, [r7, #12]
  401f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401f96:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401f98:	68fb      	ldr	r3, [r7, #12]
  401f9a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401f9c:	687b      	ldr	r3, [r7, #4]
  401f9e:	43d9      	mvns	r1, r3
  401fa0:	697b      	ldr	r3, [r7, #20]
  401fa2:	400b      	ands	r3, r1
  401fa4:	401a      	ands	r2, r3
  401fa6:	68fb      	ldr	r3, [r7, #12]
  401fa8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401faa:	e025      	b.n	401ff8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401fac:	68fb      	ldr	r3, [r7, #12]
  401fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401fb0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401fb2:	68fb      	ldr	r3, [r7, #12]
  401fb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401fb6:	687b      	ldr	r3, [r7, #4]
  401fb8:	43d9      	mvns	r1, r3
  401fba:	697b      	ldr	r3, [r7, #20]
  401fbc:	400b      	ands	r3, r1
  401fbe:	401a      	ands	r2, r3
  401fc0:	68fb      	ldr	r3, [r7, #12]
  401fc2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401fc4:	68fb      	ldr	r3, [r7, #12]
  401fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401fc8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401fca:	687a      	ldr	r2, [r7, #4]
  401fcc:	697b      	ldr	r3, [r7, #20]
  401fce:	431a      	orrs	r2, r3
  401fd0:	68fb      	ldr	r3, [r7, #12]
  401fd2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401fd4:	e010      	b.n	401ff8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401fd6:	68fb      	ldr	r3, [r7, #12]
  401fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401fda:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401fdc:	687a      	ldr	r2, [r7, #4]
  401fde:	697b      	ldr	r3, [r7, #20]
  401fe0:	431a      	orrs	r2, r3
  401fe2:	68fb      	ldr	r3, [r7, #12]
  401fe4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401fe6:	68fb      	ldr	r3, [r7, #12]
  401fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401fea:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401fec:	687a      	ldr	r2, [r7, #4]
  401fee:	697b      	ldr	r3, [r7, #20]
  401ff0:	431a      	orrs	r2, r3
  401ff2:	68fb      	ldr	r3, [r7, #12]
  401ff4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401ff6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401ff8:	68fb      	ldr	r3, [r7, #12]
  401ffa:	687a      	ldr	r2, [r7, #4]
  401ffc:	605a      	str	r2, [r3, #4]
  401ffe:	e000      	b.n	402002 <pio_set_peripheral+0x106>
		return;
  402000:	bf00      	nop
}
  402002:	371c      	adds	r7, #28
  402004:	46bd      	mov	sp, r7
  402006:	f85d 7b04 	ldr.w	r7, [sp], #4
  40200a:	4770      	bx	lr

0040200c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40200c:	b580      	push	{r7, lr}
  40200e:	b084      	sub	sp, #16
  402010:	af00      	add	r7, sp, #0
  402012:	60f8      	str	r0, [r7, #12]
  402014:	60b9      	str	r1, [r7, #8]
  402016:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  402018:	68b9      	ldr	r1, [r7, #8]
  40201a:	68f8      	ldr	r0, [r7, #12]
  40201c:	4b19      	ldr	r3, [pc, #100]	; (402084 <pio_set_input+0x78>)
  40201e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  402020:	687b      	ldr	r3, [r7, #4]
  402022:	f003 0301 	and.w	r3, r3, #1
  402026:	461a      	mov	r2, r3
  402028:	68b9      	ldr	r1, [r7, #8]
  40202a:	68f8      	ldr	r0, [r7, #12]
  40202c:	4b16      	ldr	r3, [pc, #88]	; (402088 <pio_set_input+0x7c>)
  40202e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402030:	687b      	ldr	r3, [r7, #4]
  402032:	f003 030a 	and.w	r3, r3, #10
  402036:	2b00      	cmp	r3, #0
  402038:	d003      	beq.n	402042 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40203a:	68fb      	ldr	r3, [r7, #12]
  40203c:	68ba      	ldr	r2, [r7, #8]
  40203e:	621a      	str	r2, [r3, #32]
  402040:	e002      	b.n	402048 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402042:	68fb      	ldr	r3, [r7, #12]
  402044:	68ba      	ldr	r2, [r7, #8]
  402046:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402048:	687b      	ldr	r3, [r7, #4]
  40204a:	f003 0302 	and.w	r3, r3, #2
  40204e:	2b00      	cmp	r3, #0
  402050:	d004      	beq.n	40205c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  402052:	68fb      	ldr	r3, [r7, #12]
  402054:	68ba      	ldr	r2, [r7, #8]
  402056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40205a:	e008      	b.n	40206e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40205c:	687b      	ldr	r3, [r7, #4]
  40205e:	f003 0308 	and.w	r3, r3, #8
  402062:	2b00      	cmp	r3, #0
  402064:	d003      	beq.n	40206e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  402066:	68fb      	ldr	r3, [r7, #12]
  402068:	68ba      	ldr	r2, [r7, #8]
  40206a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40206e:	68fb      	ldr	r3, [r7, #12]
  402070:	68ba      	ldr	r2, [r7, #8]
  402072:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  402074:	68fb      	ldr	r3, [r7, #12]
  402076:	68ba      	ldr	r2, [r7, #8]
  402078:	601a      	str	r2, [r3, #0]
}
  40207a:	bf00      	nop
  40207c:	3710      	adds	r7, #16
  40207e:	46bd      	mov	sp, r7
  402080:	bd80      	pop	{r7, pc}
  402082:	bf00      	nop
  402084:	004021bd 	.word	0x004021bd
  402088:	00401eb5 	.word	0x00401eb5

0040208c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40208c:	b580      	push	{r7, lr}
  40208e:	b084      	sub	sp, #16
  402090:	af00      	add	r7, sp, #0
  402092:	60f8      	str	r0, [r7, #12]
  402094:	60b9      	str	r1, [r7, #8]
  402096:	607a      	str	r2, [r7, #4]
  402098:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40209a:	68b9      	ldr	r1, [r7, #8]
  40209c:	68f8      	ldr	r0, [r7, #12]
  40209e:	4b12      	ldr	r3, [pc, #72]	; (4020e8 <pio_set_output+0x5c>)
  4020a0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4020a2:	69ba      	ldr	r2, [r7, #24]
  4020a4:	68b9      	ldr	r1, [r7, #8]
  4020a6:	68f8      	ldr	r0, [r7, #12]
  4020a8:	4b10      	ldr	r3, [pc, #64]	; (4020ec <pio_set_output+0x60>)
  4020aa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4020ac:	683b      	ldr	r3, [r7, #0]
  4020ae:	2b00      	cmp	r3, #0
  4020b0:	d003      	beq.n	4020ba <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4020b2:	68fb      	ldr	r3, [r7, #12]
  4020b4:	68ba      	ldr	r2, [r7, #8]
  4020b6:	651a      	str	r2, [r3, #80]	; 0x50
  4020b8:	e002      	b.n	4020c0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4020ba:	68fb      	ldr	r3, [r7, #12]
  4020bc:	68ba      	ldr	r2, [r7, #8]
  4020be:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4020c0:	687b      	ldr	r3, [r7, #4]
  4020c2:	2b00      	cmp	r3, #0
  4020c4:	d003      	beq.n	4020ce <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4020c6:	68fb      	ldr	r3, [r7, #12]
  4020c8:	68ba      	ldr	r2, [r7, #8]
  4020ca:	631a      	str	r2, [r3, #48]	; 0x30
  4020cc:	e002      	b.n	4020d4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4020ce:	68fb      	ldr	r3, [r7, #12]
  4020d0:	68ba      	ldr	r2, [r7, #8]
  4020d2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4020d4:	68fb      	ldr	r3, [r7, #12]
  4020d6:	68ba      	ldr	r2, [r7, #8]
  4020d8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4020da:	68fb      	ldr	r3, [r7, #12]
  4020dc:	68ba      	ldr	r2, [r7, #8]
  4020de:	601a      	str	r2, [r3, #0]
}
  4020e0:	bf00      	nop
  4020e2:	3710      	adds	r7, #16
  4020e4:	46bd      	mov	sp, r7
  4020e6:	bd80      	pop	{r7, pc}
  4020e8:	004021bd 	.word	0x004021bd
  4020ec:	00401eb5 	.word	0x00401eb5

004020f0 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  4020f0:	b590      	push	{r4, r7, lr}
  4020f2:	b087      	sub	sp, #28
  4020f4:	af02      	add	r7, sp, #8
  4020f6:	60f8      	str	r0, [r7, #12]
  4020f8:	60b9      	str	r1, [r7, #8]
  4020fa:	607a      	str	r2, [r7, #4]
  4020fc:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  4020fe:	68bb      	ldr	r3, [r7, #8]
  402100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402104:	d016      	beq.n	402134 <pio_configure+0x44>
  402106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40210a:	d809      	bhi.n	402120 <pio_configure+0x30>
  40210c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402110:	d010      	beq.n	402134 <pio_configure+0x44>
  402112:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402116:	d00d      	beq.n	402134 <pio_configure+0x44>
  402118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40211c:	d00a      	beq.n	402134 <pio_configure+0x44>
  40211e:	e03d      	b.n	40219c <pio_configure+0xac>
  402120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402124:	d01a      	beq.n	40215c <pio_configure+0x6c>
  402126:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40212a:	d017      	beq.n	40215c <pio_configure+0x6c>
  40212c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402130:	d00e      	beq.n	402150 <pio_configure+0x60>
  402132:	e033      	b.n	40219c <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402134:	687a      	ldr	r2, [r7, #4]
  402136:	68b9      	ldr	r1, [r7, #8]
  402138:	68f8      	ldr	r0, [r7, #12]
  40213a:	4b1c      	ldr	r3, [pc, #112]	; (4021ac <pio_configure+0xbc>)
  40213c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  40213e:	683b      	ldr	r3, [r7, #0]
  402140:	f003 0301 	and.w	r3, r3, #1
  402144:	461a      	mov	r2, r3
  402146:	6879      	ldr	r1, [r7, #4]
  402148:	68f8      	ldr	r0, [r7, #12]
  40214a:	4b19      	ldr	r3, [pc, #100]	; (4021b0 <pio_configure+0xc0>)
  40214c:	4798      	blx	r3
		break;
  40214e:	e027      	b.n	4021a0 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  402150:	683a      	ldr	r2, [r7, #0]
  402152:	6879      	ldr	r1, [r7, #4]
  402154:	68f8      	ldr	r0, [r7, #12]
  402156:	4b17      	ldr	r3, [pc, #92]	; (4021b4 <pio_configure+0xc4>)
  402158:	4798      	blx	r3
		break;
  40215a:	e021      	b.n	4021a0 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40215c:	68bb      	ldr	r3, [r7, #8]
  40215e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402162:	bf0c      	ite	eq
  402164:	2301      	moveq	r3, #1
  402166:	2300      	movne	r3, #0
  402168:	b2db      	uxtb	r3, r3
  40216a:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  40216c:	683b      	ldr	r3, [r7, #0]
  40216e:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402172:	2b00      	cmp	r3, #0
  402174:	bf14      	ite	ne
  402176:	2301      	movne	r3, #1
  402178:	2300      	moveq	r3, #0
  40217a:	b2db      	uxtb	r3, r3
  40217c:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  40217e:	683b      	ldr	r3, [r7, #0]
  402180:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402184:	2b00      	cmp	r3, #0
  402186:	bf14      	ite	ne
  402188:	2301      	movne	r3, #1
  40218a:	2300      	moveq	r3, #0
  40218c:	b2db      	uxtb	r3, r3
  40218e:	9300      	str	r3, [sp, #0]
  402190:	460b      	mov	r3, r1
  402192:	6879      	ldr	r1, [r7, #4]
  402194:	68f8      	ldr	r0, [r7, #12]
  402196:	4c08      	ldr	r4, [pc, #32]	; (4021b8 <pio_configure+0xc8>)
  402198:	47a0      	blx	r4
		break;
  40219a:	e001      	b.n	4021a0 <pio_configure+0xb0>

	default:
		return 0;
  40219c:	2300      	movs	r3, #0
  40219e:	e000      	b.n	4021a2 <pio_configure+0xb2>
	}

	return 1;
  4021a0:	2301      	movs	r3, #1
}
  4021a2:	4618      	mov	r0, r3
  4021a4:	3714      	adds	r7, #20
  4021a6:	46bd      	mov	sp, r7
  4021a8:	bd90      	pop	{r4, r7, pc}
  4021aa:	bf00      	nop
  4021ac:	00401efd 	.word	0x00401efd
  4021b0:	00401eb5 	.word	0x00401eb5
  4021b4:	0040200d 	.word	0x0040200d
  4021b8:	0040208d 	.word	0x0040208d

004021bc <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4021bc:	b480      	push	{r7}
  4021be:	b083      	sub	sp, #12
  4021c0:	af00      	add	r7, sp, #0
  4021c2:	6078      	str	r0, [r7, #4]
  4021c4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4021c6:	687b      	ldr	r3, [r7, #4]
  4021c8:	683a      	ldr	r2, [r7, #0]
  4021ca:	645a      	str	r2, [r3, #68]	; 0x44
}
  4021cc:	bf00      	nop
  4021ce:	370c      	adds	r7, #12
  4021d0:	46bd      	mov	sp, r7
  4021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021d6:	4770      	bx	lr

004021d8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4021d8:	b480      	push	{r7}
  4021da:	b083      	sub	sp, #12
  4021dc:	af00      	add	r7, sp, #0
  4021de:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4021e0:	687b      	ldr	r3, [r7, #4]
  4021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4021e4:	4618      	mov	r0, r3
  4021e6:	370c      	adds	r7, #12
  4021e8:	46bd      	mov	sp, r7
  4021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021ee:	4770      	bx	lr

004021f0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4021f0:	b480      	push	{r7}
  4021f2:	b083      	sub	sp, #12
  4021f4:	af00      	add	r7, sp, #0
  4021f6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4021f8:	687b      	ldr	r3, [r7, #4]
  4021fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4021fc:	4618      	mov	r0, r3
  4021fe:	370c      	adds	r7, #12
  402200:	46bd      	mov	sp, r7
  402202:	f85d 7b04 	ldr.w	r7, [sp], #4
  402206:	4770      	bx	lr

00402208 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  402208:	b580      	push	{r7, lr}
  40220a:	b084      	sub	sp, #16
  40220c:	af00      	add	r7, sp, #0
  40220e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  402210:	6878      	ldr	r0, [r7, #4]
  402212:	4b08      	ldr	r3, [pc, #32]	; (402234 <pio_set_pin_high+0x2c>)
  402214:	4798      	blx	r3
  402216:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  402218:	687b      	ldr	r3, [r7, #4]
  40221a:	f003 031f 	and.w	r3, r3, #31
  40221e:	2201      	movs	r2, #1
  402220:	fa02 f303 	lsl.w	r3, r2, r3
  402224:	461a      	mov	r2, r3
  402226:	68fb      	ldr	r3, [r7, #12]
  402228:	631a      	str	r2, [r3, #48]	; 0x30
}
  40222a:	bf00      	nop
  40222c:	3710      	adds	r7, #16
  40222e:	46bd      	mov	sp, r7
  402230:	bd80      	pop	{r7, pc}
  402232:	bf00      	nop
  402234:	00402419 	.word	0x00402419

00402238 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  402238:	b580      	push	{r7, lr}
  40223a:	b084      	sub	sp, #16
  40223c:	af00      	add	r7, sp, #0
  40223e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  402240:	6878      	ldr	r0, [r7, #4]
  402242:	4b08      	ldr	r3, [pc, #32]	; (402264 <pio_set_pin_low+0x2c>)
  402244:	4798      	blx	r3
  402246:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  402248:	687b      	ldr	r3, [r7, #4]
  40224a:	f003 031f 	and.w	r3, r3, #31
  40224e:	2201      	movs	r2, #1
  402250:	fa02 f303 	lsl.w	r3, r2, r3
  402254:	461a      	mov	r2, r3
  402256:	68fb      	ldr	r3, [r7, #12]
  402258:	635a      	str	r2, [r3, #52]	; 0x34
}
  40225a:	bf00      	nop
  40225c:	3710      	adds	r7, #16
  40225e:	46bd      	mov	sp, r7
  402260:	bd80      	pop	{r7, pc}
  402262:	bf00      	nop
  402264:	00402419 	.word	0x00402419

00402268 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  402268:	b590      	push	{r4, r7, lr}
  40226a:	b087      	sub	sp, #28
  40226c:	af02      	add	r7, sp, #8
  40226e:	6078      	str	r0, [r7, #4]
  402270:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  402272:	6878      	ldr	r0, [r7, #4]
  402274:	4b63      	ldr	r3, [pc, #396]	; (402404 <pio_configure_pin+0x19c>)
  402276:	4798      	blx	r3
  402278:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40227a:	683b      	ldr	r3, [r7, #0]
  40227c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  402280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402284:	d067      	beq.n	402356 <pio_configure_pin+0xee>
  402286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40228a:	d809      	bhi.n	4022a0 <pio_configure_pin+0x38>
  40228c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402290:	d02b      	beq.n	4022ea <pio_configure_pin+0x82>
  402292:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402296:	d043      	beq.n	402320 <pio_configure_pin+0xb8>
  402298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40229c:	d00a      	beq.n	4022b4 <pio_configure_pin+0x4c>
  40229e:	e0a9      	b.n	4023f4 <pio_configure_pin+0x18c>
  4022a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4022a4:	d07e      	beq.n	4023a4 <pio_configure_pin+0x13c>
  4022a6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4022aa:	d07b      	beq.n	4023a4 <pio_configure_pin+0x13c>
  4022ac:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4022b0:	d06c      	beq.n	40238c <pio_configure_pin+0x124>
  4022b2:	e09f      	b.n	4023f4 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4022b4:	687b      	ldr	r3, [r7, #4]
  4022b6:	f003 031f 	and.w	r3, r3, #31
  4022ba:	2201      	movs	r2, #1
  4022bc:	fa02 f303 	lsl.w	r3, r2, r3
  4022c0:	461a      	mov	r2, r3
  4022c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4022c6:	68f8      	ldr	r0, [r7, #12]
  4022c8:	4b4f      	ldr	r3, [pc, #316]	; (402408 <pio_configure_pin+0x1a0>)
  4022ca:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4022cc:	687b      	ldr	r3, [r7, #4]
  4022ce:	f003 031f 	and.w	r3, r3, #31
  4022d2:	2201      	movs	r2, #1
  4022d4:	fa02 f303 	lsl.w	r3, r2, r3
  4022d8:	4619      	mov	r1, r3
  4022da:	683b      	ldr	r3, [r7, #0]
  4022dc:	f003 0301 	and.w	r3, r3, #1
  4022e0:	461a      	mov	r2, r3
  4022e2:	68f8      	ldr	r0, [r7, #12]
  4022e4:	4b49      	ldr	r3, [pc, #292]	; (40240c <pio_configure_pin+0x1a4>)
  4022e6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4022e8:	e086      	b.n	4023f8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4022ea:	687b      	ldr	r3, [r7, #4]
  4022ec:	f003 031f 	and.w	r3, r3, #31
  4022f0:	2201      	movs	r2, #1
  4022f2:	fa02 f303 	lsl.w	r3, r2, r3
  4022f6:	461a      	mov	r2, r3
  4022f8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4022fc:	68f8      	ldr	r0, [r7, #12]
  4022fe:	4b42      	ldr	r3, [pc, #264]	; (402408 <pio_configure_pin+0x1a0>)
  402300:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402302:	687b      	ldr	r3, [r7, #4]
  402304:	f003 031f 	and.w	r3, r3, #31
  402308:	2201      	movs	r2, #1
  40230a:	fa02 f303 	lsl.w	r3, r2, r3
  40230e:	4619      	mov	r1, r3
  402310:	683b      	ldr	r3, [r7, #0]
  402312:	f003 0301 	and.w	r3, r3, #1
  402316:	461a      	mov	r2, r3
  402318:	68f8      	ldr	r0, [r7, #12]
  40231a:	4b3c      	ldr	r3, [pc, #240]	; (40240c <pio_configure_pin+0x1a4>)
  40231c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40231e:	e06b      	b.n	4023f8 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402320:	687b      	ldr	r3, [r7, #4]
  402322:	f003 031f 	and.w	r3, r3, #31
  402326:	2201      	movs	r2, #1
  402328:	fa02 f303 	lsl.w	r3, r2, r3
  40232c:	461a      	mov	r2, r3
  40232e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402332:	68f8      	ldr	r0, [r7, #12]
  402334:	4b34      	ldr	r3, [pc, #208]	; (402408 <pio_configure_pin+0x1a0>)
  402336:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402338:	687b      	ldr	r3, [r7, #4]
  40233a:	f003 031f 	and.w	r3, r3, #31
  40233e:	2201      	movs	r2, #1
  402340:	fa02 f303 	lsl.w	r3, r2, r3
  402344:	4619      	mov	r1, r3
  402346:	683b      	ldr	r3, [r7, #0]
  402348:	f003 0301 	and.w	r3, r3, #1
  40234c:	461a      	mov	r2, r3
  40234e:	68f8      	ldr	r0, [r7, #12]
  402350:	4b2e      	ldr	r3, [pc, #184]	; (40240c <pio_configure_pin+0x1a4>)
  402352:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402354:	e050      	b.n	4023f8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402356:	687b      	ldr	r3, [r7, #4]
  402358:	f003 031f 	and.w	r3, r3, #31
  40235c:	2201      	movs	r2, #1
  40235e:	fa02 f303 	lsl.w	r3, r2, r3
  402362:	461a      	mov	r2, r3
  402364:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402368:	68f8      	ldr	r0, [r7, #12]
  40236a:	4b27      	ldr	r3, [pc, #156]	; (402408 <pio_configure_pin+0x1a0>)
  40236c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40236e:	687b      	ldr	r3, [r7, #4]
  402370:	f003 031f 	and.w	r3, r3, #31
  402374:	2201      	movs	r2, #1
  402376:	fa02 f303 	lsl.w	r3, r2, r3
  40237a:	4619      	mov	r1, r3
  40237c:	683b      	ldr	r3, [r7, #0]
  40237e:	f003 0301 	and.w	r3, r3, #1
  402382:	461a      	mov	r2, r3
  402384:	68f8      	ldr	r0, [r7, #12]
  402386:	4b21      	ldr	r3, [pc, #132]	; (40240c <pio_configure_pin+0x1a4>)
  402388:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40238a:	e035      	b.n	4023f8 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40238c:	687b      	ldr	r3, [r7, #4]
  40238e:	f003 031f 	and.w	r3, r3, #31
  402392:	2201      	movs	r2, #1
  402394:	fa02 f303 	lsl.w	r3, r2, r3
  402398:	683a      	ldr	r2, [r7, #0]
  40239a:	4619      	mov	r1, r3
  40239c:	68f8      	ldr	r0, [r7, #12]
  40239e:	4b1c      	ldr	r3, [pc, #112]	; (402410 <pio_configure_pin+0x1a8>)
  4023a0:	4798      	blx	r3
		break;
  4023a2:	e029      	b.n	4023f8 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4023a4:	687b      	ldr	r3, [r7, #4]
  4023a6:	f003 031f 	and.w	r3, r3, #31
  4023aa:	2201      	movs	r2, #1
  4023ac:	fa02 f303 	lsl.w	r3, r2, r3
  4023b0:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4023b2:	683b      	ldr	r3, [r7, #0]
  4023b4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4023b8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4023bc:	bf0c      	ite	eq
  4023be:	2301      	moveq	r3, #1
  4023c0:	2300      	movne	r3, #0
  4023c2:	b2db      	uxtb	r3, r3
  4023c4:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4023c6:	683b      	ldr	r3, [r7, #0]
  4023c8:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4023cc:	2b00      	cmp	r3, #0
  4023ce:	bf14      	ite	ne
  4023d0:	2301      	movne	r3, #1
  4023d2:	2300      	moveq	r3, #0
  4023d4:	b2db      	uxtb	r3, r3
  4023d6:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4023d8:	683b      	ldr	r3, [r7, #0]
  4023da:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4023de:	2b00      	cmp	r3, #0
  4023e0:	bf14      	ite	ne
  4023e2:	2301      	movne	r3, #1
  4023e4:	2300      	moveq	r3, #0
  4023e6:	b2db      	uxtb	r3, r3
  4023e8:	9300      	str	r3, [sp, #0]
  4023ea:	4603      	mov	r3, r0
  4023ec:	68f8      	ldr	r0, [r7, #12]
  4023ee:	4c09      	ldr	r4, [pc, #36]	; (402414 <pio_configure_pin+0x1ac>)
  4023f0:	47a0      	blx	r4
		break;
  4023f2:	e001      	b.n	4023f8 <pio_configure_pin+0x190>

	default:
		return 0;
  4023f4:	2300      	movs	r3, #0
  4023f6:	e000      	b.n	4023fa <pio_configure_pin+0x192>
	}

	return 1;
  4023f8:	2301      	movs	r3, #1
}
  4023fa:	4618      	mov	r0, r3
  4023fc:	3714      	adds	r7, #20
  4023fe:	46bd      	mov	sp, r7
  402400:	bd90      	pop	{r4, r7, pc}
  402402:	bf00      	nop
  402404:	00402419 	.word	0x00402419
  402408:	00401efd 	.word	0x00401efd
  40240c:	00401eb5 	.word	0x00401eb5
  402410:	0040200d 	.word	0x0040200d
  402414:	0040208d 	.word	0x0040208d

00402418 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  402418:	b480      	push	{r7}
  40241a:	b085      	sub	sp, #20
  40241c:	af00      	add	r7, sp, #0
  40241e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402420:	687b      	ldr	r3, [r7, #4]
  402422:	095a      	lsrs	r2, r3, #5
  402424:	4b05      	ldr	r3, [pc, #20]	; (40243c <pio_get_pin_group+0x24>)
  402426:	4413      	add	r3, r2
  402428:	025b      	lsls	r3, r3, #9
  40242a:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  40242c:	68fb      	ldr	r3, [r7, #12]
}
  40242e:	4618      	mov	r0, r3
  402430:	3714      	adds	r7, #20
  402432:	46bd      	mov	sp, r7
  402434:	f85d 7b04 	ldr.w	r7, [sp], #4
  402438:	4770      	bx	lr
  40243a:	bf00      	nop
  40243c:	00200707 	.word	0x00200707

00402440 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402440:	b580      	push	{r7, lr}
  402442:	b084      	sub	sp, #16
  402444:	af00      	add	r7, sp, #0
  402446:	6078      	str	r0, [r7, #4]
  402448:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40244a:	6878      	ldr	r0, [r7, #4]
  40244c:	4b26      	ldr	r3, [pc, #152]	; (4024e8 <pio_handler_process+0xa8>)
  40244e:	4798      	blx	r3
  402450:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  402452:	6878      	ldr	r0, [r7, #4]
  402454:	4b25      	ldr	r3, [pc, #148]	; (4024ec <pio_handler_process+0xac>)
  402456:	4798      	blx	r3
  402458:	4602      	mov	r2, r0
  40245a:	68fb      	ldr	r3, [r7, #12]
  40245c:	4013      	ands	r3, r2
  40245e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  402460:	68fb      	ldr	r3, [r7, #12]
  402462:	2b00      	cmp	r3, #0
  402464:	d03c      	beq.n	4024e0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  402466:	2300      	movs	r3, #0
  402468:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40246a:	e034      	b.n	4024d6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40246c:	4a20      	ldr	r2, [pc, #128]	; (4024f0 <pio_handler_process+0xb0>)
  40246e:	68bb      	ldr	r3, [r7, #8]
  402470:	011b      	lsls	r3, r3, #4
  402472:	4413      	add	r3, r2
  402474:	681a      	ldr	r2, [r3, #0]
  402476:	683b      	ldr	r3, [r7, #0]
  402478:	429a      	cmp	r2, r3
  40247a:	d126      	bne.n	4024ca <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40247c:	4a1c      	ldr	r2, [pc, #112]	; (4024f0 <pio_handler_process+0xb0>)
  40247e:	68bb      	ldr	r3, [r7, #8]
  402480:	011b      	lsls	r3, r3, #4
  402482:	4413      	add	r3, r2
  402484:	3304      	adds	r3, #4
  402486:	681a      	ldr	r2, [r3, #0]
  402488:	68fb      	ldr	r3, [r7, #12]
  40248a:	4013      	ands	r3, r2
  40248c:	2b00      	cmp	r3, #0
  40248e:	d01c      	beq.n	4024ca <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402490:	4a17      	ldr	r2, [pc, #92]	; (4024f0 <pio_handler_process+0xb0>)
  402492:	68bb      	ldr	r3, [r7, #8]
  402494:	011b      	lsls	r3, r3, #4
  402496:	4413      	add	r3, r2
  402498:	330c      	adds	r3, #12
  40249a:	681b      	ldr	r3, [r3, #0]
  40249c:	4914      	ldr	r1, [pc, #80]	; (4024f0 <pio_handler_process+0xb0>)
  40249e:	68ba      	ldr	r2, [r7, #8]
  4024a0:	0112      	lsls	r2, r2, #4
  4024a2:	440a      	add	r2, r1
  4024a4:	6810      	ldr	r0, [r2, #0]
  4024a6:	4912      	ldr	r1, [pc, #72]	; (4024f0 <pio_handler_process+0xb0>)
  4024a8:	68ba      	ldr	r2, [r7, #8]
  4024aa:	0112      	lsls	r2, r2, #4
  4024ac:	440a      	add	r2, r1
  4024ae:	3204      	adds	r2, #4
  4024b0:	6812      	ldr	r2, [r2, #0]
  4024b2:	4611      	mov	r1, r2
  4024b4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4024b6:	4a0e      	ldr	r2, [pc, #56]	; (4024f0 <pio_handler_process+0xb0>)
  4024b8:	68bb      	ldr	r3, [r7, #8]
  4024ba:	011b      	lsls	r3, r3, #4
  4024bc:	4413      	add	r3, r2
  4024be:	3304      	adds	r3, #4
  4024c0:	681b      	ldr	r3, [r3, #0]
  4024c2:	43db      	mvns	r3, r3
  4024c4:	68fa      	ldr	r2, [r7, #12]
  4024c6:	4013      	ands	r3, r2
  4024c8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4024ca:	68bb      	ldr	r3, [r7, #8]
  4024cc:	3301      	adds	r3, #1
  4024ce:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4024d0:	68bb      	ldr	r3, [r7, #8]
  4024d2:	2b06      	cmp	r3, #6
  4024d4:	d803      	bhi.n	4024de <pio_handler_process+0x9e>
		while (status != 0) {
  4024d6:	68fb      	ldr	r3, [r7, #12]
  4024d8:	2b00      	cmp	r3, #0
  4024da:	d1c7      	bne.n	40246c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4024dc:	e000      	b.n	4024e0 <pio_handler_process+0xa0>
				break;
  4024de:	bf00      	nop
}
  4024e0:	bf00      	nop
  4024e2:	3710      	adds	r7, #16
  4024e4:	46bd      	mov	sp, r7
  4024e6:	bd80      	pop	{r7, pc}
  4024e8:	004021d9 	.word	0x004021d9
  4024ec:	004021f1 	.word	0x004021f1
  4024f0:	20400d98 	.word	0x20400d98

004024f4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4024f4:	b580      	push	{r7, lr}
  4024f6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4024f8:	210a      	movs	r1, #10
  4024fa:	4802      	ldr	r0, [pc, #8]	; (402504 <PIOA_Handler+0x10>)
  4024fc:	4b02      	ldr	r3, [pc, #8]	; (402508 <PIOA_Handler+0x14>)
  4024fe:	4798      	blx	r3
}
  402500:	bf00      	nop
  402502:	bd80      	pop	{r7, pc}
  402504:	400e0e00 	.word	0x400e0e00
  402508:	00402441 	.word	0x00402441

0040250c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40250c:	b580      	push	{r7, lr}
  40250e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  402510:	210b      	movs	r1, #11
  402512:	4802      	ldr	r0, [pc, #8]	; (40251c <PIOB_Handler+0x10>)
  402514:	4b02      	ldr	r3, [pc, #8]	; (402520 <PIOB_Handler+0x14>)
  402516:	4798      	blx	r3
}
  402518:	bf00      	nop
  40251a:	bd80      	pop	{r7, pc}
  40251c:	400e1000 	.word	0x400e1000
  402520:	00402441 	.word	0x00402441

00402524 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402524:	b580      	push	{r7, lr}
  402526:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  402528:	210c      	movs	r1, #12
  40252a:	4802      	ldr	r0, [pc, #8]	; (402534 <PIOC_Handler+0x10>)
  40252c:	4b02      	ldr	r3, [pc, #8]	; (402538 <PIOC_Handler+0x14>)
  40252e:	4798      	blx	r3
}
  402530:	bf00      	nop
  402532:	bd80      	pop	{r7, pc}
  402534:	400e1200 	.word	0x400e1200
  402538:	00402441 	.word	0x00402441

0040253c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40253c:	b580      	push	{r7, lr}
  40253e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  402540:	2110      	movs	r1, #16
  402542:	4802      	ldr	r0, [pc, #8]	; (40254c <PIOD_Handler+0x10>)
  402544:	4b02      	ldr	r3, [pc, #8]	; (402550 <PIOD_Handler+0x14>)
  402546:	4798      	blx	r3
}
  402548:	bf00      	nop
  40254a:	bd80      	pop	{r7, pc}
  40254c:	400e1400 	.word	0x400e1400
  402550:	00402441 	.word	0x00402441

00402554 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402554:	b580      	push	{r7, lr}
  402556:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  402558:	2111      	movs	r1, #17
  40255a:	4802      	ldr	r0, [pc, #8]	; (402564 <PIOE_Handler+0x10>)
  40255c:	4b02      	ldr	r3, [pc, #8]	; (402568 <PIOE_Handler+0x14>)
  40255e:	4798      	blx	r3
}
  402560:	bf00      	nop
  402562:	bd80      	pop	{r7, pc}
  402564:	400e1600 	.word	0x400e1600
  402568:	00402441 	.word	0x00402441

0040256c <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  40256c:	b480      	push	{r7}
  40256e:	b083      	sub	sp, #12
  402570:	af00      	add	r7, sp, #0
  402572:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  402574:	687b      	ldr	r3, [r7, #4]
  402576:	3b01      	subs	r3, #1
  402578:	2b03      	cmp	r3, #3
  40257a:	d81a      	bhi.n	4025b2 <pmc_mck_set_division+0x46>
  40257c:	a201      	add	r2, pc, #4	; (adr r2, 402584 <pmc_mck_set_division+0x18>)
  40257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402582:	bf00      	nop
  402584:	00402595 	.word	0x00402595
  402588:	0040259b 	.word	0x0040259b
  40258c:	004025a3 	.word	0x004025a3
  402590:	004025ab 	.word	0x004025ab
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402594:	2300      	movs	r3, #0
  402596:	607b      	str	r3, [r7, #4]
			break;
  402598:	e00e      	b.n	4025b8 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  40259a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40259e:	607b      	str	r3, [r7, #4]
			break;
  4025a0:	e00a      	b.n	4025b8 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4025a2:	f44f 7340 	mov.w	r3, #768	; 0x300
  4025a6:	607b      	str	r3, [r7, #4]
			break;
  4025a8:	e006      	b.n	4025b8 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4025aa:	f44f 7300 	mov.w	r3, #512	; 0x200
  4025ae:	607b      	str	r3, [r7, #4]
			break;
  4025b0:	e002      	b.n	4025b8 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4025b2:	2300      	movs	r3, #0
  4025b4:	607b      	str	r3, [r7, #4]
			break;
  4025b6:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4025b8:	490a      	ldr	r1, [pc, #40]	; (4025e4 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4025ba:	4b0a      	ldr	r3, [pc, #40]	; (4025e4 <pmc_mck_set_division+0x78>)
  4025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4025be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4025c2:	687b      	ldr	r3, [r7, #4]
  4025c4:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  4025c6:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4025c8:	bf00      	nop
  4025ca:	4b06      	ldr	r3, [pc, #24]	; (4025e4 <pmc_mck_set_division+0x78>)
  4025cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4025ce:	f003 0308 	and.w	r3, r3, #8
  4025d2:	2b00      	cmp	r3, #0
  4025d4:	d0f9      	beq.n	4025ca <pmc_mck_set_division+0x5e>
}
  4025d6:	bf00      	nop
  4025d8:	370c      	adds	r7, #12
  4025da:	46bd      	mov	sp, r7
  4025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025e0:	4770      	bx	lr
  4025e2:	bf00      	nop
  4025e4:	400e0600 	.word	0x400e0600

004025e8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4025e8:	b480      	push	{r7}
  4025ea:	b085      	sub	sp, #20
  4025ec:	af00      	add	r7, sp, #0
  4025ee:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4025f0:	491d      	ldr	r1, [pc, #116]	; (402668 <pmc_switch_mck_to_pllack+0x80>)
  4025f2:	4b1d      	ldr	r3, [pc, #116]	; (402668 <pmc_switch_mck_to_pllack+0x80>)
  4025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4025f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4025fa:	687b      	ldr	r3, [r7, #4]
  4025fc:	4313      	orrs	r3, r2
  4025fe:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402604:	60fb      	str	r3, [r7, #12]
  402606:	e007      	b.n	402618 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402608:	68fb      	ldr	r3, [r7, #12]
  40260a:	2b00      	cmp	r3, #0
  40260c:	d101      	bne.n	402612 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40260e:	2301      	movs	r3, #1
  402610:	e023      	b.n	40265a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  402612:	68fb      	ldr	r3, [r7, #12]
  402614:	3b01      	subs	r3, #1
  402616:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402618:	4b13      	ldr	r3, [pc, #76]	; (402668 <pmc_switch_mck_to_pllack+0x80>)
  40261a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40261c:	f003 0308 	and.w	r3, r3, #8
  402620:	2b00      	cmp	r3, #0
  402622:	d0f1      	beq.n	402608 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402624:	4a10      	ldr	r2, [pc, #64]	; (402668 <pmc_switch_mck_to_pllack+0x80>)
  402626:	4b10      	ldr	r3, [pc, #64]	; (402668 <pmc_switch_mck_to_pllack+0x80>)
  402628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40262a:	f023 0303 	bic.w	r3, r3, #3
  40262e:	f043 0302 	orr.w	r3, r3, #2
  402632:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402638:	60fb      	str	r3, [r7, #12]
  40263a:	e007      	b.n	40264c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40263c:	68fb      	ldr	r3, [r7, #12]
  40263e:	2b00      	cmp	r3, #0
  402640:	d101      	bne.n	402646 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  402642:	2301      	movs	r3, #1
  402644:	e009      	b.n	40265a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  402646:	68fb      	ldr	r3, [r7, #12]
  402648:	3b01      	subs	r3, #1
  40264a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40264c:	4b06      	ldr	r3, [pc, #24]	; (402668 <pmc_switch_mck_to_pllack+0x80>)
  40264e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402650:	f003 0308 	and.w	r3, r3, #8
  402654:	2b00      	cmp	r3, #0
  402656:	d0f1      	beq.n	40263c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  402658:	2300      	movs	r3, #0
}
  40265a:	4618      	mov	r0, r3
  40265c:	3714      	adds	r7, #20
  40265e:	46bd      	mov	sp, r7
  402660:	f85d 7b04 	ldr.w	r7, [sp], #4
  402664:	4770      	bx	lr
  402666:	bf00      	nop
  402668:	400e0600 	.word	0x400e0600

0040266c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40266c:	b480      	push	{r7}
  40266e:	b083      	sub	sp, #12
  402670:	af00      	add	r7, sp, #0
  402672:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  402674:	687b      	ldr	r3, [r7, #4]
  402676:	2b01      	cmp	r3, #1
  402678:	d105      	bne.n	402686 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40267a:	4907      	ldr	r1, [pc, #28]	; (402698 <pmc_switch_sclk_to_32kxtal+0x2c>)
  40267c:	4b06      	ldr	r3, [pc, #24]	; (402698 <pmc_switch_sclk_to_32kxtal+0x2c>)
  40267e:	689a      	ldr	r2, [r3, #8]
  402680:	4b06      	ldr	r3, [pc, #24]	; (40269c <pmc_switch_sclk_to_32kxtal+0x30>)
  402682:	4313      	orrs	r3, r2
  402684:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  402686:	4b04      	ldr	r3, [pc, #16]	; (402698 <pmc_switch_sclk_to_32kxtal+0x2c>)
  402688:	4a05      	ldr	r2, [pc, #20]	; (4026a0 <pmc_switch_sclk_to_32kxtal+0x34>)
  40268a:	601a      	str	r2, [r3, #0]
}
  40268c:	bf00      	nop
  40268e:	370c      	adds	r7, #12
  402690:	46bd      	mov	sp, r7
  402692:	f85d 7b04 	ldr.w	r7, [sp], #4
  402696:	4770      	bx	lr
  402698:	400e1810 	.word	0x400e1810
  40269c:	a5100000 	.word	0xa5100000
  4026a0:	a5000008 	.word	0xa5000008

004026a4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4026a4:	b480      	push	{r7}
  4026a6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4026a8:	4b09      	ldr	r3, [pc, #36]	; (4026d0 <pmc_osc_is_ready_32kxtal+0x2c>)
  4026aa:	695b      	ldr	r3, [r3, #20]
  4026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4026b0:	2b00      	cmp	r3, #0
  4026b2:	d007      	beq.n	4026c4 <pmc_osc_is_ready_32kxtal+0x20>
  4026b4:	4b07      	ldr	r3, [pc, #28]	; (4026d4 <pmc_osc_is_ready_32kxtal+0x30>)
  4026b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4026b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4026bc:	2b00      	cmp	r3, #0
  4026be:	d001      	beq.n	4026c4 <pmc_osc_is_ready_32kxtal+0x20>
  4026c0:	2301      	movs	r3, #1
  4026c2:	e000      	b.n	4026c6 <pmc_osc_is_ready_32kxtal+0x22>
  4026c4:	2300      	movs	r3, #0
}
  4026c6:	4618      	mov	r0, r3
  4026c8:	46bd      	mov	sp, r7
  4026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026ce:	4770      	bx	lr
  4026d0:	400e1810 	.word	0x400e1810
  4026d4:	400e0600 	.word	0x400e0600

004026d8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4026d8:	b480      	push	{r7}
  4026da:	b083      	sub	sp, #12
  4026dc:	af00      	add	r7, sp, #0
  4026de:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4026e0:	4915      	ldr	r1, [pc, #84]	; (402738 <pmc_switch_mainck_to_fastrc+0x60>)
  4026e2:	4b15      	ldr	r3, [pc, #84]	; (402738 <pmc_switch_mainck_to_fastrc+0x60>)
  4026e4:	6a1a      	ldr	r2, [r3, #32]
  4026e6:	4b15      	ldr	r3, [pc, #84]	; (40273c <pmc_switch_mainck_to_fastrc+0x64>)
  4026e8:	4313      	orrs	r3, r2
  4026ea:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4026ec:	bf00      	nop
  4026ee:	4b12      	ldr	r3, [pc, #72]	; (402738 <pmc_switch_mainck_to_fastrc+0x60>)
  4026f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4026f6:	2b00      	cmp	r3, #0
  4026f8:	d0f9      	beq.n	4026ee <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4026fa:	490f      	ldr	r1, [pc, #60]	; (402738 <pmc_switch_mainck_to_fastrc+0x60>)
  4026fc:	4b0e      	ldr	r3, [pc, #56]	; (402738 <pmc_switch_mainck_to_fastrc+0x60>)
  4026fe:	6a1a      	ldr	r2, [r3, #32]
  402700:	4b0f      	ldr	r3, [pc, #60]	; (402740 <pmc_switch_mainck_to_fastrc+0x68>)
  402702:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402704:	687a      	ldr	r2, [r7, #4]
  402706:	4313      	orrs	r3, r2
  402708:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40270c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40270e:	bf00      	nop
  402710:	4b09      	ldr	r3, [pc, #36]	; (402738 <pmc_switch_mainck_to_fastrc+0x60>)
  402712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402718:	2b00      	cmp	r3, #0
  40271a:	d0f9      	beq.n	402710 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40271c:	4906      	ldr	r1, [pc, #24]	; (402738 <pmc_switch_mainck_to_fastrc+0x60>)
  40271e:	4b06      	ldr	r3, [pc, #24]	; (402738 <pmc_switch_mainck_to_fastrc+0x60>)
  402720:	6a1a      	ldr	r2, [r3, #32]
  402722:	4b08      	ldr	r3, [pc, #32]	; (402744 <pmc_switch_mainck_to_fastrc+0x6c>)
  402724:	4013      	ands	r3, r2
  402726:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40272a:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40272c:	bf00      	nop
  40272e:	370c      	adds	r7, #12
  402730:	46bd      	mov	sp, r7
  402732:	f85d 7b04 	ldr.w	r7, [sp], #4
  402736:	4770      	bx	lr
  402738:	400e0600 	.word	0x400e0600
  40273c:	00370008 	.word	0x00370008
  402740:	ffc8ff8f 	.word	0xffc8ff8f
  402744:	fec8ffff 	.word	0xfec8ffff

00402748 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402748:	b480      	push	{r7}
  40274a:	b083      	sub	sp, #12
  40274c:	af00      	add	r7, sp, #0
  40274e:	6078      	str	r0, [r7, #4]
  402750:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402752:	687b      	ldr	r3, [r7, #4]
  402754:	2b00      	cmp	r3, #0
  402756:	d008      	beq.n	40276a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402758:	4913      	ldr	r1, [pc, #76]	; (4027a8 <pmc_switch_mainck_to_xtal+0x60>)
  40275a:	4b13      	ldr	r3, [pc, #76]	; (4027a8 <pmc_switch_mainck_to_xtal+0x60>)
  40275c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40275e:	4a13      	ldr	r2, [pc, #76]	; (4027ac <pmc_switch_mainck_to_xtal+0x64>)
  402760:	401a      	ands	r2, r3
  402762:	4b13      	ldr	r3, [pc, #76]	; (4027b0 <pmc_switch_mainck_to_xtal+0x68>)
  402764:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402766:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  402768:	e018      	b.n	40279c <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40276a:	490f      	ldr	r1, [pc, #60]	; (4027a8 <pmc_switch_mainck_to_xtal+0x60>)
  40276c:	4b0e      	ldr	r3, [pc, #56]	; (4027a8 <pmc_switch_mainck_to_xtal+0x60>)
  40276e:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402770:	4b10      	ldr	r3, [pc, #64]	; (4027b4 <pmc_switch_mainck_to_xtal+0x6c>)
  402772:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402774:	683a      	ldr	r2, [r7, #0]
  402776:	0212      	lsls	r2, r2, #8
  402778:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40277a:	431a      	orrs	r2, r3
  40277c:	4b0e      	ldr	r3, [pc, #56]	; (4027b8 <pmc_switch_mainck_to_xtal+0x70>)
  40277e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402780:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402782:	bf00      	nop
  402784:	4b08      	ldr	r3, [pc, #32]	; (4027a8 <pmc_switch_mainck_to_xtal+0x60>)
  402786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402788:	f003 0301 	and.w	r3, r3, #1
  40278c:	2b00      	cmp	r3, #0
  40278e:	d0f9      	beq.n	402784 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402790:	4905      	ldr	r1, [pc, #20]	; (4027a8 <pmc_switch_mainck_to_xtal+0x60>)
  402792:	4b05      	ldr	r3, [pc, #20]	; (4027a8 <pmc_switch_mainck_to_xtal+0x60>)
  402794:	6a1a      	ldr	r2, [r3, #32]
  402796:	4b09      	ldr	r3, [pc, #36]	; (4027bc <pmc_switch_mainck_to_xtal+0x74>)
  402798:	4313      	orrs	r3, r2
  40279a:	620b      	str	r3, [r1, #32]
}
  40279c:	bf00      	nop
  40279e:	370c      	adds	r7, #12
  4027a0:	46bd      	mov	sp, r7
  4027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027a6:	4770      	bx	lr
  4027a8:	400e0600 	.word	0x400e0600
  4027ac:	fec8fffc 	.word	0xfec8fffc
  4027b0:	01370002 	.word	0x01370002
  4027b4:	ffc8fffc 	.word	0xffc8fffc
  4027b8:	00370001 	.word	0x00370001
  4027bc:	01370000 	.word	0x01370000

004027c0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4027c0:	b480      	push	{r7}
  4027c2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4027c4:	4b04      	ldr	r3, [pc, #16]	; (4027d8 <pmc_osc_is_ready_mainck+0x18>)
  4027c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4027c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4027cc:	4618      	mov	r0, r3
  4027ce:	46bd      	mov	sp, r7
  4027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027d4:	4770      	bx	lr
  4027d6:	bf00      	nop
  4027d8:	400e0600 	.word	0x400e0600

004027dc <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4027dc:	b480      	push	{r7}
  4027de:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4027e0:	4b04      	ldr	r3, [pc, #16]	; (4027f4 <pmc_disable_pllack+0x18>)
  4027e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4027e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4027e8:	bf00      	nop
  4027ea:	46bd      	mov	sp, r7
  4027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027f0:	4770      	bx	lr
  4027f2:	bf00      	nop
  4027f4:	400e0600 	.word	0x400e0600

004027f8 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4027f8:	b480      	push	{r7}
  4027fa:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4027fc:	4b04      	ldr	r3, [pc, #16]	; (402810 <pmc_is_locked_pllack+0x18>)
  4027fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402800:	f003 0302 	and.w	r3, r3, #2
}
  402804:	4618      	mov	r0, r3
  402806:	46bd      	mov	sp, r7
  402808:	f85d 7b04 	ldr.w	r7, [sp], #4
  40280c:	4770      	bx	lr
  40280e:	bf00      	nop
  402810:	400e0600 	.word	0x400e0600

00402814 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  402814:	b480      	push	{r7}
  402816:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  402818:	4b04      	ldr	r3, [pc, #16]	; (40282c <pmc_is_locked_upll+0x18>)
  40281a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  402820:	4618      	mov	r0, r3
  402822:	46bd      	mov	sp, r7
  402824:	f85d 7b04 	ldr.w	r7, [sp], #4
  402828:	4770      	bx	lr
  40282a:	bf00      	nop
  40282c:	400e0600 	.word	0x400e0600

00402830 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  402830:	b480      	push	{r7}
  402832:	b085      	sub	sp, #20
  402834:	af00      	add	r7, sp, #0
  402836:	6078      	str	r0, [r7, #4]
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  402838:	4a0b      	ldr	r2, [pc, #44]	; (402868 <pmc_enable_periph_clk+0x38>)
  40283a:	687b      	ldr	r3, [r7, #4]
  40283c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  402840:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  402844:	4b08      	ldr	r3, [pc, #32]	; (402868 <pmc_enable_periph_clk+0x38>)
  402846:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  40284a:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  40284e:	60fb      	str	r3, [r7, #12]
	PMC->PMC_PCR = pcr;
  402850:	4a05      	ldr	r2, [pc, #20]	; (402868 <pmc_enable_periph_clk+0x38>)
  402852:	68fb      	ldr	r3, [r7, #12]
  402854:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	return 0;
  402858:	2300      	movs	r3, #0
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40285a:	4618      	mov	r0, r3
  40285c:	3714      	adds	r7, #20
  40285e:	46bd      	mov	sp, r7
  402860:	f85d 7b04 	ldr.w	r7, [sp], #4
  402864:	4770      	bx	lr
  402866:	bf00      	nop
  402868:	400e0600 	.word	0x400e0600

0040286c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  40286c:	b480      	push	{r7}
  40286e:	b083      	sub	sp, #12
  402870:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402872:	f3ef 8310 	mrs	r3, PRIMASK
  402876:	607b      	str	r3, [r7, #4]
  return(result);
  402878:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40287a:	2b00      	cmp	r3, #0
  40287c:	bf0c      	ite	eq
  40287e:	2301      	moveq	r3, #1
  402880:	2300      	movne	r3, #0
  402882:	b2db      	uxtb	r3, r3
  402884:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402886:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402888:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40288c:	4b04      	ldr	r3, [pc, #16]	; (4028a0 <cpu_irq_save+0x34>)
  40288e:	2200      	movs	r2, #0
  402890:	701a      	strb	r2, [r3, #0]
	return flags;
  402892:	683b      	ldr	r3, [r7, #0]
}
  402894:	4618      	mov	r0, r3
  402896:	370c      	adds	r7, #12
  402898:	46bd      	mov	sp, r7
  40289a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40289e:	4770      	bx	lr
  4028a0:	20400000 	.word	0x20400000

004028a4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4028a4:	b480      	push	{r7}
  4028a6:	b083      	sub	sp, #12
  4028a8:	af00      	add	r7, sp, #0
  4028aa:	6078      	str	r0, [r7, #4]
	return (flags);
  4028ac:	687b      	ldr	r3, [r7, #4]
  4028ae:	2b00      	cmp	r3, #0
  4028b0:	bf14      	ite	ne
  4028b2:	2301      	movne	r3, #1
  4028b4:	2300      	moveq	r3, #0
  4028b6:	b2db      	uxtb	r3, r3
}
  4028b8:	4618      	mov	r0, r3
  4028ba:	370c      	adds	r7, #12
  4028bc:	46bd      	mov	sp, r7
  4028be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028c2:	4770      	bx	lr

004028c4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4028c4:	b580      	push	{r7, lr}
  4028c6:	b082      	sub	sp, #8
  4028c8:	af00      	add	r7, sp, #0
  4028ca:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4028cc:	6878      	ldr	r0, [r7, #4]
  4028ce:	4b07      	ldr	r3, [pc, #28]	; (4028ec <cpu_irq_restore+0x28>)
  4028d0:	4798      	blx	r3
  4028d2:	4603      	mov	r3, r0
  4028d4:	2b00      	cmp	r3, #0
  4028d6:	d005      	beq.n	4028e4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4028d8:	4b05      	ldr	r3, [pc, #20]	; (4028f0 <cpu_irq_restore+0x2c>)
  4028da:	2201      	movs	r2, #1
  4028dc:	701a      	strb	r2, [r3, #0]
  4028de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4028e2:	b662      	cpsie	i
}
  4028e4:	bf00      	nop
  4028e6:	3708      	adds	r7, #8
  4028e8:	46bd      	mov	sp, r7
  4028ea:	bd80      	pop	{r7, pc}
  4028ec:	004028a5 	.word	0x004028a5
  4028f0:	20400000 	.word	0x20400000

004028f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4028f4:	b580      	push	{r7, lr}
  4028f6:	b084      	sub	sp, #16
  4028f8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4028fa:	4b1e      	ldr	r3, [pc, #120]	; (402974 <Reset_Handler+0x80>)
  4028fc:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  4028fe:	4b1e      	ldr	r3, [pc, #120]	; (402978 <Reset_Handler+0x84>)
  402900:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  402902:	68fa      	ldr	r2, [r7, #12]
  402904:	68bb      	ldr	r3, [r7, #8]
  402906:	429a      	cmp	r2, r3
  402908:	d00c      	beq.n	402924 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40290a:	e007      	b.n	40291c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40290c:	68bb      	ldr	r3, [r7, #8]
  40290e:	1d1a      	adds	r2, r3, #4
  402910:	60ba      	str	r2, [r7, #8]
  402912:	68fa      	ldr	r2, [r7, #12]
  402914:	1d11      	adds	r1, r2, #4
  402916:	60f9      	str	r1, [r7, #12]
  402918:	6812      	ldr	r2, [r2, #0]
  40291a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  40291c:	68bb      	ldr	r3, [r7, #8]
  40291e:	4a17      	ldr	r2, [pc, #92]	; (40297c <Reset_Handler+0x88>)
  402920:	4293      	cmp	r3, r2
  402922:	d3f3      	bcc.n	40290c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402924:	4b16      	ldr	r3, [pc, #88]	; (402980 <Reset_Handler+0x8c>)
  402926:	60bb      	str	r3, [r7, #8]
  402928:	e004      	b.n	402934 <Reset_Handler+0x40>
                *pDest++ = 0;
  40292a:	68bb      	ldr	r3, [r7, #8]
  40292c:	1d1a      	adds	r2, r3, #4
  40292e:	60ba      	str	r2, [r7, #8]
  402930:	2200      	movs	r2, #0
  402932:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  402934:	68bb      	ldr	r3, [r7, #8]
  402936:	4a13      	ldr	r2, [pc, #76]	; (402984 <Reset_Handler+0x90>)
  402938:	4293      	cmp	r3, r2
  40293a:	d3f6      	bcc.n	40292a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  40293c:	4b12      	ldr	r3, [pc, #72]	; (402988 <Reset_Handler+0x94>)
  40293e:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402940:	4a12      	ldr	r2, [pc, #72]	; (40298c <Reset_Handler+0x98>)
  402942:	68fb      	ldr	r3, [r7, #12]
  402944:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402948:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  40294a:	4b11      	ldr	r3, [pc, #68]	; (402990 <Reset_Handler+0x9c>)
  40294c:	4798      	blx	r3
  40294e:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  402950:	4a10      	ldr	r2, [pc, #64]	; (402994 <Reset_Handler+0xa0>)
  402952:	4b10      	ldr	r3, [pc, #64]	; (402994 <Reset_Handler+0xa0>)
  402954:	681b      	ldr	r3, [r3, #0]
  402956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40295a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40295c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402960:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  402964:	6878      	ldr	r0, [r7, #4]
  402966:	4b0c      	ldr	r3, [pc, #48]	; (402998 <Reset_Handler+0xa4>)
  402968:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  40296a:	4b0c      	ldr	r3, [pc, #48]	; (40299c <Reset_Handler+0xa8>)
  40296c:	4798      	blx	r3

        /* Branch to main function */
        main();
  40296e:	4b0c      	ldr	r3, [pc, #48]	; (4029a0 <Reset_Handler+0xac>)
  402970:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  402972:	e7fe      	b.n	402972 <Reset_Handler+0x7e>
  402974:	004077cc 	.word	0x004077cc
  402978:	20400000 	.word	0x20400000
  40297c:	204009b8 	.word	0x204009b8
  402980:	204009b8 	.word	0x204009b8
  402984:	20400e90 	.word	0x20400e90
  402988:	00400000 	.word	0x00400000
  40298c:	e000ed00 	.word	0xe000ed00
  402990:	0040286d 	.word	0x0040286d
  402994:	e000ed88 	.word	0xe000ed88
  402998:	004028c5 	.word	0x004028c5
  40299c:	00403401 	.word	0x00403401
  4029a0:	00400359 	.word	0x00400359

004029a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4029a4:	b480      	push	{r7}
  4029a6:	af00      	add	r7, sp, #0
        while (1) {
  4029a8:	e7fe      	b.n	4029a8 <Dummy_Handler+0x4>
	...

004029ac <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4029ac:	b480      	push	{r7}
  4029ae:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4029b0:	4b52      	ldr	r3, [pc, #328]	; (402afc <SystemCoreClockUpdate+0x150>)
  4029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029b4:	f003 0303 	and.w	r3, r3, #3
  4029b8:	2b01      	cmp	r3, #1
  4029ba:	d014      	beq.n	4029e6 <SystemCoreClockUpdate+0x3a>
  4029bc:	2b01      	cmp	r3, #1
  4029be:	d302      	bcc.n	4029c6 <SystemCoreClockUpdate+0x1a>
  4029c0:	2b02      	cmp	r3, #2
  4029c2:	d038      	beq.n	402a36 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  4029c4:	e07a      	b.n	402abc <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4029c6:	4b4e      	ldr	r3, [pc, #312]	; (402b00 <SystemCoreClockUpdate+0x154>)
  4029c8:	695b      	ldr	r3, [r3, #20]
  4029ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4029ce:	2b00      	cmp	r3, #0
  4029d0:	d004      	beq.n	4029dc <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4029d2:	4b4c      	ldr	r3, [pc, #304]	; (402b04 <SystemCoreClockUpdate+0x158>)
  4029d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4029d8:	601a      	str	r2, [r3, #0]
    break;
  4029da:	e06f      	b.n	402abc <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4029dc:	4b49      	ldr	r3, [pc, #292]	; (402b04 <SystemCoreClockUpdate+0x158>)
  4029de:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4029e2:	601a      	str	r2, [r3, #0]
    break;
  4029e4:	e06a      	b.n	402abc <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4029e6:	4b45      	ldr	r3, [pc, #276]	; (402afc <SystemCoreClockUpdate+0x150>)
  4029e8:	6a1b      	ldr	r3, [r3, #32]
  4029ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4029ee:	2b00      	cmp	r3, #0
  4029f0:	d003      	beq.n	4029fa <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4029f2:	4b44      	ldr	r3, [pc, #272]	; (402b04 <SystemCoreClockUpdate+0x158>)
  4029f4:	4a44      	ldr	r2, [pc, #272]	; (402b08 <SystemCoreClockUpdate+0x15c>)
  4029f6:	601a      	str	r2, [r3, #0]
    break;
  4029f8:	e060      	b.n	402abc <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4029fa:	4b42      	ldr	r3, [pc, #264]	; (402b04 <SystemCoreClockUpdate+0x158>)
  4029fc:	4a43      	ldr	r2, [pc, #268]	; (402b0c <SystemCoreClockUpdate+0x160>)
  4029fe:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402a00:	4b3e      	ldr	r3, [pc, #248]	; (402afc <SystemCoreClockUpdate+0x150>)
  402a02:	6a1b      	ldr	r3, [r3, #32]
  402a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402a08:	2b10      	cmp	r3, #16
  402a0a:	d004      	beq.n	402a16 <SystemCoreClockUpdate+0x6a>
  402a0c:	2b20      	cmp	r3, #32
  402a0e:	d008      	beq.n	402a22 <SystemCoreClockUpdate+0x76>
  402a10:	2b00      	cmp	r3, #0
  402a12:	d00e      	beq.n	402a32 <SystemCoreClockUpdate+0x86>
          break;
  402a14:	e00e      	b.n	402a34 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  402a16:	4b3b      	ldr	r3, [pc, #236]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402a18:	681b      	ldr	r3, [r3, #0]
  402a1a:	005b      	lsls	r3, r3, #1
  402a1c:	4a39      	ldr	r2, [pc, #228]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402a1e:	6013      	str	r3, [r2, #0]
          break;
  402a20:	e008      	b.n	402a34 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  402a22:	4b38      	ldr	r3, [pc, #224]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402a24:	681a      	ldr	r2, [r3, #0]
  402a26:	4613      	mov	r3, r2
  402a28:	005b      	lsls	r3, r3, #1
  402a2a:	4413      	add	r3, r2
  402a2c:	4a35      	ldr	r2, [pc, #212]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402a2e:	6013      	str	r3, [r2, #0]
          break;
  402a30:	e000      	b.n	402a34 <SystemCoreClockUpdate+0x88>
          break;
  402a32:	bf00      	nop
    break;
  402a34:	e042      	b.n	402abc <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402a36:	4b31      	ldr	r3, [pc, #196]	; (402afc <SystemCoreClockUpdate+0x150>)
  402a38:	6a1b      	ldr	r3, [r3, #32]
  402a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402a3e:	2b00      	cmp	r3, #0
  402a40:	d003      	beq.n	402a4a <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402a42:	4b30      	ldr	r3, [pc, #192]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402a44:	4a30      	ldr	r2, [pc, #192]	; (402b08 <SystemCoreClockUpdate+0x15c>)
  402a46:	601a      	str	r2, [r3, #0]
  402a48:	e01c      	b.n	402a84 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402a4a:	4b2e      	ldr	r3, [pc, #184]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402a4c:	4a2f      	ldr	r2, [pc, #188]	; (402b0c <SystemCoreClockUpdate+0x160>)
  402a4e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402a50:	4b2a      	ldr	r3, [pc, #168]	; (402afc <SystemCoreClockUpdate+0x150>)
  402a52:	6a1b      	ldr	r3, [r3, #32]
  402a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402a58:	2b10      	cmp	r3, #16
  402a5a:	d004      	beq.n	402a66 <SystemCoreClockUpdate+0xba>
  402a5c:	2b20      	cmp	r3, #32
  402a5e:	d008      	beq.n	402a72 <SystemCoreClockUpdate+0xc6>
  402a60:	2b00      	cmp	r3, #0
  402a62:	d00e      	beq.n	402a82 <SystemCoreClockUpdate+0xd6>
          break;
  402a64:	e00e      	b.n	402a84 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  402a66:	4b27      	ldr	r3, [pc, #156]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402a68:	681b      	ldr	r3, [r3, #0]
  402a6a:	005b      	lsls	r3, r3, #1
  402a6c:	4a25      	ldr	r2, [pc, #148]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402a6e:	6013      	str	r3, [r2, #0]
          break;
  402a70:	e008      	b.n	402a84 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  402a72:	4b24      	ldr	r3, [pc, #144]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402a74:	681a      	ldr	r2, [r3, #0]
  402a76:	4613      	mov	r3, r2
  402a78:	005b      	lsls	r3, r3, #1
  402a7a:	4413      	add	r3, r2
  402a7c:	4a21      	ldr	r2, [pc, #132]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402a7e:	6013      	str	r3, [r2, #0]
          break;
  402a80:	e000      	b.n	402a84 <SystemCoreClockUpdate+0xd8>
          break;
  402a82:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402a84:	4b1d      	ldr	r3, [pc, #116]	; (402afc <SystemCoreClockUpdate+0x150>)
  402a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a88:	f003 0303 	and.w	r3, r3, #3
  402a8c:	2b02      	cmp	r3, #2
  402a8e:	d114      	bne.n	402aba <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402a90:	4b1a      	ldr	r3, [pc, #104]	; (402afc <SystemCoreClockUpdate+0x150>)
  402a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402a94:	0c1b      	lsrs	r3, r3, #16
  402a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402a9a:	3301      	adds	r3, #1
  402a9c:	4a19      	ldr	r2, [pc, #100]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402a9e:	6812      	ldr	r2, [r2, #0]
  402aa0:	fb02 f303 	mul.w	r3, r2, r3
  402aa4:	4a17      	ldr	r2, [pc, #92]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402aa6:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402aa8:	4b14      	ldr	r3, [pc, #80]	; (402afc <SystemCoreClockUpdate+0x150>)
  402aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402aac:	b2db      	uxtb	r3, r3
  402aae:	4a15      	ldr	r2, [pc, #84]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402ab0:	6812      	ldr	r2, [r2, #0]
  402ab2:	fbb2 f3f3 	udiv	r3, r2, r3
  402ab6:	4a13      	ldr	r2, [pc, #76]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402ab8:	6013      	str	r3, [r2, #0]
    break;
  402aba:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402abc:	4b0f      	ldr	r3, [pc, #60]	; (402afc <SystemCoreClockUpdate+0x150>)
  402abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ac0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402ac4:	2b70      	cmp	r3, #112	; 0x70
  402ac6:	d108      	bne.n	402ada <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  402ac8:	4b0e      	ldr	r3, [pc, #56]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402aca:	681b      	ldr	r3, [r3, #0]
  402acc:	4a10      	ldr	r2, [pc, #64]	; (402b10 <SystemCoreClockUpdate+0x164>)
  402ace:	fba2 2303 	umull	r2, r3, r2, r3
  402ad2:	085b      	lsrs	r3, r3, #1
  402ad4:	4a0b      	ldr	r2, [pc, #44]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402ad6:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  402ad8:	e00a      	b.n	402af0 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402ada:	4b08      	ldr	r3, [pc, #32]	; (402afc <SystemCoreClockUpdate+0x150>)
  402adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ade:	091b      	lsrs	r3, r3, #4
  402ae0:	f003 0307 	and.w	r3, r3, #7
  402ae4:	4a07      	ldr	r2, [pc, #28]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402ae6:	6812      	ldr	r2, [r2, #0]
  402ae8:	fa22 f303 	lsr.w	r3, r2, r3
  402aec:	4a05      	ldr	r2, [pc, #20]	; (402b04 <SystemCoreClockUpdate+0x158>)
  402aee:	6013      	str	r3, [r2, #0]
}
  402af0:	bf00      	nop
  402af2:	46bd      	mov	sp, r7
  402af4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402af8:	4770      	bx	lr
  402afa:	bf00      	nop
  402afc:	400e0600 	.word	0x400e0600
  402b00:	400e1810 	.word	0x400e1810
  402b04:	20400004 	.word	0x20400004
  402b08:	00b71b00 	.word	0x00b71b00
  402b0c:	003d0900 	.word	0x003d0900
  402b10:	aaaaaaab 	.word	0xaaaaaaab

00402b14 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402b14:	b480      	push	{r7}
  402b16:	b083      	sub	sp, #12
  402b18:	af00      	add	r7, sp, #0
  402b1a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402b1c:	687b      	ldr	r3, [r7, #4]
  402b1e:	4a1d      	ldr	r2, [pc, #116]	; (402b94 <system_init_flash+0x80>)
  402b20:	4293      	cmp	r3, r2
  402b22:	d804      	bhi.n	402b2e <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402b24:	4b1c      	ldr	r3, [pc, #112]	; (402b98 <system_init_flash+0x84>)
  402b26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402b2a:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  402b2c:	e02b      	b.n	402b86 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  402b2e:	687b      	ldr	r3, [r7, #4]
  402b30:	4a1a      	ldr	r2, [pc, #104]	; (402b9c <system_init_flash+0x88>)
  402b32:	4293      	cmp	r3, r2
  402b34:	d803      	bhi.n	402b3e <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402b36:	4b18      	ldr	r3, [pc, #96]	; (402b98 <system_init_flash+0x84>)
  402b38:	4a19      	ldr	r2, [pc, #100]	; (402ba0 <system_init_flash+0x8c>)
  402b3a:	601a      	str	r2, [r3, #0]
}
  402b3c:	e023      	b.n	402b86 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  402b3e:	687b      	ldr	r3, [r7, #4]
  402b40:	4a18      	ldr	r2, [pc, #96]	; (402ba4 <system_init_flash+0x90>)
  402b42:	4293      	cmp	r3, r2
  402b44:	d803      	bhi.n	402b4e <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402b46:	4b14      	ldr	r3, [pc, #80]	; (402b98 <system_init_flash+0x84>)
  402b48:	4a17      	ldr	r2, [pc, #92]	; (402ba8 <system_init_flash+0x94>)
  402b4a:	601a      	str	r2, [r3, #0]
}
  402b4c:	e01b      	b.n	402b86 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402b4e:	687b      	ldr	r3, [r7, #4]
  402b50:	4a16      	ldr	r2, [pc, #88]	; (402bac <system_init_flash+0x98>)
  402b52:	4293      	cmp	r3, r2
  402b54:	d803      	bhi.n	402b5e <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402b56:	4b10      	ldr	r3, [pc, #64]	; (402b98 <system_init_flash+0x84>)
  402b58:	4a15      	ldr	r2, [pc, #84]	; (402bb0 <system_init_flash+0x9c>)
  402b5a:	601a      	str	r2, [r3, #0]
}
  402b5c:	e013      	b.n	402b86 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402b5e:	687b      	ldr	r3, [r7, #4]
  402b60:	4a14      	ldr	r2, [pc, #80]	; (402bb4 <system_init_flash+0xa0>)
  402b62:	4293      	cmp	r3, r2
  402b64:	d804      	bhi.n	402b70 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402b66:	4b0c      	ldr	r3, [pc, #48]	; (402b98 <system_init_flash+0x84>)
  402b68:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402b6c:	601a      	str	r2, [r3, #0]
}
  402b6e:	e00a      	b.n	402b86 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402b70:	687b      	ldr	r3, [r7, #4]
  402b72:	4a11      	ldr	r2, [pc, #68]	; (402bb8 <system_init_flash+0xa4>)
  402b74:	4293      	cmp	r3, r2
  402b76:	d803      	bhi.n	402b80 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402b78:	4b07      	ldr	r3, [pc, #28]	; (402b98 <system_init_flash+0x84>)
  402b7a:	4a10      	ldr	r2, [pc, #64]	; (402bbc <system_init_flash+0xa8>)
  402b7c:	601a      	str	r2, [r3, #0]
}
  402b7e:	e002      	b.n	402b86 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402b80:	4b05      	ldr	r3, [pc, #20]	; (402b98 <system_init_flash+0x84>)
  402b82:	4a0f      	ldr	r2, [pc, #60]	; (402bc0 <system_init_flash+0xac>)
  402b84:	601a      	str	r2, [r3, #0]
}
  402b86:	bf00      	nop
  402b88:	370c      	adds	r7, #12
  402b8a:	46bd      	mov	sp, r7
  402b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b90:	4770      	bx	lr
  402b92:	bf00      	nop
  402b94:	015ef3bf 	.word	0x015ef3bf
  402b98:	400e0c00 	.word	0x400e0c00
  402b9c:	02bde77f 	.word	0x02bde77f
  402ba0:	04000100 	.word	0x04000100
  402ba4:	041cdb3f 	.word	0x041cdb3f
  402ba8:	04000200 	.word	0x04000200
  402bac:	057bceff 	.word	0x057bceff
  402bb0:	04000300 	.word	0x04000300
  402bb4:	06dac2bf 	.word	0x06dac2bf
  402bb8:	0839b67f 	.word	0x0839b67f
  402bbc:	04000500 	.word	0x04000500
  402bc0:	04000600 	.word	0x04000600

00402bc4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402bc4:	b480      	push	{r7}
  402bc6:	b085      	sub	sp, #20
  402bc8:	af00      	add	r7, sp, #0
  402bca:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402bcc:	4b10      	ldr	r3, [pc, #64]	; (402c10 <_sbrk+0x4c>)
  402bce:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402bd0:	4b10      	ldr	r3, [pc, #64]	; (402c14 <_sbrk+0x50>)
  402bd2:	681b      	ldr	r3, [r3, #0]
  402bd4:	2b00      	cmp	r3, #0
  402bd6:	d102      	bne.n	402bde <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402bd8:	4b0e      	ldr	r3, [pc, #56]	; (402c14 <_sbrk+0x50>)
  402bda:	4a0f      	ldr	r2, [pc, #60]	; (402c18 <_sbrk+0x54>)
  402bdc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402bde:	4b0d      	ldr	r3, [pc, #52]	; (402c14 <_sbrk+0x50>)
  402be0:	681b      	ldr	r3, [r3, #0]
  402be2:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402be4:	68ba      	ldr	r2, [r7, #8]
  402be6:	687b      	ldr	r3, [r7, #4]
  402be8:	441a      	add	r2, r3
  402bea:	68fb      	ldr	r3, [r7, #12]
  402bec:	429a      	cmp	r2, r3
  402bee:	dd02      	ble.n	402bf6 <_sbrk+0x32>
		return (caddr_t) -1;	
  402bf0:	f04f 33ff 	mov.w	r3, #4294967295
  402bf4:	e006      	b.n	402c04 <_sbrk+0x40>
	}

	heap += incr;
  402bf6:	4b07      	ldr	r3, [pc, #28]	; (402c14 <_sbrk+0x50>)
  402bf8:	681a      	ldr	r2, [r3, #0]
  402bfa:	687b      	ldr	r3, [r7, #4]
  402bfc:	4413      	add	r3, r2
  402bfe:	4a05      	ldr	r2, [pc, #20]	; (402c14 <_sbrk+0x50>)
  402c00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402c02:	68bb      	ldr	r3, [r7, #8]
}
  402c04:	4618      	mov	r0, r3
  402c06:	3714      	adds	r7, #20
  402c08:	46bd      	mov	sp, r7
  402c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c0e:	4770      	bx	lr
  402c10:	2045fffc 	.word	0x2045fffc
  402c14:	20400e08 	.word	0x20400e08
  402c18:	20403090 	.word	0x20403090

00402c1c <__aeabi_drsub>:
  402c1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402c20:	e002      	b.n	402c28 <__adddf3>
  402c22:	bf00      	nop

00402c24 <__aeabi_dsub>:
  402c24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402c28 <__adddf3>:
  402c28:	b530      	push	{r4, r5, lr}
  402c2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402c2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402c32:	ea94 0f05 	teq	r4, r5
  402c36:	bf08      	it	eq
  402c38:	ea90 0f02 	teqeq	r0, r2
  402c3c:	bf1f      	itttt	ne
  402c3e:	ea54 0c00 	orrsne.w	ip, r4, r0
  402c42:	ea55 0c02 	orrsne.w	ip, r5, r2
  402c46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402c4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402c4e:	f000 80e2 	beq.w	402e16 <__adddf3+0x1ee>
  402c52:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402c56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402c5a:	bfb8      	it	lt
  402c5c:	426d      	neglt	r5, r5
  402c5e:	dd0c      	ble.n	402c7a <__adddf3+0x52>
  402c60:	442c      	add	r4, r5
  402c62:	ea80 0202 	eor.w	r2, r0, r2
  402c66:	ea81 0303 	eor.w	r3, r1, r3
  402c6a:	ea82 0000 	eor.w	r0, r2, r0
  402c6e:	ea83 0101 	eor.w	r1, r3, r1
  402c72:	ea80 0202 	eor.w	r2, r0, r2
  402c76:	ea81 0303 	eor.w	r3, r1, r3
  402c7a:	2d36      	cmp	r5, #54	; 0x36
  402c7c:	bf88      	it	hi
  402c7e:	bd30      	pophi	{r4, r5, pc}
  402c80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402c84:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402c88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402c8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402c90:	d002      	beq.n	402c98 <__adddf3+0x70>
  402c92:	4240      	negs	r0, r0
  402c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402c98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402c9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402ca0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402ca4:	d002      	beq.n	402cac <__adddf3+0x84>
  402ca6:	4252      	negs	r2, r2
  402ca8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402cac:	ea94 0f05 	teq	r4, r5
  402cb0:	f000 80a7 	beq.w	402e02 <__adddf3+0x1da>
  402cb4:	f1a4 0401 	sub.w	r4, r4, #1
  402cb8:	f1d5 0e20 	rsbs	lr, r5, #32
  402cbc:	db0d      	blt.n	402cda <__adddf3+0xb2>
  402cbe:	fa02 fc0e 	lsl.w	ip, r2, lr
  402cc2:	fa22 f205 	lsr.w	r2, r2, r5
  402cc6:	1880      	adds	r0, r0, r2
  402cc8:	f141 0100 	adc.w	r1, r1, #0
  402ccc:	fa03 f20e 	lsl.w	r2, r3, lr
  402cd0:	1880      	adds	r0, r0, r2
  402cd2:	fa43 f305 	asr.w	r3, r3, r5
  402cd6:	4159      	adcs	r1, r3
  402cd8:	e00e      	b.n	402cf8 <__adddf3+0xd0>
  402cda:	f1a5 0520 	sub.w	r5, r5, #32
  402cde:	f10e 0e20 	add.w	lr, lr, #32
  402ce2:	2a01      	cmp	r2, #1
  402ce4:	fa03 fc0e 	lsl.w	ip, r3, lr
  402ce8:	bf28      	it	cs
  402cea:	f04c 0c02 	orrcs.w	ip, ip, #2
  402cee:	fa43 f305 	asr.w	r3, r3, r5
  402cf2:	18c0      	adds	r0, r0, r3
  402cf4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402cf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402cfc:	d507      	bpl.n	402d0e <__adddf3+0xe6>
  402cfe:	f04f 0e00 	mov.w	lr, #0
  402d02:	f1dc 0c00 	rsbs	ip, ip, #0
  402d06:	eb7e 0000 	sbcs.w	r0, lr, r0
  402d0a:	eb6e 0101 	sbc.w	r1, lr, r1
  402d0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402d12:	d31b      	bcc.n	402d4c <__adddf3+0x124>
  402d14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402d18:	d30c      	bcc.n	402d34 <__adddf3+0x10c>
  402d1a:	0849      	lsrs	r1, r1, #1
  402d1c:	ea5f 0030 	movs.w	r0, r0, rrx
  402d20:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402d24:	f104 0401 	add.w	r4, r4, #1
  402d28:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402d2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402d30:	f080 809a 	bcs.w	402e68 <__adddf3+0x240>
  402d34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402d38:	bf08      	it	eq
  402d3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402d3e:	f150 0000 	adcs.w	r0, r0, #0
  402d42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402d46:	ea41 0105 	orr.w	r1, r1, r5
  402d4a:	bd30      	pop	{r4, r5, pc}
  402d4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402d50:	4140      	adcs	r0, r0
  402d52:	eb41 0101 	adc.w	r1, r1, r1
  402d56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402d5a:	f1a4 0401 	sub.w	r4, r4, #1
  402d5e:	d1e9      	bne.n	402d34 <__adddf3+0x10c>
  402d60:	f091 0f00 	teq	r1, #0
  402d64:	bf04      	itt	eq
  402d66:	4601      	moveq	r1, r0
  402d68:	2000      	moveq	r0, #0
  402d6a:	fab1 f381 	clz	r3, r1
  402d6e:	bf08      	it	eq
  402d70:	3320      	addeq	r3, #32
  402d72:	f1a3 030b 	sub.w	r3, r3, #11
  402d76:	f1b3 0220 	subs.w	r2, r3, #32
  402d7a:	da0c      	bge.n	402d96 <__adddf3+0x16e>
  402d7c:	320c      	adds	r2, #12
  402d7e:	dd08      	ble.n	402d92 <__adddf3+0x16a>
  402d80:	f102 0c14 	add.w	ip, r2, #20
  402d84:	f1c2 020c 	rsb	r2, r2, #12
  402d88:	fa01 f00c 	lsl.w	r0, r1, ip
  402d8c:	fa21 f102 	lsr.w	r1, r1, r2
  402d90:	e00c      	b.n	402dac <__adddf3+0x184>
  402d92:	f102 0214 	add.w	r2, r2, #20
  402d96:	bfd8      	it	le
  402d98:	f1c2 0c20 	rsble	ip, r2, #32
  402d9c:	fa01 f102 	lsl.w	r1, r1, r2
  402da0:	fa20 fc0c 	lsr.w	ip, r0, ip
  402da4:	bfdc      	itt	le
  402da6:	ea41 010c 	orrle.w	r1, r1, ip
  402daa:	4090      	lslle	r0, r2
  402dac:	1ae4      	subs	r4, r4, r3
  402dae:	bfa2      	ittt	ge
  402db0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402db4:	4329      	orrge	r1, r5
  402db6:	bd30      	popge	{r4, r5, pc}
  402db8:	ea6f 0404 	mvn.w	r4, r4
  402dbc:	3c1f      	subs	r4, #31
  402dbe:	da1c      	bge.n	402dfa <__adddf3+0x1d2>
  402dc0:	340c      	adds	r4, #12
  402dc2:	dc0e      	bgt.n	402de2 <__adddf3+0x1ba>
  402dc4:	f104 0414 	add.w	r4, r4, #20
  402dc8:	f1c4 0220 	rsb	r2, r4, #32
  402dcc:	fa20 f004 	lsr.w	r0, r0, r4
  402dd0:	fa01 f302 	lsl.w	r3, r1, r2
  402dd4:	ea40 0003 	orr.w	r0, r0, r3
  402dd8:	fa21 f304 	lsr.w	r3, r1, r4
  402ddc:	ea45 0103 	orr.w	r1, r5, r3
  402de0:	bd30      	pop	{r4, r5, pc}
  402de2:	f1c4 040c 	rsb	r4, r4, #12
  402de6:	f1c4 0220 	rsb	r2, r4, #32
  402dea:	fa20 f002 	lsr.w	r0, r0, r2
  402dee:	fa01 f304 	lsl.w	r3, r1, r4
  402df2:	ea40 0003 	orr.w	r0, r0, r3
  402df6:	4629      	mov	r1, r5
  402df8:	bd30      	pop	{r4, r5, pc}
  402dfa:	fa21 f004 	lsr.w	r0, r1, r4
  402dfe:	4629      	mov	r1, r5
  402e00:	bd30      	pop	{r4, r5, pc}
  402e02:	f094 0f00 	teq	r4, #0
  402e06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402e0a:	bf06      	itte	eq
  402e0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402e10:	3401      	addeq	r4, #1
  402e12:	3d01      	subne	r5, #1
  402e14:	e74e      	b.n	402cb4 <__adddf3+0x8c>
  402e16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402e1a:	bf18      	it	ne
  402e1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402e20:	d029      	beq.n	402e76 <__adddf3+0x24e>
  402e22:	ea94 0f05 	teq	r4, r5
  402e26:	bf08      	it	eq
  402e28:	ea90 0f02 	teqeq	r0, r2
  402e2c:	d005      	beq.n	402e3a <__adddf3+0x212>
  402e2e:	ea54 0c00 	orrs.w	ip, r4, r0
  402e32:	bf04      	itt	eq
  402e34:	4619      	moveq	r1, r3
  402e36:	4610      	moveq	r0, r2
  402e38:	bd30      	pop	{r4, r5, pc}
  402e3a:	ea91 0f03 	teq	r1, r3
  402e3e:	bf1e      	ittt	ne
  402e40:	2100      	movne	r1, #0
  402e42:	2000      	movne	r0, #0
  402e44:	bd30      	popne	{r4, r5, pc}
  402e46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402e4a:	d105      	bne.n	402e58 <__adddf3+0x230>
  402e4c:	0040      	lsls	r0, r0, #1
  402e4e:	4149      	adcs	r1, r1
  402e50:	bf28      	it	cs
  402e52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402e56:	bd30      	pop	{r4, r5, pc}
  402e58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402e5c:	bf3c      	itt	cc
  402e5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402e62:	bd30      	popcc	{r4, r5, pc}
  402e64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402e68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402e6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402e70:	f04f 0000 	mov.w	r0, #0
  402e74:	bd30      	pop	{r4, r5, pc}
  402e76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402e7a:	bf1a      	itte	ne
  402e7c:	4619      	movne	r1, r3
  402e7e:	4610      	movne	r0, r2
  402e80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402e84:	bf1c      	itt	ne
  402e86:	460b      	movne	r3, r1
  402e88:	4602      	movne	r2, r0
  402e8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402e8e:	bf06      	itte	eq
  402e90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402e94:	ea91 0f03 	teqeq	r1, r3
  402e98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402e9c:	bd30      	pop	{r4, r5, pc}
  402e9e:	bf00      	nop

00402ea0 <__aeabi_ui2d>:
  402ea0:	f090 0f00 	teq	r0, #0
  402ea4:	bf04      	itt	eq
  402ea6:	2100      	moveq	r1, #0
  402ea8:	4770      	bxeq	lr
  402eaa:	b530      	push	{r4, r5, lr}
  402eac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402eb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402eb4:	f04f 0500 	mov.w	r5, #0
  402eb8:	f04f 0100 	mov.w	r1, #0
  402ebc:	e750      	b.n	402d60 <__adddf3+0x138>
  402ebe:	bf00      	nop

00402ec0 <__aeabi_i2d>:
  402ec0:	f090 0f00 	teq	r0, #0
  402ec4:	bf04      	itt	eq
  402ec6:	2100      	moveq	r1, #0
  402ec8:	4770      	bxeq	lr
  402eca:	b530      	push	{r4, r5, lr}
  402ecc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402ed0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402ed4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402ed8:	bf48      	it	mi
  402eda:	4240      	negmi	r0, r0
  402edc:	f04f 0100 	mov.w	r1, #0
  402ee0:	e73e      	b.n	402d60 <__adddf3+0x138>
  402ee2:	bf00      	nop

00402ee4 <__aeabi_f2d>:
  402ee4:	0042      	lsls	r2, r0, #1
  402ee6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402eea:	ea4f 0131 	mov.w	r1, r1, rrx
  402eee:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402ef2:	bf1f      	itttt	ne
  402ef4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402ef8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402efc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402f00:	4770      	bxne	lr
  402f02:	f092 0f00 	teq	r2, #0
  402f06:	bf14      	ite	ne
  402f08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402f0c:	4770      	bxeq	lr
  402f0e:	b530      	push	{r4, r5, lr}
  402f10:	f44f 7460 	mov.w	r4, #896	; 0x380
  402f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402f18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402f1c:	e720      	b.n	402d60 <__adddf3+0x138>
  402f1e:	bf00      	nop

00402f20 <__aeabi_ul2d>:
  402f20:	ea50 0201 	orrs.w	r2, r0, r1
  402f24:	bf08      	it	eq
  402f26:	4770      	bxeq	lr
  402f28:	b530      	push	{r4, r5, lr}
  402f2a:	f04f 0500 	mov.w	r5, #0
  402f2e:	e00a      	b.n	402f46 <__aeabi_l2d+0x16>

00402f30 <__aeabi_l2d>:
  402f30:	ea50 0201 	orrs.w	r2, r0, r1
  402f34:	bf08      	it	eq
  402f36:	4770      	bxeq	lr
  402f38:	b530      	push	{r4, r5, lr}
  402f3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402f3e:	d502      	bpl.n	402f46 <__aeabi_l2d+0x16>
  402f40:	4240      	negs	r0, r0
  402f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402f46:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402f4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402f4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402f52:	f43f aedc 	beq.w	402d0e <__adddf3+0xe6>
  402f56:	f04f 0203 	mov.w	r2, #3
  402f5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402f5e:	bf18      	it	ne
  402f60:	3203      	addne	r2, #3
  402f62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402f66:	bf18      	it	ne
  402f68:	3203      	addne	r2, #3
  402f6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402f6e:	f1c2 0320 	rsb	r3, r2, #32
  402f72:	fa00 fc03 	lsl.w	ip, r0, r3
  402f76:	fa20 f002 	lsr.w	r0, r0, r2
  402f7a:	fa01 fe03 	lsl.w	lr, r1, r3
  402f7e:	ea40 000e 	orr.w	r0, r0, lr
  402f82:	fa21 f102 	lsr.w	r1, r1, r2
  402f86:	4414      	add	r4, r2
  402f88:	e6c1      	b.n	402d0e <__adddf3+0xe6>
  402f8a:	bf00      	nop

00402f8c <__aeabi_dmul>:
  402f8c:	b570      	push	{r4, r5, r6, lr}
  402f8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402f92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402f96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402f9a:	bf1d      	ittte	ne
  402f9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402fa0:	ea94 0f0c 	teqne	r4, ip
  402fa4:	ea95 0f0c 	teqne	r5, ip
  402fa8:	f000 f8de 	bleq	403168 <__aeabi_dmul+0x1dc>
  402fac:	442c      	add	r4, r5
  402fae:	ea81 0603 	eor.w	r6, r1, r3
  402fb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402fb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402fba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402fbe:	bf18      	it	ne
  402fc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402fc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402fcc:	d038      	beq.n	403040 <__aeabi_dmul+0xb4>
  402fce:	fba0 ce02 	umull	ip, lr, r0, r2
  402fd2:	f04f 0500 	mov.w	r5, #0
  402fd6:	fbe1 e502 	umlal	lr, r5, r1, r2
  402fda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402fde:	fbe0 e503 	umlal	lr, r5, r0, r3
  402fe2:	f04f 0600 	mov.w	r6, #0
  402fe6:	fbe1 5603 	umlal	r5, r6, r1, r3
  402fea:	f09c 0f00 	teq	ip, #0
  402fee:	bf18      	it	ne
  402ff0:	f04e 0e01 	orrne.w	lr, lr, #1
  402ff4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402ff8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402ffc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403000:	d204      	bcs.n	40300c <__aeabi_dmul+0x80>
  403002:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403006:	416d      	adcs	r5, r5
  403008:	eb46 0606 	adc.w	r6, r6, r6
  40300c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403010:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403014:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403018:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40301c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403020:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403024:	bf88      	it	hi
  403026:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40302a:	d81e      	bhi.n	40306a <__aeabi_dmul+0xde>
  40302c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403030:	bf08      	it	eq
  403032:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403036:	f150 0000 	adcs.w	r0, r0, #0
  40303a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40303e:	bd70      	pop	{r4, r5, r6, pc}
  403040:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403044:	ea46 0101 	orr.w	r1, r6, r1
  403048:	ea40 0002 	orr.w	r0, r0, r2
  40304c:	ea81 0103 	eor.w	r1, r1, r3
  403050:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403054:	bfc2      	ittt	gt
  403056:	ebd4 050c 	rsbsgt	r5, r4, ip
  40305a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40305e:	bd70      	popgt	{r4, r5, r6, pc}
  403060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403064:	f04f 0e00 	mov.w	lr, #0
  403068:	3c01      	subs	r4, #1
  40306a:	f300 80ab 	bgt.w	4031c4 <__aeabi_dmul+0x238>
  40306e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403072:	bfde      	ittt	le
  403074:	2000      	movle	r0, #0
  403076:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40307a:	bd70      	pople	{r4, r5, r6, pc}
  40307c:	f1c4 0400 	rsb	r4, r4, #0
  403080:	3c20      	subs	r4, #32
  403082:	da35      	bge.n	4030f0 <__aeabi_dmul+0x164>
  403084:	340c      	adds	r4, #12
  403086:	dc1b      	bgt.n	4030c0 <__aeabi_dmul+0x134>
  403088:	f104 0414 	add.w	r4, r4, #20
  40308c:	f1c4 0520 	rsb	r5, r4, #32
  403090:	fa00 f305 	lsl.w	r3, r0, r5
  403094:	fa20 f004 	lsr.w	r0, r0, r4
  403098:	fa01 f205 	lsl.w	r2, r1, r5
  40309c:	ea40 0002 	orr.w	r0, r0, r2
  4030a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4030a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4030a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4030ac:	fa21 f604 	lsr.w	r6, r1, r4
  4030b0:	eb42 0106 	adc.w	r1, r2, r6
  4030b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4030b8:	bf08      	it	eq
  4030ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4030be:	bd70      	pop	{r4, r5, r6, pc}
  4030c0:	f1c4 040c 	rsb	r4, r4, #12
  4030c4:	f1c4 0520 	rsb	r5, r4, #32
  4030c8:	fa00 f304 	lsl.w	r3, r0, r4
  4030cc:	fa20 f005 	lsr.w	r0, r0, r5
  4030d0:	fa01 f204 	lsl.w	r2, r1, r4
  4030d4:	ea40 0002 	orr.w	r0, r0, r2
  4030d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4030dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4030e0:	f141 0100 	adc.w	r1, r1, #0
  4030e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4030e8:	bf08      	it	eq
  4030ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4030ee:	bd70      	pop	{r4, r5, r6, pc}
  4030f0:	f1c4 0520 	rsb	r5, r4, #32
  4030f4:	fa00 f205 	lsl.w	r2, r0, r5
  4030f8:	ea4e 0e02 	orr.w	lr, lr, r2
  4030fc:	fa20 f304 	lsr.w	r3, r0, r4
  403100:	fa01 f205 	lsl.w	r2, r1, r5
  403104:	ea43 0302 	orr.w	r3, r3, r2
  403108:	fa21 f004 	lsr.w	r0, r1, r4
  40310c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403110:	fa21 f204 	lsr.w	r2, r1, r4
  403114:	ea20 0002 	bic.w	r0, r0, r2
  403118:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40311c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403120:	bf08      	it	eq
  403122:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403126:	bd70      	pop	{r4, r5, r6, pc}
  403128:	f094 0f00 	teq	r4, #0
  40312c:	d10f      	bne.n	40314e <__aeabi_dmul+0x1c2>
  40312e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403132:	0040      	lsls	r0, r0, #1
  403134:	eb41 0101 	adc.w	r1, r1, r1
  403138:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40313c:	bf08      	it	eq
  40313e:	3c01      	subeq	r4, #1
  403140:	d0f7      	beq.n	403132 <__aeabi_dmul+0x1a6>
  403142:	ea41 0106 	orr.w	r1, r1, r6
  403146:	f095 0f00 	teq	r5, #0
  40314a:	bf18      	it	ne
  40314c:	4770      	bxne	lr
  40314e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403152:	0052      	lsls	r2, r2, #1
  403154:	eb43 0303 	adc.w	r3, r3, r3
  403158:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40315c:	bf08      	it	eq
  40315e:	3d01      	subeq	r5, #1
  403160:	d0f7      	beq.n	403152 <__aeabi_dmul+0x1c6>
  403162:	ea43 0306 	orr.w	r3, r3, r6
  403166:	4770      	bx	lr
  403168:	ea94 0f0c 	teq	r4, ip
  40316c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403170:	bf18      	it	ne
  403172:	ea95 0f0c 	teqne	r5, ip
  403176:	d00c      	beq.n	403192 <__aeabi_dmul+0x206>
  403178:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40317c:	bf18      	it	ne
  40317e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403182:	d1d1      	bne.n	403128 <__aeabi_dmul+0x19c>
  403184:	ea81 0103 	eor.w	r1, r1, r3
  403188:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40318c:	f04f 0000 	mov.w	r0, #0
  403190:	bd70      	pop	{r4, r5, r6, pc}
  403192:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403196:	bf06      	itte	eq
  403198:	4610      	moveq	r0, r2
  40319a:	4619      	moveq	r1, r3
  40319c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4031a0:	d019      	beq.n	4031d6 <__aeabi_dmul+0x24a>
  4031a2:	ea94 0f0c 	teq	r4, ip
  4031a6:	d102      	bne.n	4031ae <__aeabi_dmul+0x222>
  4031a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4031ac:	d113      	bne.n	4031d6 <__aeabi_dmul+0x24a>
  4031ae:	ea95 0f0c 	teq	r5, ip
  4031b2:	d105      	bne.n	4031c0 <__aeabi_dmul+0x234>
  4031b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4031b8:	bf1c      	itt	ne
  4031ba:	4610      	movne	r0, r2
  4031bc:	4619      	movne	r1, r3
  4031be:	d10a      	bne.n	4031d6 <__aeabi_dmul+0x24a>
  4031c0:	ea81 0103 	eor.w	r1, r1, r3
  4031c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4031c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4031cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4031d0:	f04f 0000 	mov.w	r0, #0
  4031d4:	bd70      	pop	{r4, r5, r6, pc}
  4031d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4031da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4031de:	bd70      	pop	{r4, r5, r6, pc}

004031e0 <__aeabi_ddiv>:
  4031e0:	b570      	push	{r4, r5, r6, lr}
  4031e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4031e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4031ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4031ee:	bf1d      	ittte	ne
  4031f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4031f4:	ea94 0f0c 	teqne	r4, ip
  4031f8:	ea95 0f0c 	teqne	r5, ip
  4031fc:	f000 f8a7 	bleq	40334e <__aeabi_ddiv+0x16e>
  403200:	eba4 0405 	sub.w	r4, r4, r5
  403204:	ea81 0e03 	eor.w	lr, r1, r3
  403208:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40320c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403210:	f000 8088 	beq.w	403324 <__aeabi_ddiv+0x144>
  403214:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403218:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40321c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403220:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403224:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403228:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40322c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403230:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403234:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403238:	429d      	cmp	r5, r3
  40323a:	bf08      	it	eq
  40323c:	4296      	cmpeq	r6, r2
  40323e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403242:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403246:	d202      	bcs.n	40324e <__aeabi_ddiv+0x6e>
  403248:	085b      	lsrs	r3, r3, #1
  40324a:	ea4f 0232 	mov.w	r2, r2, rrx
  40324e:	1ab6      	subs	r6, r6, r2
  403250:	eb65 0503 	sbc.w	r5, r5, r3
  403254:	085b      	lsrs	r3, r3, #1
  403256:	ea4f 0232 	mov.w	r2, r2, rrx
  40325a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40325e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403262:	ebb6 0e02 	subs.w	lr, r6, r2
  403266:	eb75 0e03 	sbcs.w	lr, r5, r3
  40326a:	bf22      	ittt	cs
  40326c:	1ab6      	subcs	r6, r6, r2
  40326e:	4675      	movcs	r5, lr
  403270:	ea40 000c 	orrcs.w	r0, r0, ip
  403274:	085b      	lsrs	r3, r3, #1
  403276:	ea4f 0232 	mov.w	r2, r2, rrx
  40327a:	ebb6 0e02 	subs.w	lr, r6, r2
  40327e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403282:	bf22      	ittt	cs
  403284:	1ab6      	subcs	r6, r6, r2
  403286:	4675      	movcs	r5, lr
  403288:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40328c:	085b      	lsrs	r3, r3, #1
  40328e:	ea4f 0232 	mov.w	r2, r2, rrx
  403292:	ebb6 0e02 	subs.w	lr, r6, r2
  403296:	eb75 0e03 	sbcs.w	lr, r5, r3
  40329a:	bf22      	ittt	cs
  40329c:	1ab6      	subcs	r6, r6, r2
  40329e:	4675      	movcs	r5, lr
  4032a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4032a4:	085b      	lsrs	r3, r3, #1
  4032a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4032aa:	ebb6 0e02 	subs.w	lr, r6, r2
  4032ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  4032b2:	bf22      	ittt	cs
  4032b4:	1ab6      	subcs	r6, r6, r2
  4032b6:	4675      	movcs	r5, lr
  4032b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4032bc:	ea55 0e06 	orrs.w	lr, r5, r6
  4032c0:	d018      	beq.n	4032f4 <__aeabi_ddiv+0x114>
  4032c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4032c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4032ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4032ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4032d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4032d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4032da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4032de:	d1c0      	bne.n	403262 <__aeabi_ddiv+0x82>
  4032e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4032e4:	d10b      	bne.n	4032fe <__aeabi_ddiv+0x11e>
  4032e6:	ea41 0100 	orr.w	r1, r1, r0
  4032ea:	f04f 0000 	mov.w	r0, #0
  4032ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4032f2:	e7b6      	b.n	403262 <__aeabi_ddiv+0x82>
  4032f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4032f8:	bf04      	itt	eq
  4032fa:	4301      	orreq	r1, r0
  4032fc:	2000      	moveq	r0, #0
  4032fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403302:	bf88      	it	hi
  403304:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403308:	f63f aeaf 	bhi.w	40306a <__aeabi_dmul+0xde>
  40330c:	ebb5 0c03 	subs.w	ip, r5, r3
  403310:	bf04      	itt	eq
  403312:	ebb6 0c02 	subseq.w	ip, r6, r2
  403316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40331a:	f150 0000 	adcs.w	r0, r0, #0
  40331e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403322:	bd70      	pop	{r4, r5, r6, pc}
  403324:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403328:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40332c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403330:	bfc2      	ittt	gt
  403332:	ebd4 050c 	rsbsgt	r5, r4, ip
  403336:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40333a:	bd70      	popgt	{r4, r5, r6, pc}
  40333c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403340:	f04f 0e00 	mov.w	lr, #0
  403344:	3c01      	subs	r4, #1
  403346:	e690      	b.n	40306a <__aeabi_dmul+0xde>
  403348:	ea45 0e06 	orr.w	lr, r5, r6
  40334c:	e68d      	b.n	40306a <__aeabi_dmul+0xde>
  40334e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403352:	ea94 0f0c 	teq	r4, ip
  403356:	bf08      	it	eq
  403358:	ea95 0f0c 	teqeq	r5, ip
  40335c:	f43f af3b 	beq.w	4031d6 <__aeabi_dmul+0x24a>
  403360:	ea94 0f0c 	teq	r4, ip
  403364:	d10a      	bne.n	40337c <__aeabi_ddiv+0x19c>
  403366:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40336a:	f47f af34 	bne.w	4031d6 <__aeabi_dmul+0x24a>
  40336e:	ea95 0f0c 	teq	r5, ip
  403372:	f47f af25 	bne.w	4031c0 <__aeabi_dmul+0x234>
  403376:	4610      	mov	r0, r2
  403378:	4619      	mov	r1, r3
  40337a:	e72c      	b.n	4031d6 <__aeabi_dmul+0x24a>
  40337c:	ea95 0f0c 	teq	r5, ip
  403380:	d106      	bne.n	403390 <__aeabi_ddiv+0x1b0>
  403382:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403386:	f43f aefd 	beq.w	403184 <__aeabi_dmul+0x1f8>
  40338a:	4610      	mov	r0, r2
  40338c:	4619      	mov	r1, r3
  40338e:	e722      	b.n	4031d6 <__aeabi_dmul+0x24a>
  403390:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403394:	bf18      	it	ne
  403396:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40339a:	f47f aec5 	bne.w	403128 <__aeabi_dmul+0x19c>
  40339e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4033a2:	f47f af0d 	bne.w	4031c0 <__aeabi_dmul+0x234>
  4033a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4033aa:	f47f aeeb 	bne.w	403184 <__aeabi_dmul+0x1f8>
  4033ae:	e712      	b.n	4031d6 <__aeabi_dmul+0x24a>

004033b0 <__aeabi_d2iz>:
  4033b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4033b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4033b8:	d215      	bcs.n	4033e6 <__aeabi_d2iz+0x36>
  4033ba:	d511      	bpl.n	4033e0 <__aeabi_d2iz+0x30>
  4033bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4033c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4033c4:	d912      	bls.n	4033ec <__aeabi_d2iz+0x3c>
  4033c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4033ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4033ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4033d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4033d6:	fa23 f002 	lsr.w	r0, r3, r2
  4033da:	bf18      	it	ne
  4033dc:	4240      	negne	r0, r0
  4033de:	4770      	bx	lr
  4033e0:	f04f 0000 	mov.w	r0, #0
  4033e4:	4770      	bx	lr
  4033e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4033ea:	d105      	bne.n	4033f8 <__aeabi_d2iz+0x48>
  4033ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4033f0:	bf08      	it	eq
  4033f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4033f6:	4770      	bx	lr
  4033f8:	f04f 0000 	mov.w	r0, #0
  4033fc:	4770      	bx	lr
  4033fe:	bf00      	nop

00403400 <__libc_init_array>:
  403400:	b570      	push	{r4, r5, r6, lr}
  403402:	4e0f      	ldr	r6, [pc, #60]	; (403440 <__libc_init_array+0x40>)
  403404:	4d0f      	ldr	r5, [pc, #60]	; (403444 <__libc_init_array+0x44>)
  403406:	1b76      	subs	r6, r6, r5
  403408:	10b6      	asrs	r6, r6, #2
  40340a:	bf18      	it	ne
  40340c:	2400      	movne	r4, #0
  40340e:	d005      	beq.n	40341c <__libc_init_array+0x1c>
  403410:	3401      	adds	r4, #1
  403412:	f855 3b04 	ldr.w	r3, [r5], #4
  403416:	4798      	blx	r3
  403418:	42a6      	cmp	r6, r4
  40341a:	d1f9      	bne.n	403410 <__libc_init_array+0x10>
  40341c:	4e0a      	ldr	r6, [pc, #40]	; (403448 <__libc_init_array+0x48>)
  40341e:	4d0b      	ldr	r5, [pc, #44]	; (40344c <__libc_init_array+0x4c>)
  403420:	1b76      	subs	r6, r6, r5
  403422:	f004 f9bd 	bl	4077a0 <_init>
  403426:	10b6      	asrs	r6, r6, #2
  403428:	bf18      	it	ne
  40342a:	2400      	movne	r4, #0
  40342c:	d006      	beq.n	40343c <__libc_init_array+0x3c>
  40342e:	3401      	adds	r4, #1
  403430:	f855 3b04 	ldr.w	r3, [r5], #4
  403434:	4798      	blx	r3
  403436:	42a6      	cmp	r6, r4
  403438:	d1f9      	bne.n	40342e <__libc_init_array+0x2e>
  40343a:	bd70      	pop	{r4, r5, r6, pc}
  40343c:	bd70      	pop	{r4, r5, r6, pc}
  40343e:	bf00      	nop
  403440:	004077ac 	.word	0x004077ac
  403444:	004077ac 	.word	0x004077ac
  403448:	004077b4 	.word	0x004077b4
  40344c:	004077ac 	.word	0x004077ac

00403450 <memset>:
  403450:	b470      	push	{r4, r5, r6}
  403452:	0786      	lsls	r6, r0, #30
  403454:	d046      	beq.n	4034e4 <memset+0x94>
  403456:	1e54      	subs	r4, r2, #1
  403458:	2a00      	cmp	r2, #0
  40345a:	d041      	beq.n	4034e0 <memset+0x90>
  40345c:	b2ca      	uxtb	r2, r1
  40345e:	4603      	mov	r3, r0
  403460:	e002      	b.n	403468 <memset+0x18>
  403462:	f114 34ff 	adds.w	r4, r4, #4294967295
  403466:	d33b      	bcc.n	4034e0 <memset+0x90>
  403468:	f803 2b01 	strb.w	r2, [r3], #1
  40346c:	079d      	lsls	r5, r3, #30
  40346e:	d1f8      	bne.n	403462 <memset+0x12>
  403470:	2c03      	cmp	r4, #3
  403472:	d92e      	bls.n	4034d2 <memset+0x82>
  403474:	b2cd      	uxtb	r5, r1
  403476:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40347a:	2c0f      	cmp	r4, #15
  40347c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403480:	d919      	bls.n	4034b6 <memset+0x66>
  403482:	f103 0210 	add.w	r2, r3, #16
  403486:	4626      	mov	r6, r4
  403488:	3e10      	subs	r6, #16
  40348a:	2e0f      	cmp	r6, #15
  40348c:	f842 5c10 	str.w	r5, [r2, #-16]
  403490:	f842 5c0c 	str.w	r5, [r2, #-12]
  403494:	f842 5c08 	str.w	r5, [r2, #-8]
  403498:	f842 5c04 	str.w	r5, [r2, #-4]
  40349c:	f102 0210 	add.w	r2, r2, #16
  4034a0:	d8f2      	bhi.n	403488 <memset+0x38>
  4034a2:	f1a4 0210 	sub.w	r2, r4, #16
  4034a6:	f022 020f 	bic.w	r2, r2, #15
  4034aa:	f004 040f 	and.w	r4, r4, #15
  4034ae:	3210      	adds	r2, #16
  4034b0:	2c03      	cmp	r4, #3
  4034b2:	4413      	add	r3, r2
  4034b4:	d90d      	bls.n	4034d2 <memset+0x82>
  4034b6:	461e      	mov	r6, r3
  4034b8:	4622      	mov	r2, r4
  4034ba:	3a04      	subs	r2, #4
  4034bc:	2a03      	cmp	r2, #3
  4034be:	f846 5b04 	str.w	r5, [r6], #4
  4034c2:	d8fa      	bhi.n	4034ba <memset+0x6a>
  4034c4:	1f22      	subs	r2, r4, #4
  4034c6:	f022 0203 	bic.w	r2, r2, #3
  4034ca:	3204      	adds	r2, #4
  4034cc:	4413      	add	r3, r2
  4034ce:	f004 0403 	and.w	r4, r4, #3
  4034d2:	b12c      	cbz	r4, 4034e0 <memset+0x90>
  4034d4:	b2c9      	uxtb	r1, r1
  4034d6:	441c      	add	r4, r3
  4034d8:	f803 1b01 	strb.w	r1, [r3], #1
  4034dc:	429c      	cmp	r4, r3
  4034de:	d1fb      	bne.n	4034d8 <memset+0x88>
  4034e0:	bc70      	pop	{r4, r5, r6}
  4034e2:	4770      	bx	lr
  4034e4:	4614      	mov	r4, r2
  4034e6:	4603      	mov	r3, r0
  4034e8:	e7c2      	b.n	403470 <memset+0x20>
  4034ea:	bf00      	nop

004034ec <sprintf>:
  4034ec:	b40e      	push	{r1, r2, r3}
  4034ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034f0:	b09c      	sub	sp, #112	; 0x70
  4034f2:	ab21      	add	r3, sp, #132	; 0x84
  4034f4:	490f      	ldr	r1, [pc, #60]	; (403534 <sprintf+0x48>)
  4034f6:	f853 2b04 	ldr.w	r2, [r3], #4
  4034fa:	9301      	str	r3, [sp, #4]
  4034fc:	4605      	mov	r5, r0
  4034fe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403502:	6808      	ldr	r0, [r1, #0]
  403504:	9502      	str	r5, [sp, #8]
  403506:	f44f 7702 	mov.w	r7, #520	; 0x208
  40350a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40350e:	a902      	add	r1, sp, #8
  403510:	9506      	str	r5, [sp, #24]
  403512:	f8ad 7014 	strh.w	r7, [sp, #20]
  403516:	9404      	str	r4, [sp, #16]
  403518:	9407      	str	r4, [sp, #28]
  40351a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40351e:	f000 f80b 	bl	403538 <_svfprintf_r>
  403522:	9b02      	ldr	r3, [sp, #8]
  403524:	2200      	movs	r2, #0
  403526:	701a      	strb	r2, [r3, #0]
  403528:	b01c      	add	sp, #112	; 0x70
  40352a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40352e:	b003      	add	sp, #12
  403530:	4770      	bx	lr
  403532:	bf00      	nop
  403534:	20400008 	.word	0x20400008

00403538 <_svfprintf_r>:
  403538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40353c:	b0c3      	sub	sp, #268	; 0x10c
  40353e:	460c      	mov	r4, r1
  403540:	910b      	str	r1, [sp, #44]	; 0x2c
  403542:	4692      	mov	sl, r2
  403544:	930f      	str	r3, [sp, #60]	; 0x3c
  403546:	900c      	str	r0, [sp, #48]	; 0x30
  403548:	f002 fa0e 	bl	405968 <_localeconv_r>
  40354c:	6803      	ldr	r3, [r0, #0]
  40354e:	931a      	str	r3, [sp, #104]	; 0x68
  403550:	4618      	mov	r0, r3
  403552:	f003 f8d5 	bl	406700 <strlen>
  403556:	89a3      	ldrh	r3, [r4, #12]
  403558:	9019      	str	r0, [sp, #100]	; 0x64
  40355a:	0619      	lsls	r1, r3, #24
  40355c:	d503      	bpl.n	403566 <_svfprintf_r+0x2e>
  40355e:	6923      	ldr	r3, [r4, #16]
  403560:	2b00      	cmp	r3, #0
  403562:	f001 8003 	beq.w	40456c <_svfprintf_r+0x1034>
  403566:	2300      	movs	r3, #0
  403568:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40356c:	9313      	str	r3, [sp, #76]	; 0x4c
  40356e:	9315      	str	r3, [sp, #84]	; 0x54
  403570:	9314      	str	r3, [sp, #80]	; 0x50
  403572:	9327      	str	r3, [sp, #156]	; 0x9c
  403574:	9326      	str	r3, [sp, #152]	; 0x98
  403576:	9318      	str	r3, [sp, #96]	; 0x60
  403578:	931b      	str	r3, [sp, #108]	; 0x6c
  40357a:	9309      	str	r3, [sp, #36]	; 0x24
  40357c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403580:	46c8      	mov	r8, r9
  403582:	9316      	str	r3, [sp, #88]	; 0x58
  403584:	9317      	str	r3, [sp, #92]	; 0x5c
  403586:	f89a 3000 	ldrb.w	r3, [sl]
  40358a:	4654      	mov	r4, sl
  40358c:	b1e3      	cbz	r3, 4035c8 <_svfprintf_r+0x90>
  40358e:	2b25      	cmp	r3, #37	; 0x25
  403590:	d102      	bne.n	403598 <_svfprintf_r+0x60>
  403592:	e019      	b.n	4035c8 <_svfprintf_r+0x90>
  403594:	2b25      	cmp	r3, #37	; 0x25
  403596:	d003      	beq.n	4035a0 <_svfprintf_r+0x68>
  403598:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40359c:	2b00      	cmp	r3, #0
  40359e:	d1f9      	bne.n	403594 <_svfprintf_r+0x5c>
  4035a0:	eba4 050a 	sub.w	r5, r4, sl
  4035a4:	b185      	cbz	r5, 4035c8 <_svfprintf_r+0x90>
  4035a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4035a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4035aa:	f8c8 a000 	str.w	sl, [r8]
  4035ae:	3301      	adds	r3, #1
  4035b0:	442a      	add	r2, r5
  4035b2:	2b07      	cmp	r3, #7
  4035b4:	f8c8 5004 	str.w	r5, [r8, #4]
  4035b8:	9227      	str	r2, [sp, #156]	; 0x9c
  4035ba:	9326      	str	r3, [sp, #152]	; 0x98
  4035bc:	dc7f      	bgt.n	4036be <_svfprintf_r+0x186>
  4035be:	f108 0808 	add.w	r8, r8, #8
  4035c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4035c4:	442b      	add	r3, r5
  4035c6:	9309      	str	r3, [sp, #36]	; 0x24
  4035c8:	7823      	ldrb	r3, [r4, #0]
  4035ca:	2b00      	cmp	r3, #0
  4035cc:	d07f      	beq.n	4036ce <_svfprintf_r+0x196>
  4035ce:	2300      	movs	r3, #0
  4035d0:	461a      	mov	r2, r3
  4035d2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4035d6:	4619      	mov	r1, r3
  4035d8:	930d      	str	r3, [sp, #52]	; 0x34
  4035da:	469b      	mov	fp, r3
  4035dc:	f04f 30ff 	mov.w	r0, #4294967295
  4035e0:	7863      	ldrb	r3, [r4, #1]
  4035e2:	900a      	str	r0, [sp, #40]	; 0x28
  4035e4:	f104 0a01 	add.w	sl, r4, #1
  4035e8:	f10a 0a01 	add.w	sl, sl, #1
  4035ec:	f1a3 0020 	sub.w	r0, r3, #32
  4035f0:	2858      	cmp	r0, #88	; 0x58
  4035f2:	f200 83c1 	bhi.w	403d78 <_svfprintf_r+0x840>
  4035f6:	e8df f010 	tbh	[pc, r0, lsl #1]
  4035fa:	0238      	.short	0x0238
  4035fc:	03bf03bf 	.word	0x03bf03bf
  403600:	03bf0240 	.word	0x03bf0240
  403604:	03bf03bf 	.word	0x03bf03bf
  403608:	03bf03bf 	.word	0x03bf03bf
  40360c:	024503bf 	.word	0x024503bf
  403610:	03bf0203 	.word	0x03bf0203
  403614:	026b005d 	.word	0x026b005d
  403618:	028603bf 	.word	0x028603bf
  40361c:	039d039d 	.word	0x039d039d
  403620:	039d039d 	.word	0x039d039d
  403624:	039d039d 	.word	0x039d039d
  403628:	039d039d 	.word	0x039d039d
  40362c:	03bf039d 	.word	0x03bf039d
  403630:	03bf03bf 	.word	0x03bf03bf
  403634:	03bf03bf 	.word	0x03bf03bf
  403638:	03bf03bf 	.word	0x03bf03bf
  40363c:	03bf03bf 	.word	0x03bf03bf
  403640:	033703bf 	.word	0x033703bf
  403644:	03bf0357 	.word	0x03bf0357
  403648:	03bf0357 	.word	0x03bf0357
  40364c:	03bf03bf 	.word	0x03bf03bf
  403650:	039803bf 	.word	0x039803bf
  403654:	03bf03bf 	.word	0x03bf03bf
  403658:	03bf03ad 	.word	0x03bf03ad
  40365c:	03bf03bf 	.word	0x03bf03bf
  403660:	03bf03bf 	.word	0x03bf03bf
  403664:	03bf0259 	.word	0x03bf0259
  403668:	031e03bf 	.word	0x031e03bf
  40366c:	03bf03bf 	.word	0x03bf03bf
  403670:	03bf03bf 	.word	0x03bf03bf
  403674:	03bf03bf 	.word	0x03bf03bf
  403678:	03bf03bf 	.word	0x03bf03bf
  40367c:	03bf03bf 	.word	0x03bf03bf
  403680:	02db02c6 	.word	0x02db02c6
  403684:	03570357 	.word	0x03570357
  403688:	028b0357 	.word	0x028b0357
  40368c:	03bf02db 	.word	0x03bf02db
  403690:	029003bf 	.word	0x029003bf
  403694:	029d03bf 	.word	0x029d03bf
  403698:	02b401cc 	.word	0x02b401cc
  40369c:	03bf0208 	.word	0x03bf0208
  4036a0:	03bf01e1 	.word	0x03bf01e1
  4036a4:	03bf007e 	.word	0x03bf007e
  4036a8:	020d03bf 	.word	0x020d03bf
  4036ac:	980d      	ldr	r0, [sp, #52]	; 0x34
  4036ae:	930f      	str	r3, [sp, #60]	; 0x3c
  4036b0:	4240      	negs	r0, r0
  4036b2:	900d      	str	r0, [sp, #52]	; 0x34
  4036b4:	f04b 0b04 	orr.w	fp, fp, #4
  4036b8:	f89a 3000 	ldrb.w	r3, [sl]
  4036bc:	e794      	b.n	4035e8 <_svfprintf_r+0xb0>
  4036be:	aa25      	add	r2, sp, #148	; 0x94
  4036c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4036c2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4036c4:	f003 f88a 	bl	4067dc <__ssprint_r>
  4036c8:	b940      	cbnz	r0, 4036dc <_svfprintf_r+0x1a4>
  4036ca:	46c8      	mov	r8, r9
  4036cc:	e779      	b.n	4035c2 <_svfprintf_r+0x8a>
  4036ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4036d0:	b123      	cbz	r3, 4036dc <_svfprintf_r+0x1a4>
  4036d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4036d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4036d6:	aa25      	add	r2, sp, #148	; 0x94
  4036d8:	f003 f880 	bl	4067dc <__ssprint_r>
  4036dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4036de:	899b      	ldrh	r3, [r3, #12]
  4036e0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4036e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4036e6:	bf18      	it	ne
  4036e8:	f04f 33ff 	movne.w	r3, #4294967295
  4036ec:	9309      	str	r3, [sp, #36]	; 0x24
  4036ee:	9809      	ldr	r0, [sp, #36]	; 0x24
  4036f0:	b043      	add	sp, #268	; 0x10c
  4036f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4036f6:	f01b 0f20 	tst.w	fp, #32
  4036fa:	9311      	str	r3, [sp, #68]	; 0x44
  4036fc:	f040 81dd 	bne.w	403aba <_svfprintf_r+0x582>
  403700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403702:	f01b 0f10 	tst.w	fp, #16
  403706:	4613      	mov	r3, r2
  403708:	f040 856e 	bne.w	4041e8 <_svfprintf_r+0xcb0>
  40370c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403710:	f000 856a 	beq.w	4041e8 <_svfprintf_r+0xcb0>
  403714:	8814      	ldrh	r4, [r2, #0]
  403716:	3204      	adds	r2, #4
  403718:	2500      	movs	r5, #0
  40371a:	2301      	movs	r3, #1
  40371c:	920f      	str	r2, [sp, #60]	; 0x3c
  40371e:	2700      	movs	r7, #0
  403720:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403724:	990a      	ldr	r1, [sp, #40]	; 0x28
  403726:	1c4a      	adds	r2, r1, #1
  403728:	f000 8265 	beq.w	403bf6 <_svfprintf_r+0x6be>
  40372c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403730:	9207      	str	r2, [sp, #28]
  403732:	ea54 0205 	orrs.w	r2, r4, r5
  403736:	f040 8264 	bne.w	403c02 <_svfprintf_r+0x6ca>
  40373a:	2900      	cmp	r1, #0
  40373c:	f040 843c 	bne.w	403fb8 <_svfprintf_r+0xa80>
  403740:	2b00      	cmp	r3, #0
  403742:	f040 84d7 	bne.w	4040f4 <_svfprintf_r+0xbbc>
  403746:	f01b 0301 	ands.w	r3, fp, #1
  40374a:	930e      	str	r3, [sp, #56]	; 0x38
  40374c:	f000 8604 	beq.w	404358 <_svfprintf_r+0xe20>
  403750:	ae42      	add	r6, sp, #264	; 0x108
  403752:	2330      	movs	r3, #48	; 0x30
  403754:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40375a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40375c:	4293      	cmp	r3, r2
  40375e:	bfb8      	it	lt
  403760:	4613      	movlt	r3, r2
  403762:	9308      	str	r3, [sp, #32]
  403764:	2300      	movs	r3, #0
  403766:	9312      	str	r3, [sp, #72]	; 0x48
  403768:	b117      	cbz	r7, 403770 <_svfprintf_r+0x238>
  40376a:	9b08      	ldr	r3, [sp, #32]
  40376c:	3301      	adds	r3, #1
  40376e:	9308      	str	r3, [sp, #32]
  403770:	9b07      	ldr	r3, [sp, #28]
  403772:	f013 0302 	ands.w	r3, r3, #2
  403776:	9310      	str	r3, [sp, #64]	; 0x40
  403778:	d002      	beq.n	403780 <_svfprintf_r+0x248>
  40377a:	9b08      	ldr	r3, [sp, #32]
  40377c:	3302      	adds	r3, #2
  40377e:	9308      	str	r3, [sp, #32]
  403780:	9b07      	ldr	r3, [sp, #28]
  403782:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403786:	f040 830e 	bne.w	403da6 <_svfprintf_r+0x86e>
  40378a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40378c:	9a08      	ldr	r2, [sp, #32]
  40378e:	eba3 0b02 	sub.w	fp, r3, r2
  403792:	f1bb 0f00 	cmp.w	fp, #0
  403796:	f340 8306 	ble.w	403da6 <_svfprintf_r+0x86e>
  40379a:	f1bb 0f10 	cmp.w	fp, #16
  40379e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4037a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4037a2:	dd29      	ble.n	4037f8 <_svfprintf_r+0x2c0>
  4037a4:	4643      	mov	r3, r8
  4037a6:	4621      	mov	r1, r4
  4037a8:	46a8      	mov	r8, r5
  4037aa:	2710      	movs	r7, #16
  4037ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4037ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4037b0:	e006      	b.n	4037c0 <_svfprintf_r+0x288>
  4037b2:	f1ab 0b10 	sub.w	fp, fp, #16
  4037b6:	f1bb 0f10 	cmp.w	fp, #16
  4037ba:	f103 0308 	add.w	r3, r3, #8
  4037be:	dd18      	ble.n	4037f2 <_svfprintf_r+0x2ba>
  4037c0:	3201      	adds	r2, #1
  4037c2:	48b7      	ldr	r0, [pc, #732]	; (403aa0 <_svfprintf_r+0x568>)
  4037c4:	9226      	str	r2, [sp, #152]	; 0x98
  4037c6:	3110      	adds	r1, #16
  4037c8:	2a07      	cmp	r2, #7
  4037ca:	9127      	str	r1, [sp, #156]	; 0x9c
  4037cc:	e883 0081 	stmia.w	r3, {r0, r7}
  4037d0:	ddef      	ble.n	4037b2 <_svfprintf_r+0x27a>
  4037d2:	aa25      	add	r2, sp, #148	; 0x94
  4037d4:	4629      	mov	r1, r5
  4037d6:	4620      	mov	r0, r4
  4037d8:	f003 f800 	bl	4067dc <__ssprint_r>
  4037dc:	2800      	cmp	r0, #0
  4037de:	f47f af7d 	bne.w	4036dc <_svfprintf_r+0x1a4>
  4037e2:	f1ab 0b10 	sub.w	fp, fp, #16
  4037e6:	f1bb 0f10 	cmp.w	fp, #16
  4037ea:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4037ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4037ee:	464b      	mov	r3, r9
  4037f0:	dce6      	bgt.n	4037c0 <_svfprintf_r+0x288>
  4037f2:	4645      	mov	r5, r8
  4037f4:	460c      	mov	r4, r1
  4037f6:	4698      	mov	r8, r3
  4037f8:	3201      	adds	r2, #1
  4037fa:	4ba9      	ldr	r3, [pc, #676]	; (403aa0 <_svfprintf_r+0x568>)
  4037fc:	9226      	str	r2, [sp, #152]	; 0x98
  4037fe:	445c      	add	r4, fp
  403800:	2a07      	cmp	r2, #7
  403802:	9427      	str	r4, [sp, #156]	; 0x9c
  403804:	e888 0808 	stmia.w	r8, {r3, fp}
  403808:	f300 8498 	bgt.w	40413c <_svfprintf_r+0xc04>
  40380c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403810:	f108 0808 	add.w	r8, r8, #8
  403814:	b177      	cbz	r7, 403834 <_svfprintf_r+0x2fc>
  403816:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403818:	3301      	adds	r3, #1
  40381a:	3401      	adds	r4, #1
  40381c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403820:	2201      	movs	r2, #1
  403822:	2b07      	cmp	r3, #7
  403824:	9427      	str	r4, [sp, #156]	; 0x9c
  403826:	9326      	str	r3, [sp, #152]	; 0x98
  403828:	e888 0006 	stmia.w	r8, {r1, r2}
  40382c:	f300 83db 	bgt.w	403fe6 <_svfprintf_r+0xaae>
  403830:	f108 0808 	add.w	r8, r8, #8
  403834:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403836:	b16b      	cbz	r3, 403854 <_svfprintf_r+0x31c>
  403838:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40383a:	3301      	adds	r3, #1
  40383c:	3402      	adds	r4, #2
  40383e:	a91e      	add	r1, sp, #120	; 0x78
  403840:	2202      	movs	r2, #2
  403842:	2b07      	cmp	r3, #7
  403844:	9427      	str	r4, [sp, #156]	; 0x9c
  403846:	9326      	str	r3, [sp, #152]	; 0x98
  403848:	e888 0006 	stmia.w	r8, {r1, r2}
  40384c:	f300 83d6 	bgt.w	403ffc <_svfprintf_r+0xac4>
  403850:	f108 0808 	add.w	r8, r8, #8
  403854:	2d80      	cmp	r5, #128	; 0x80
  403856:	f000 8315 	beq.w	403e84 <_svfprintf_r+0x94c>
  40385a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40385c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40385e:	1a9f      	subs	r7, r3, r2
  403860:	2f00      	cmp	r7, #0
  403862:	dd36      	ble.n	4038d2 <_svfprintf_r+0x39a>
  403864:	2f10      	cmp	r7, #16
  403866:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403868:	4d8e      	ldr	r5, [pc, #568]	; (403aa4 <_svfprintf_r+0x56c>)
  40386a:	dd27      	ble.n	4038bc <_svfprintf_r+0x384>
  40386c:	4642      	mov	r2, r8
  40386e:	4621      	mov	r1, r4
  403870:	46b0      	mov	r8, r6
  403872:	f04f 0b10 	mov.w	fp, #16
  403876:	462e      	mov	r6, r5
  403878:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40387a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40387c:	e004      	b.n	403888 <_svfprintf_r+0x350>
  40387e:	3f10      	subs	r7, #16
  403880:	2f10      	cmp	r7, #16
  403882:	f102 0208 	add.w	r2, r2, #8
  403886:	dd15      	ble.n	4038b4 <_svfprintf_r+0x37c>
  403888:	3301      	adds	r3, #1
  40388a:	3110      	adds	r1, #16
  40388c:	2b07      	cmp	r3, #7
  40388e:	9127      	str	r1, [sp, #156]	; 0x9c
  403890:	9326      	str	r3, [sp, #152]	; 0x98
  403892:	e882 0840 	stmia.w	r2, {r6, fp}
  403896:	ddf2      	ble.n	40387e <_svfprintf_r+0x346>
  403898:	aa25      	add	r2, sp, #148	; 0x94
  40389a:	4629      	mov	r1, r5
  40389c:	4620      	mov	r0, r4
  40389e:	f002 ff9d 	bl	4067dc <__ssprint_r>
  4038a2:	2800      	cmp	r0, #0
  4038a4:	f47f af1a 	bne.w	4036dc <_svfprintf_r+0x1a4>
  4038a8:	3f10      	subs	r7, #16
  4038aa:	2f10      	cmp	r7, #16
  4038ac:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4038ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038b0:	464a      	mov	r2, r9
  4038b2:	dce9      	bgt.n	403888 <_svfprintf_r+0x350>
  4038b4:	4635      	mov	r5, r6
  4038b6:	460c      	mov	r4, r1
  4038b8:	4646      	mov	r6, r8
  4038ba:	4690      	mov	r8, r2
  4038bc:	3301      	adds	r3, #1
  4038be:	443c      	add	r4, r7
  4038c0:	2b07      	cmp	r3, #7
  4038c2:	9427      	str	r4, [sp, #156]	; 0x9c
  4038c4:	9326      	str	r3, [sp, #152]	; 0x98
  4038c6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4038ca:	f300 8381 	bgt.w	403fd0 <_svfprintf_r+0xa98>
  4038ce:	f108 0808 	add.w	r8, r8, #8
  4038d2:	9b07      	ldr	r3, [sp, #28]
  4038d4:	05df      	lsls	r7, r3, #23
  4038d6:	f100 8268 	bmi.w	403daa <_svfprintf_r+0x872>
  4038da:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038dc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4038de:	f8c8 6000 	str.w	r6, [r8]
  4038e2:	3301      	adds	r3, #1
  4038e4:	440c      	add	r4, r1
  4038e6:	2b07      	cmp	r3, #7
  4038e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4038ea:	f8c8 1004 	str.w	r1, [r8, #4]
  4038ee:	9326      	str	r3, [sp, #152]	; 0x98
  4038f0:	f300 834d 	bgt.w	403f8e <_svfprintf_r+0xa56>
  4038f4:	f108 0808 	add.w	r8, r8, #8
  4038f8:	9b07      	ldr	r3, [sp, #28]
  4038fa:	075b      	lsls	r3, r3, #29
  4038fc:	d53a      	bpl.n	403974 <_svfprintf_r+0x43c>
  4038fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403900:	9a08      	ldr	r2, [sp, #32]
  403902:	1a9d      	subs	r5, r3, r2
  403904:	2d00      	cmp	r5, #0
  403906:	dd35      	ble.n	403974 <_svfprintf_r+0x43c>
  403908:	2d10      	cmp	r5, #16
  40390a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40390c:	dd20      	ble.n	403950 <_svfprintf_r+0x418>
  40390e:	2610      	movs	r6, #16
  403910:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403912:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403916:	e004      	b.n	403922 <_svfprintf_r+0x3ea>
  403918:	3d10      	subs	r5, #16
  40391a:	2d10      	cmp	r5, #16
  40391c:	f108 0808 	add.w	r8, r8, #8
  403920:	dd16      	ble.n	403950 <_svfprintf_r+0x418>
  403922:	3301      	adds	r3, #1
  403924:	4a5e      	ldr	r2, [pc, #376]	; (403aa0 <_svfprintf_r+0x568>)
  403926:	9326      	str	r3, [sp, #152]	; 0x98
  403928:	3410      	adds	r4, #16
  40392a:	2b07      	cmp	r3, #7
  40392c:	9427      	str	r4, [sp, #156]	; 0x9c
  40392e:	e888 0044 	stmia.w	r8, {r2, r6}
  403932:	ddf1      	ble.n	403918 <_svfprintf_r+0x3e0>
  403934:	aa25      	add	r2, sp, #148	; 0x94
  403936:	4659      	mov	r1, fp
  403938:	4638      	mov	r0, r7
  40393a:	f002 ff4f 	bl	4067dc <__ssprint_r>
  40393e:	2800      	cmp	r0, #0
  403940:	f47f aecc 	bne.w	4036dc <_svfprintf_r+0x1a4>
  403944:	3d10      	subs	r5, #16
  403946:	2d10      	cmp	r5, #16
  403948:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40394a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40394c:	46c8      	mov	r8, r9
  40394e:	dce8      	bgt.n	403922 <_svfprintf_r+0x3ea>
  403950:	3301      	adds	r3, #1
  403952:	4a53      	ldr	r2, [pc, #332]	; (403aa0 <_svfprintf_r+0x568>)
  403954:	9326      	str	r3, [sp, #152]	; 0x98
  403956:	442c      	add	r4, r5
  403958:	2b07      	cmp	r3, #7
  40395a:	9427      	str	r4, [sp, #156]	; 0x9c
  40395c:	e888 0024 	stmia.w	r8, {r2, r5}
  403960:	dd08      	ble.n	403974 <_svfprintf_r+0x43c>
  403962:	aa25      	add	r2, sp, #148	; 0x94
  403964:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403966:	980c      	ldr	r0, [sp, #48]	; 0x30
  403968:	f002 ff38 	bl	4067dc <__ssprint_r>
  40396c:	2800      	cmp	r0, #0
  40396e:	f47f aeb5 	bne.w	4036dc <_svfprintf_r+0x1a4>
  403972:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403974:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403976:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403978:	9908      	ldr	r1, [sp, #32]
  40397a:	428a      	cmp	r2, r1
  40397c:	bfac      	ite	ge
  40397e:	189b      	addge	r3, r3, r2
  403980:	185b      	addlt	r3, r3, r1
  403982:	9309      	str	r3, [sp, #36]	; 0x24
  403984:	2c00      	cmp	r4, #0
  403986:	f040 830d 	bne.w	403fa4 <_svfprintf_r+0xa6c>
  40398a:	2300      	movs	r3, #0
  40398c:	9326      	str	r3, [sp, #152]	; 0x98
  40398e:	46c8      	mov	r8, r9
  403990:	e5f9      	b.n	403586 <_svfprintf_r+0x4e>
  403992:	9311      	str	r3, [sp, #68]	; 0x44
  403994:	f01b 0320 	ands.w	r3, fp, #32
  403998:	f040 81e3 	bne.w	403d62 <_svfprintf_r+0x82a>
  40399c:	f01b 0210 	ands.w	r2, fp, #16
  4039a0:	f040 842e 	bne.w	404200 <_svfprintf_r+0xcc8>
  4039a4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4039a8:	f000 842a 	beq.w	404200 <_svfprintf_r+0xcc8>
  4039ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4039ae:	4613      	mov	r3, r2
  4039b0:	460a      	mov	r2, r1
  4039b2:	3204      	adds	r2, #4
  4039b4:	880c      	ldrh	r4, [r1, #0]
  4039b6:	920f      	str	r2, [sp, #60]	; 0x3c
  4039b8:	2500      	movs	r5, #0
  4039ba:	e6b0      	b.n	40371e <_svfprintf_r+0x1e6>
  4039bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4039be:	9311      	str	r3, [sp, #68]	; 0x44
  4039c0:	6816      	ldr	r6, [r2, #0]
  4039c2:	2400      	movs	r4, #0
  4039c4:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4039c8:	1d15      	adds	r5, r2, #4
  4039ca:	2e00      	cmp	r6, #0
  4039cc:	f000 86a7 	beq.w	40471e <_svfprintf_r+0x11e6>
  4039d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4039d2:	1c53      	adds	r3, r2, #1
  4039d4:	f000 8609 	beq.w	4045ea <_svfprintf_r+0x10b2>
  4039d8:	4621      	mov	r1, r4
  4039da:	4630      	mov	r0, r6
  4039dc:	f002 fa88 	bl	405ef0 <memchr>
  4039e0:	2800      	cmp	r0, #0
  4039e2:	f000 86e1 	beq.w	4047a8 <_svfprintf_r+0x1270>
  4039e6:	1b83      	subs	r3, r0, r6
  4039e8:	930e      	str	r3, [sp, #56]	; 0x38
  4039ea:	940a      	str	r4, [sp, #40]	; 0x28
  4039ec:	950f      	str	r5, [sp, #60]	; 0x3c
  4039ee:	f8cd b01c 	str.w	fp, [sp, #28]
  4039f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4039f6:	9308      	str	r3, [sp, #32]
  4039f8:	9412      	str	r4, [sp, #72]	; 0x48
  4039fa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4039fe:	e6b3      	b.n	403768 <_svfprintf_r+0x230>
  403a00:	f89a 3000 	ldrb.w	r3, [sl]
  403a04:	2201      	movs	r2, #1
  403a06:	212b      	movs	r1, #43	; 0x2b
  403a08:	e5ee      	b.n	4035e8 <_svfprintf_r+0xb0>
  403a0a:	f04b 0b20 	orr.w	fp, fp, #32
  403a0e:	f89a 3000 	ldrb.w	r3, [sl]
  403a12:	e5e9      	b.n	4035e8 <_svfprintf_r+0xb0>
  403a14:	9311      	str	r3, [sp, #68]	; 0x44
  403a16:	2a00      	cmp	r2, #0
  403a18:	f040 8795 	bne.w	404946 <_svfprintf_r+0x140e>
  403a1c:	4b22      	ldr	r3, [pc, #136]	; (403aa8 <_svfprintf_r+0x570>)
  403a1e:	9318      	str	r3, [sp, #96]	; 0x60
  403a20:	f01b 0f20 	tst.w	fp, #32
  403a24:	f040 8111 	bne.w	403c4a <_svfprintf_r+0x712>
  403a28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a2a:	f01b 0f10 	tst.w	fp, #16
  403a2e:	4613      	mov	r3, r2
  403a30:	f040 83e1 	bne.w	4041f6 <_svfprintf_r+0xcbe>
  403a34:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403a38:	f000 83dd 	beq.w	4041f6 <_svfprintf_r+0xcbe>
  403a3c:	3304      	adds	r3, #4
  403a3e:	8814      	ldrh	r4, [r2, #0]
  403a40:	930f      	str	r3, [sp, #60]	; 0x3c
  403a42:	2500      	movs	r5, #0
  403a44:	f01b 0f01 	tst.w	fp, #1
  403a48:	f000 810c 	beq.w	403c64 <_svfprintf_r+0x72c>
  403a4c:	ea54 0305 	orrs.w	r3, r4, r5
  403a50:	f000 8108 	beq.w	403c64 <_svfprintf_r+0x72c>
  403a54:	2330      	movs	r3, #48	; 0x30
  403a56:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403a5a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403a5e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403a62:	f04b 0b02 	orr.w	fp, fp, #2
  403a66:	2302      	movs	r3, #2
  403a68:	e659      	b.n	40371e <_svfprintf_r+0x1e6>
  403a6a:	f89a 3000 	ldrb.w	r3, [sl]
  403a6e:	2900      	cmp	r1, #0
  403a70:	f47f adba 	bne.w	4035e8 <_svfprintf_r+0xb0>
  403a74:	2201      	movs	r2, #1
  403a76:	2120      	movs	r1, #32
  403a78:	e5b6      	b.n	4035e8 <_svfprintf_r+0xb0>
  403a7a:	f04b 0b01 	orr.w	fp, fp, #1
  403a7e:	f89a 3000 	ldrb.w	r3, [sl]
  403a82:	e5b1      	b.n	4035e8 <_svfprintf_r+0xb0>
  403a84:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403a86:	6823      	ldr	r3, [r4, #0]
  403a88:	930d      	str	r3, [sp, #52]	; 0x34
  403a8a:	4618      	mov	r0, r3
  403a8c:	2800      	cmp	r0, #0
  403a8e:	4623      	mov	r3, r4
  403a90:	f103 0304 	add.w	r3, r3, #4
  403a94:	f6ff ae0a 	blt.w	4036ac <_svfprintf_r+0x174>
  403a98:	930f      	str	r3, [sp, #60]	; 0x3c
  403a9a:	f89a 3000 	ldrb.w	r3, [sl]
  403a9e:	e5a3      	b.n	4035e8 <_svfprintf_r+0xb0>
  403aa0:	0040755c 	.word	0x0040755c
  403aa4:	0040756c 	.word	0x0040756c
  403aa8:	0040753c 	.word	0x0040753c
  403aac:	f04b 0b10 	orr.w	fp, fp, #16
  403ab0:	f01b 0f20 	tst.w	fp, #32
  403ab4:	9311      	str	r3, [sp, #68]	; 0x44
  403ab6:	f43f ae23 	beq.w	403700 <_svfprintf_r+0x1c8>
  403aba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403abc:	3507      	adds	r5, #7
  403abe:	f025 0307 	bic.w	r3, r5, #7
  403ac2:	f103 0208 	add.w	r2, r3, #8
  403ac6:	e9d3 4500 	ldrd	r4, r5, [r3]
  403aca:	920f      	str	r2, [sp, #60]	; 0x3c
  403acc:	2301      	movs	r3, #1
  403ace:	e626      	b.n	40371e <_svfprintf_r+0x1e6>
  403ad0:	f89a 3000 	ldrb.w	r3, [sl]
  403ad4:	2b2a      	cmp	r3, #42	; 0x2a
  403ad6:	f10a 0401 	add.w	r4, sl, #1
  403ada:	f000 8727 	beq.w	40492c <_svfprintf_r+0x13f4>
  403ade:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403ae2:	2809      	cmp	r0, #9
  403ae4:	46a2      	mov	sl, r4
  403ae6:	f200 86ad 	bhi.w	404844 <_svfprintf_r+0x130c>
  403aea:	2300      	movs	r3, #0
  403aec:	461c      	mov	r4, r3
  403aee:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403af2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403af6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403afa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403afe:	2809      	cmp	r0, #9
  403b00:	d9f5      	bls.n	403aee <_svfprintf_r+0x5b6>
  403b02:	940a      	str	r4, [sp, #40]	; 0x28
  403b04:	e572      	b.n	4035ec <_svfprintf_r+0xb4>
  403b06:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403b0a:	f89a 3000 	ldrb.w	r3, [sl]
  403b0e:	e56b      	b.n	4035e8 <_svfprintf_r+0xb0>
  403b10:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403b14:	f89a 3000 	ldrb.w	r3, [sl]
  403b18:	e566      	b.n	4035e8 <_svfprintf_r+0xb0>
  403b1a:	f89a 3000 	ldrb.w	r3, [sl]
  403b1e:	2b6c      	cmp	r3, #108	; 0x6c
  403b20:	bf03      	ittte	eq
  403b22:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403b26:	f04b 0b20 	orreq.w	fp, fp, #32
  403b2a:	f10a 0a01 	addeq.w	sl, sl, #1
  403b2e:	f04b 0b10 	orrne.w	fp, fp, #16
  403b32:	e559      	b.n	4035e8 <_svfprintf_r+0xb0>
  403b34:	2a00      	cmp	r2, #0
  403b36:	f040 8711 	bne.w	40495c <_svfprintf_r+0x1424>
  403b3a:	f01b 0f20 	tst.w	fp, #32
  403b3e:	f040 84f9 	bne.w	404534 <_svfprintf_r+0xffc>
  403b42:	f01b 0f10 	tst.w	fp, #16
  403b46:	f040 84ac 	bne.w	4044a2 <_svfprintf_r+0xf6a>
  403b4a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403b4e:	f000 84a8 	beq.w	4044a2 <_svfprintf_r+0xf6a>
  403b52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403b54:	6813      	ldr	r3, [r2, #0]
  403b56:	3204      	adds	r2, #4
  403b58:	920f      	str	r2, [sp, #60]	; 0x3c
  403b5a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403b5e:	801a      	strh	r2, [r3, #0]
  403b60:	e511      	b.n	403586 <_svfprintf_r+0x4e>
  403b62:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403b64:	4bb3      	ldr	r3, [pc, #716]	; (403e34 <_svfprintf_r+0x8fc>)
  403b66:	680c      	ldr	r4, [r1, #0]
  403b68:	9318      	str	r3, [sp, #96]	; 0x60
  403b6a:	2230      	movs	r2, #48	; 0x30
  403b6c:	2378      	movs	r3, #120	; 0x78
  403b6e:	3104      	adds	r1, #4
  403b70:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403b74:	9311      	str	r3, [sp, #68]	; 0x44
  403b76:	f04b 0b02 	orr.w	fp, fp, #2
  403b7a:	910f      	str	r1, [sp, #60]	; 0x3c
  403b7c:	2500      	movs	r5, #0
  403b7e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403b82:	2302      	movs	r3, #2
  403b84:	e5cb      	b.n	40371e <_svfprintf_r+0x1e6>
  403b86:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403b88:	9311      	str	r3, [sp, #68]	; 0x44
  403b8a:	680a      	ldr	r2, [r1, #0]
  403b8c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403b90:	2300      	movs	r3, #0
  403b92:	460a      	mov	r2, r1
  403b94:	461f      	mov	r7, r3
  403b96:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403b9a:	3204      	adds	r2, #4
  403b9c:	2301      	movs	r3, #1
  403b9e:	9308      	str	r3, [sp, #32]
  403ba0:	f8cd b01c 	str.w	fp, [sp, #28]
  403ba4:	970a      	str	r7, [sp, #40]	; 0x28
  403ba6:	9712      	str	r7, [sp, #72]	; 0x48
  403ba8:	920f      	str	r2, [sp, #60]	; 0x3c
  403baa:	930e      	str	r3, [sp, #56]	; 0x38
  403bac:	ae28      	add	r6, sp, #160	; 0xa0
  403bae:	e5df      	b.n	403770 <_svfprintf_r+0x238>
  403bb0:	9311      	str	r3, [sp, #68]	; 0x44
  403bb2:	2a00      	cmp	r2, #0
  403bb4:	f040 86ea 	bne.w	40498c <_svfprintf_r+0x1454>
  403bb8:	f01b 0f20 	tst.w	fp, #32
  403bbc:	d15d      	bne.n	403c7a <_svfprintf_r+0x742>
  403bbe:	f01b 0f10 	tst.w	fp, #16
  403bc2:	f040 8308 	bne.w	4041d6 <_svfprintf_r+0xc9e>
  403bc6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403bca:	f000 8304 	beq.w	4041d6 <_svfprintf_r+0xc9e>
  403bce:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403bd0:	f9b1 4000 	ldrsh.w	r4, [r1]
  403bd4:	3104      	adds	r1, #4
  403bd6:	17e5      	asrs	r5, r4, #31
  403bd8:	4622      	mov	r2, r4
  403bda:	462b      	mov	r3, r5
  403bdc:	910f      	str	r1, [sp, #60]	; 0x3c
  403bde:	2a00      	cmp	r2, #0
  403be0:	f173 0300 	sbcs.w	r3, r3, #0
  403be4:	db58      	blt.n	403c98 <_svfprintf_r+0x760>
  403be6:	990a      	ldr	r1, [sp, #40]	; 0x28
  403be8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403bec:	1c4a      	adds	r2, r1, #1
  403bee:	f04f 0301 	mov.w	r3, #1
  403bf2:	f47f ad9b 	bne.w	40372c <_svfprintf_r+0x1f4>
  403bf6:	ea54 0205 	orrs.w	r2, r4, r5
  403bfa:	f000 81df 	beq.w	403fbc <_svfprintf_r+0xa84>
  403bfe:	f8cd b01c 	str.w	fp, [sp, #28]
  403c02:	2b01      	cmp	r3, #1
  403c04:	f000 827b 	beq.w	4040fe <_svfprintf_r+0xbc6>
  403c08:	2b02      	cmp	r3, #2
  403c0a:	f040 8206 	bne.w	40401a <_svfprintf_r+0xae2>
  403c0e:	9818      	ldr	r0, [sp, #96]	; 0x60
  403c10:	464e      	mov	r6, r9
  403c12:	0923      	lsrs	r3, r4, #4
  403c14:	f004 010f 	and.w	r1, r4, #15
  403c18:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403c1c:	092a      	lsrs	r2, r5, #4
  403c1e:	461c      	mov	r4, r3
  403c20:	4615      	mov	r5, r2
  403c22:	5c43      	ldrb	r3, [r0, r1]
  403c24:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403c28:	ea54 0305 	orrs.w	r3, r4, r5
  403c2c:	d1f1      	bne.n	403c12 <_svfprintf_r+0x6da>
  403c2e:	eba9 0306 	sub.w	r3, r9, r6
  403c32:	930e      	str	r3, [sp, #56]	; 0x38
  403c34:	e590      	b.n	403758 <_svfprintf_r+0x220>
  403c36:	9311      	str	r3, [sp, #68]	; 0x44
  403c38:	2a00      	cmp	r2, #0
  403c3a:	f040 86a3 	bne.w	404984 <_svfprintf_r+0x144c>
  403c3e:	4b7e      	ldr	r3, [pc, #504]	; (403e38 <_svfprintf_r+0x900>)
  403c40:	9318      	str	r3, [sp, #96]	; 0x60
  403c42:	f01b 0f20 	tst.w	fp, #32
  403c46:	f43f aeef 	beq.w	403a28 <_svfprintf_r+0x4f0>
  403c4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403c4c:	3507      	adds	r5, #7
  403c4e:	f025 0307 	bic.w	r3, r5, #7
  403c52:	f103 0208 	add.w	r2, r3, #8
  403c56:	f01b 0f01 	tst.w	fp, #1
  403c5a:	920f      	str	r2, [sp, #60]	; 0x3c
  403c5c:	e9d3 4500 	ldrd	r4, r5, [r3]
  403c60:	f47f aef4 	bne.w	403a4c <_svfprintf_r+0x514>
  403c64:	2302      	movs	r3, #2
  403c66:	e55a      	b.n	40371e <_svfprintf_r+0x1e6>
  403c68:	9311      	str	r3, [sp, #68]	; 0x44
  403c6a:	2a00      	cmp	r2, #0
  403c6c:	f040 8686 	bne.w	40497c <_svfprintf_r+0x1444>
  403c70:	f04b 0b10 	orr.w	fp, fp, #16
  403c74:	f01b 0f20 	tst.w	fp, #32
  403c78:	d0a1      	beq.n	403bbe <_svfprintf_r+0x686>
  403c7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403c7c:	3507      	adds	r5, #7
  403c7e:	f025 0507 	bic.w	r5, r5, #7
  403c82:	e9d5 2300 	ldrd	r2, r3, [r5]
  403c86:	2a00      	cmp	r2, #0
  403c88:	f105 0108 	add.w	r1, r5, #8
  403c8c:	461d      	mov	r5, r3
  403c8e:	f173 0300 	sbcs.w	r3, r3, #0
  403c92:	910f      	str	r1, [sp, #60]	; 0x3c
  403c94:	4614      	mov	r4, r2
  403c96:	daa6      	bge.n	403be6 <_svfprintf_r+0x6ae>
  403c98:	272d      	movs	r7, #45	; 0x2d
  403c9a:	4264      	negs	r4, r4
  403c9c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403ca0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403ca4:	2301      	movs	r3, #1
  403ca6:	e53d      	b.n	403724 <_svfprintf_r+0x1ec>
  403ca8:	9311      	str	r3, [sp, #68]	; 0x44
  403caa:	2a00      	cmp	r2, #0
  403cac:	f040 8662 	bne.w	404974 <_svfprintf_r+0x143c>
  403cb0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403cb2:	3507      	adds	r5, #7
  403cb4:	f025 0307 	bic.w	r3, r5, #7
  403cb8:	f103 0208 	add.w	r2, r3, #8
  403cbc:	920f      	str	r2, [sp, #60]	; 0x3c
  403cbe:	681a      	ldr	r2, [r3, #0]
  403cc0:	9215      	str	r2, [sp, #84]	; 0x54
  403cc2:	685b      	ldr	r3, [r3, #4]
  403cc4:	9314      	str	r3, [sp, #80]	; 0x50
  403cc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403cc8:	9d15      	ldr	r5, [sp, #84]	; 0x54
  403cca:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403cce:	4628      	mov	r0, r5
  403cd0:	4621      	mov	r1, r4
  403cd2:	f04f 32ff 	mov.w	r2, #4294967295
  403cd6:	4b59      	ldr	r3, [pc, #356]	; (403e3c <_svfprintf_r+0x904>)
  403cd8:	f003 fa7c 	bl	4071d4 <__aeabi_dcmpun>
  403cdc:	2800      	cmp	r0, #0
  403cde:	f040 834a 	bne.w	404376 <_svfprintf_r+0xe3e>
  403ce2:	4628      	mov	r0, r5
  403ce4:	4621      	mov	r1, r4
  403ce6:	f04f 32ff 	mov.w	r2, #4294967295
  403cea:	4b54      	ldr	r3, [pc, #336]	; (403e3c <_svfprintf_r+0x904>)
  403cec:	f003 fa54 	bl	407198 <__aeabi_dcmple>
  403cf0:	2800      	cmp	r0, #0
  403cf2:	f040 8340 	bne.w	404376 <_svfprintf_r+0xe3e>
  403cf6:	a815      	add	r0, sp, #84	; 0x54
  403cf8:	c80d      	ldmia	r0, {r0, r2, r3}
  403cfa:	9914      	ldr	r1, [sp, #80]	; 0x50
  403cfc:	f003 fa42 	bl	407184 <__aeabi_dcmplt>
  403d00:	2800      	cmp	r0, #0
  403d02:	f040 8530 	bne.w	404766 <_svfprintf_r+0x122e>
  403d06:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403d0a:	4e4d      	ldr	r6, [pc, #308]	; (403e40 <_svfprintf_r+0x908>)
  403d0c:	4b4d      	ldr	r3, [pc, #308]	; (403e44 <_svfprintf_r+0x90c>)
  403d0e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403d12:	9007      	str	r0, [sp, #28]
  403d14:	9811      	ldr	r0, [sp, #68]	; 0x44
  403d16:	2203      	movs	r2, #3
  403d18:	2100      	movs	r1, #0
  403d1a:	9208      	str	r2, [sp, #32]
  403d1c:	910a      	str	r1, [sp, #40]	; 0x28
  403d1e:	2847      	cmp	r0, #71	; 0x47
  403d20:	bfd8      	it	le
  403d22:	461e      	movle	r6, r3
  403d24:	920e      	str	r2, [sp, #56]	; 0x38
  403d26:	9112      	str	r1, [sp, #72]	; 0x48
  403d28:	e51e      	b.n	403768 <_svfprintf_r+0x230>
  403d2a:	f04b 0b08 	orr.w	fp, fp, #8
  403d2e:	f89a 3000 	ldrb.w	r3, [sl]
  403d32:	e459      	b.n	4035e8 <_svfprintf_r+0xb0>
  403d34:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403d38:	2300      	movs	r3, #0
  403d3a:	461c      	mov	r4, r3
  403d3c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403d40:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403d44:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403d48:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403d4c:	2809      	cmp	r0, #9
  403d4e:	d9f5      	bls.n	403d3c <_svfprintf_r+0x804>
  403d50:	940d      	str	r4, [sp, #52]	; 0x34
  403d52:	e44b      	b.n	4035ec <_svfprintf_r+0xb4>
  403d54:	f04b 0b10 	orr.w	fp, fp, #16
  403d58:	9311      	str	r3, [sp, #68]	; 0x44
  403d5a:	f01b 0320 	ands.w	r3, fp, #32
  403d5e:	f43f ae1d 	beq.w	40399c <_svfprintf_r+0x464>
  403d62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403d64:	3507      	adds	r5, #7
  403d66:	f025 0307 	bic.w	r3, r5, #7
  403d6a:	f103 0208 	add.w	r2, r3, #8
  403d6e:	e9d3 4500 	ldrd	r4, r5, [r3]
  403d72:	920f      	str	r2, [sp, #60]	; 0x3c
  403d74:	2300      	movs	r3, #0
  403d76:	e4d2      	b.n	40371e <_svfprintf_r+0x1e6>
  403d78:	9311      	str	r3, [sp, #68]	; 0x44
  403d7a:	2a00      	cmp	r2, #0
  403d7c:	f040 85e7 	bne.w	40494e <_svfprintf_r+0x1416>
  403d80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d82:	2a00      	cmp	r2, #0
  403d84:	f43f aca3 	beq.w	4036ce <_svfprintf_r+0x196>
  403d88:	2300      	movs	r3, #0
  403d8a:	2101      	movs	r1, #1
  403d8c:	461f      	mov	r7, r3
  403d8e:	9108      	str	r1, [sp, #32]
  403d90:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403d94:	f8cd b01c 	str.w	fp, [sp, #28]
  403d98:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403d9c:	930a      	str	r3, [sp, #40]	; 0x28
  403d9e:	9312      	str	r3, [sp, #72]	; 0x48
  403da0:	910e      	str	r1, [sp, #56]	; 0x38
  403da2:	ae28      	add	r6, sp, #160	; 0xa0
  403da4:	e4e4      	b.n	403770 <_svfprintf_r+0x238>
  403da6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403da8:	e534      	b.n	403814 <_svfprintf_r+0x2dc>
  403daa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403dac:	2b65      	cmp	r3, #101	; 0x65
  403dae:	f340 80a7 	ble.w	403f00 <_svfprintf_r+0x9c8>
  403db2:	a815      	add	r0, sp, #84	; 0x54
  403db4:	c80d      	ldmia	r0, {r0, r2, r3}
  403db6:	9914      	ldr	r1, [sp, #80]	; 0x50
  403db8:	f003 f9da 	bl	407170 <__aeabi_dcmpeq>
  403dbc:	2800      	cmp	r0, #0
  403dbe:	f000 8150 	beq.w	404062 <_svfprintf_r+0xb2a>
  403dc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403dc4:	4a20      	ldr	r2, [pc, #128]	; (403e48 <_svfprintf_r+0x910>)
  403dc6:	f8c8 2000 	str.w	r2, [r8]
  403dca:	3301      	adds	r3, #1
  403dcc:	3401      	adds	r4, #1
  403dce:	2201      	movs	r2, #1
  403dd0:	2b07      	cmp	r3, #7
  403dd2:	9427      	str	r4, [sp, #156]	; 0x9c
  403dd4:	9326      	str	r3, [sp, #152]	; 0x98
  403dd6:	f8c8 2004 	str.w	r2, [r8, #4]
  403dda:	f300 836a 	bgt.w	4044b2 <_svfprintf_r+0xf7a>
  403dde:	f108 0808 	add.w	r8, r8, #8
  403de2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403de4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403de6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403de8:	4293      	cmp	r3, r2
  403dea:	db03      	blt.n	403df4 <_svfprintf_r+0x8bc>
  403dec:	9b07      	ldr	r3, [sp, #28]
  403dee:	07dd      	lsls	r5, r3, #31
  403df0:	f57f ad82 	bpl.w	4038f8 <_svfprintf_r+0x3c0>
  403df4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403df6:	9919      	ldr	r1, [sp, #100]	; 0x64
  403df8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403dfa:	f8c8 2000 	str.w	r2, [r8]
  403dfe:	3301      	adds	r3, #1
  403e00:	440c      	add	r4, r1
  403e02:	2b07      	cmp	r3, #7
  403e04:	f8c8 1004 	str.w	r1, [r8, #4]
  403e08:	9427      	str	r4, [sp, #156]	; 0x9c
  403e0a:	9326      	str	r3, [sp, #152]	; 0x98
  403e0c:	f300 839e 	bgt.w	40454c <_svfprintf_r+0x1014>
  403e10:	f108 0808 	add.w	r8, r8, #8
  403e14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403e16:	1e5e      	subs	r6, r3, #1
  403e18:	2e00      	cmp	r6, #0
  403e1a:	f77f ad6d 	ble.w	4038f8 <_svfprintf_r+0x3c0>
  403e1e:	2e10      	cmp	r6, #16
  403e20:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e22:	4d0a      	ldr	r5, [pc, #40]	; (403e4c <_svfprintf_r+0x914>)
  403e24:	f340 81f5 	ble.w	404212 <_svfprintf_r+0xcda>
  403e28:	4622      	mov	r2, r4
  403e2a:	2710      	movs	r7, #16
  403e2c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403e30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403e32:	e013      	b.n	403e5c <_svfprintf_r+0x924>
  403e34:	0040753c 	.word	0x0040753c
  403e38:	00407528 	.word	0x00407528
  403e3c:	7fefffff 	.word	0x7fefffff
  403e40:	0040751c 	.word	0x0040751c
  403e44:	00407518 	.word	0x00407518
  403e48:	00407558 	.word	0x00407558
  403e4c:	0040756c 	.word	0x0040756c
  403e50:	f108 0808 	add.w	r8, r8, #8
  403e54:	3e10      	subs	r6, #16
  403e56:	2e10      	cmp	r6, #16
  403e58:	f340 81da 	ble.w	404210 <_svfprintf_r+0xcd8>
  403e5c:	3301      	adds	r3, #1
  403e5e:	3210      	adds	r2, #16
  403e60:	2b07      	cmp	r3, #7
  403e62:	9227      	str	r2, [sp, #156]	; 0x9c
  403e64:	9326      	str	r3, [sp, #152]	; 0x98
  403e66:	e888 00a0 	stmia.w	r8, {r5, r7}
  403e6a:	ddf1      	ble.n	403e50 <_svfprintf_r+0x918>
  403e6c:	aa25      	add	r2, sp, #148	; 0x94
  403e6e:	4621      	mov	r1, r4
  403e70:	4658      	mov	r0, fp
  403e72:	f002 fcb3 	bl	4067dc <__ssprint_r>
  403e76:	2800      	cmp	r0, #0
  403e78:	f47f ac30 	bne.w	4036dc <_svfprintf_r+0x1a4>
  403e7c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403e7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e80:	46c8      	mov	r8, r9
  403e82:	e7e7      	b.n	403e54 <_svfprintf_r+0x91c>
  403e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403e86:	9a08      	ldr	r2, [sp, #32]
  403e88:	1a9f      	subs	r7, r3, r2
  403e8a:	2f00      	cmp	r7, #0
  403e8c:	f77f ace5 	ble.w	40385a <_svfprintf_r+0x322>
  403e90:	2f10      	cmp	r7, #16
  403e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e94:	4db6      	ldr	r5, [pc, #728]	; (404170 <_svfprintf_r+0xc38>)
  403e96:	dd27      	ble.n	403ee8 <_svfprintf_r+0x9b0>
  403e98:	4642      	mov	r2, r8
  403e9a:	4621      	mov	r1, r4
  403e9c:	46b0      	mov	r8, r6
  403e9e:	f04f 0b10 	mov.w	fp, #16
  403ea2:	462e      	mov	r6, r5
  403ea4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403ea6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403ea8:	e004      	b.n	403eb4 <_svfprintf_r+0x97c>
  403eaa:	3f10      	subs	r7, #16
  403eac:	2f10      	cmp	r7, #16
  403eae:	f102 0208 	add.w	r2, r2, #8
  403eb2:	dd15      	ble.n	403ee0 <_svfprintf_r+0x9a8>
  403eb4:	3301      	adds	r3, #1
  403eb6:	3110      	adds	r1, #16
  403eb8:	2b07      	cmp	r3, #7
  403eba:	9127      	str	r1, [sp, #156]	; 0x9c
  403ebc:	9326      	str	r3, [sp, #152]	; 0x98
  403ebe:	e882 0840 	stmia.w	r2, {r6, fp}
  403ec2:	ddf2      	ble.n	403eaa <_svfprintf_r+0x972>
  403ec4:	aa25      	add	r2, sp, #148	; 0x94
  403ec6:	4629      	mov	r1, r5
  403ec8:	4620      	mov	r0, r4
  403eca:	f002 fc87 	bl	4067dc <__ssprint_r>
  403ece:	2800      	cmp	r0, #0
  403ed0:	f47f ac04 	bne.w	4036dc <_svfprintf_r+0x1a4>
  403ed4:	3f10      	subs	r7, #16
  403ed6:	2f10      	cmp	r7, #16
  403ed8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403eda:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403edc:	464a      	mov	r2, r9
  403ede:	dce9      	bgt.n	403eb4 <_svfprintf_r+0x97c>
  403ee0:	4635      	mov	r5, r6
  403ee2:	460c      	mov	r4, r1
  403ee4:	4646      	mov	r6, r8
  403ee6:	4690      	mov	r8, r2
  403ee8:	3301      	adds	r3, #1
  403eea:	443c      	add	r4, r7
  403eec:	2b07      	cmp	r3, #7
  403eee:	9427      	str	r4, [sp, #156]	; 0x9c
  403ef0:	9326      	str	r3, [sp, #152]	; 0x98
  403ef2:	e888 00a0 	stmia.w	r8, {r5, r7}
  403ef6:	f300 8232 	bgt.w	40435e <_svfprintf_r+0xe26>
  403efa:	f108 0808 	add.w	r8, r8, #8
  403efe:	e4ac      	b.n	40385a <_svfprintf_r+0x322>
  403f00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403f02:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403f04:	2b01      	cmp	r3, #1
  403f06:	f340 81fe 	ble.w	404306 <_svfprintf_r+0xdce>
  403f0a:	3701      	adds	r7, #1
  403f0c:	3401      	adds	r4, #1
  403f0e:	2301      	movs	r3, #1
  403f10:	2f07      	cmp	r7, #7
  403f12:	9427      	str	r4, [sp, #156]	; 0x9c
  403f14:	9726      	str	r7, [sp, #152]	; 0x98
  403f16:	f8c8 6000 	str.w	r6, [r8]
  403f1a:	f8c8 3004 	str.w	r3, [r8, #4]
  403f1e:	f300 8203 	bgt.w	404328 <_svfprintf_r+0xdf0>
  403f22:	f108 0808 	add.w	r8, r8, #8
  403f26:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403f28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  403f2a:	f8c8 3000 	str.w	r3, [r8]
  403f2e:	3701      	adds	r7, #1
  403f30:	4414      	add	r4, r2
  403f32:	2f07      	cmp	r7, #7
  403f34:	9427      	str	r4, [sp, #156]	; 0x9c
  403f36:	9726      	str	r7, [sp, #152]	; 0x98
  403f38:	f8c8 2004 	str.w	r2, [r8, #4]
  403f3c:	f300 8200 	bgt.w	404340 <_svfprintf_r+0xe08>
  403f40:	f108 0808 	add.w	r8, r8, #8
  403f44:	a815      	add	r0, sp, #84	; 0x54
  403f46:	c80d      	ldmia	r0, {r0, r2, r3}
  403f48:	9914      	ldr	r1, [sp, #80]	; 0x50
  403f4a:	f003 f911 	bl	407170 <__aeabi_dcmpeq>
  403f4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403f50:	2800      	cmp	r0, #0
  403f52:	f040 8101 	bne.w	404158 <_svfprintf_r+0xc20>
  403f56:	3b01      	subs	r3, #1
  403f58:	3701      	adds	r7, #1
  403f5a:	3601      	adds	r6, #1
  403f5c:	441c      	add	r4, r3
  403f5e:	2f07      	cmp	r7, #7
  403f60:	9726      	str	r7, [sp, #152]	; 0x98
  403f62:	9427      	str	r4, [sp, #156]	; 0x9c
  403f64:	f8c8 6000 	str.w	r6, [r8]
  403f68:	f8c8 3004 	str.w	r3, [r8, #4]
  403f6c:	f300 8127 	bgt.w	4041be <_svfprintf_r+0xc86>
  403f70:	f108 0808 	add.w	r8, r8, #8
  403f74:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  403f76:	f8c8 2004 	str.w	r2, [r8, #4]
  403f7a:	3701      	adds	r7, #1
  403f7c:	4414      	add	r4, r2
  403f7e:	ab21      	add	r3, sp, #132	; 0x84
  403f80:	2f07      	cmp	r7, #7
  403f82:	9427      	str	r4, [sp, #156]	; 0x9c
  403f84:	9726      	str	r7, [sp, #152]	; 0x98
  403f86:	f8c8 3000 	str.w	r3, [r8]
  403f8a:	f77f acb3 	ble.w	4038f4 <_svfprintf_r+0x3bc>
  403f8e:	aa25      	add	r2, sp, #148	; 0x94
  403f90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403f92:	980c      	ldr	r0, [sp, #48]	; 0x30
  403f94:	f002 fc22 	bl	4067dc <__ssprint_r>
  403f98:	2800      	cmp	r0, #0
  403f9a:	f47f ab9f 	bne.w	4036dc <_svfprintf_r+0x1a4>
  403f9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403fa0:	46c8      	mov	r8, r9
  403fa2:	e4a9      	b.n	4038f8 <_svfprintf_r+0x3c0>
  403fa4:	aa25      	add	r2, sp, #148	; 0x94
  403fa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403fa8:	980c      	ldr	r0, [sp, #48]	; 0x30
  403faa:	f002 fc17 	bl	4067dc <__ssprint_r>
  403fae:	2800      	cmp	r0, #0
  403fb0:	f43f aceb 	beq.w	40398a <_svfprintf_r+0x452>
  403fb4:	f7ff bb92 	b.w	4036dc <_svfprintf_r+0x1a4>
  403fb8:	f8dd b01c 	ldr.w	fp, [sp, #28]
  403fbc:	2b01      	cmp	r3, #1
  403fbe:	f000 8134 	beq.w	40422a <_svfprintf_r+0xcf2>
  403fc2:	2b02      	cmp	r3, #2
  403fc4:	d125      	bne.n	404012 <_svfprintf_r+0xada>
  403fc6:	f8cd b01c 	str.w	fp, [sp, #28]
  403fca:	2400      	movs	r4, #0
  403fcc:	2500      	movs	r5, #0
  403fce:	e61e      	b.n	403c0e <_svfprintf_r+0x6d6>
  403fd0:	aa25      	add	r2, sp, #148	; 0x94
  403fd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403fd4:	980c      	ldr	r0, [sp, #48]	; 0x30
  403fd6:	f002 fc01 	bl	4067dc <__ssprint_r>
  403fda:	2800      	cmp	r0, #0
  403fdc:	f47f ab7e 	bne.w	4036dc <_svfprintf_r+0x1a4>
  403fe0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403fe2:	46c8      	mov	r8, r9
  403fe4:	e475      	b.n	4038d2 <_svfprintf_r+0x39a>
  403fe6:	aa25      	add	r2, sp, #148	; 0x94
  403fe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403fea:	980c      	ldr	r0, [sp, #48]	; 0x30
  403fec:	f002 fbf6 	bl	4067dc <__ssprint_r>
  403ff0:	2800      	cmp	r0, #0
  403ff2:	f47f ab73 	bne.w	4036dc <_svfprintf_r+0x1a4>
  403ff6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403ff8:	46c8      	mov	r8, r9
  403ffa:	e41b      	b.n	403834 <_svfprintf_r+0x2fc>
  403ffc:	aa25      	add	r2, sp, #148	; 0x94
  403ffe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404000:	980c      	ldr	r0, [sp, #48]	; 0x30
  404002:	f002 fbeb 	bl	4067dc <__ssprint_r>
  404006:	2800      	cmp	r0, #0
  404008:	f47f ab68 	bne.w	4036dc <_svfprintf_r+0x1a4>
  40400c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40400e:	46c8      	mov	r8, r9
  404010:	e420      	b.n	403854 <_svfprintf_r+0x31c>
  404012:	f8cd b01c 	str.w	fp, [sp, #28]
  404016:	2400      	movs	r4, #0
  404018:	2500      	movs	r5, #0
  40401a:	4649      	mov	r1, r9
  40401c:	e000      	b.n	404020 <_svfprintf_r+0xae8>
  40401e:	4631      	mov	r1, r6
  404020:	08e2      	lsrs	r2, r4, #3
  404022:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404026:	08e8      	lsrs	r0, r5, #3
  404028:	f004 0307 	and.w	r3, r4, #7
  40402c:	4605      	mov	r5, r0
  40402e:	4614      	mov	r4, r2
  404030:	3330      	adds	r3, #48	; 0x30
  404032:	ea54 0205 	orrs.w	r2, r4, r5
  404036:	f801 3c01 	strb.w	r3, [r1, #-1]
  40403a:	f101 36ff 	add.w	r6, r1, #4294967295
  40403e:	d1ee      	bne.n	40401e <_svfprintf_r+0xae6>
  404040:	9a07      	ldr	r2, [sp, #28]
  404042:	07d2      	lsls	r2, r2, #31
  404044:	f57f adf3 	bpl.w	403c2e <_svfprintf_r+0x6f6>
  404048:	2b30      	cmp	r3, #48	; 0x30
  40404a:	f43f adf0 	beq.w	403c2e <_svfprintf_r+0x6f6>
  40404e:	3902      	subs	r1, #2
  404050:	2330      	movs	r3, #48	; 0x30
  404052:	f806 3c01 	strb.w	r3, [r6, #-1]
  404056:	eba9 0301 	sub.w	r3, r9, r1
  40405a:	930e      	str	r3, [sp, #56]	; 0x38
  40405c:	460e      	mov	r6, r1
  40405e:	f7ff bb7b 	b.w	403758 <_svfprintf_r+0x220>
  404062:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404064:	2900      	cmp	r1, #0
  404066:	f340 822e 	ble.w	4044c6 <_svfprintf_r+0xf8e>
  40406a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40406c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40406e:	4293      	cmp	r3, r2
  404070:	bfa8      	it	ge
  404072:	4613      	movge	r3, r2
  404074:	2b00      	cmp	r3, #0
  404076:	461f      	mov	r7, r3
  404078:	dd0d      	ble.n	404096 <_svfprintf_r+0xb5e>
  40407a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40407c:	f8c8 6000 	str.w	r6, [r8]
  404080:	3301      	adds	r3, #1
  404082:	443c      	add	r4, r7
  404084:	2b07      	cmp	r3, #7
  404086:	9427      	str	r4, [sp, #156]	; 0x9c
  404088:	f8c8 7004 	str.w	r7, [r8, #4]
  40408c:	9326      	str	r3, [sp, #152]	; 0x98
  40408e:	f300 831f 	bgt.w	4046d0 <_svfprintf_r+0x1198>
  404092:	f108 0808 	add.w	r8, r8, #8
  404096:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404098:	2f00      	cmp	r7, #0
  40409a:	bfa8      	it	ge
  40409c:	1bdb      	subge	r3, r3, r7
  40409e:	2b00      	cmp	r3, #0
  4040a0:	461f      	mov	r7, r3
  4040a2:	f340 80d6 	ble.w	404252 <_svfprintf_r+0xd1a>
  4040a6:	2f10      	cmp	r7, #16
  4040a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040aa:	4d31      	ldr	r5, [pc, #196]	; (404170 <_svfprintf_r+0xc38>)
  4040ac:	f340 81ed 	ble.w	40448a <_svfprintf_r+0xf52>
  4040b0:	4642      	mov	r2, r8
  4040b2:	4621      	mov	r1, r4
  4040b4:	46b0      	mov	r8, r6
  4040b6:	f04f 0b10 	mov.w	fp, #16
  4040ba:	462e      	mov	r6, r5
  4040bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4040be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4040c0:	e004      	b.n	4040cc <_svfprintf_r+0xb94>
  4040c2:	3208      	adds	r2, #8
  4040c4:	3f10      	subs	r7, #16
  4040c6:	2f10      	cmp	r7, #16
  4040c8:	f340 81db 	ble.w	404482 <_svfprintf_r+0xf4a>
  4040cc:	3301      	adds	r3, #1
  4040ce:	3110      	adds	r1, #16
  4040d0:	2b07      	cmp	r3, #7
  4040d2:	9127      	str	r1, [sp, #156]	; 0x9c
  4040d4:	9326      	str	r3, [sp, #152]	; 0x98
  4040d6:	e882 0840 	stmia.w	r2, {r6, fp}
  4040da:	ddf2      	ble.n	4040c2 <_svfprintf_r+0xb8a>
  4040dc:	aa25      	add	r2, sp, #148	; 0x94
  4040de:	4629      	mov	r1, r5
  4040e0:	4620      	mov	r0, r4
  4040e2:	f002 fb7b 	bl	4067dc <__ssprint_r>
  4040e6:	2800      	cmp	r0, #0
  4040e8:	f47f aaf8 	bne.w	4036dc <_svfprintf_r+0x1a4>
  4040ec:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4040ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040f0:	464a      	mov	r2, r9
  4040f2:	e7e7      	b.n	4040c4 <_svfprintf_r+0xb8c>
  4040f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4040f6:	930e      	str	r3, [sp, #56]	; 0x38
  4040f8:	464e      	mov	r6, r9
  4040fa:	f7ff bb2d 	b.w	403758 <_svfprintf_r+0x220>
  4040fe:	2d00      	cmp	r5, #0
  404100:	bf08      	it	eq
  404102:	2c0a      	cmpeq	r4, #10
  404104:	f0c0 808f 	bcc.w	404226 <_svfprintf_r+0xcee>
  404108:	464e      	mov	r6, r9
  40410a:	4620      	mov	r0, r4
  40410c:	4629      	mov	r1, r5
  40410e:	220a      	movs	r2, #10
  404110:	2300      	movs	r3, #0
  404112:	f003 f875 	bl	407200 <__aeabi_uldivmod>
  404116:	3230      	adds	r2, #48	; 0x30
  404118:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40411c:	4620      	mov	r0, r4
  40411e:	4629      	mov	r1, r5
  404120:	2300      	movs	r3, #0
  404122:	220a      	movs	r2, #10
  404124:	f003 f86c 	bl	407200 <__aeabi_uldivmod>
  404128:	4604      	mov	r4, r0
  40412a:	460d      	mov	r5, r1
  40412c:	ea54 0305 	orrs.w	r3, r4, r5
  404130:	d1eb      	bne.n	40410a <_svfprintf_r+0xbd2>
  404132:	eba9 0306 	sub.w	r3, r9, r6
  404136:	930e      	str	r3, [sp, #56]	; 0x38
  404138:	f7ff bb0e 	b.w	403758 <_svfprintf_r+0x220>
  40413c:	aa25      	add	r2, sp, #148	; 0x94
  40413e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404140:	980c      	ldr	r0, [sp, #48]	; 0x30
  404142:	f002 fb4b 	bl	4067dc <__ssprint_r>
  404146:	2800      	cmp	r0, #0
  404148:	f47f aac8 	bne.w	4036dc <_svfprintf_r+0x1a4>
  40414c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404150:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404152:	46c8      	mov	r8, r9
  404154:	f7ff bb5e 	b.w	403814 <_svfprintf_r+0x2dc>
  404158:	1e5e      	subs	r6, r3, #1
  40415a:	2e00      	cmp	r6, #0
  40415c:	f77f af0a 	ble.w	403f74 <_svfprintf_r+0xa3c>
  404160:	2e10      	cmp	r6, #16
  404162:	4d03      	ldr	r5, [pc, #12]	; (404170 <_svfprintf_r+0xc38>)
  404164:	dd22      	ble.n	4041ac <_svfprintf_r+0xc74>
  404166:	4622      	mov	r2, r4
  404168:	f04f 0b10 	mov.w	fp, #16
  40416c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40416e:	e006      	b.n	40417e <_svfprintf_r+0xc46>
  404170:	0040756c 	.word	0x0040756c
  404174:	3e10      	subs	r6, #16
  404176:	2e10      	cmp	r6, #16
  404178:	f108 0808 	add.w	r8, r8, #8
  40417c:	dd15      	ble.n	4041aa <_svfprintf_r+0xc72>
  40417e:	3701      	adds	r7, #1
  404180:	3210      	adds	r2, #16
  404182:	2f07      	cmp	r7, #7
  404184:	9227      	str	r2, [sp, #156]	; 0x9c
  404186:	9726      	str	r7, [sp, #152]	; 0x98
  404188:	e888 0820 	stmia.w	r8, {r5, fp}
  40418c:	ddf2      	ble.n	404174 <_svfprintf_r+0xc3c>
  40418e:	aa25      	add	r2, sp, #148	; 0x94
  404190:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404192:	4620      	mov	r0, r4
  404194:	f002 fb22 	bl	4067dc <__ssprint_r>
  404198:	2800      	cmp	r0, #0
  40419a:	f47f aa9f 	bne.w	4036dc <_svfprintf_r+0x1a4>
  40419e:	3e10      	subs	r6, #16
  4041a0:	2e10      	cmp	r6, #16
  4041a2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4041a4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4041a6:	46c8      	mov	r8, r9
  4041a8:	dce9      	bgt.n	40417e <_svfprintf_r+0xc46>
  4041aa:	4614      	mov	r4, r2
  4041ac:	3701      	adds	r7, #1
  4041ae:	4434      	add	r4, r6
  4041b0:	2f07      	cmp	r7, #7
  4041b2:	9427      	str	r4, [sp, #156]	; 0x9c
  4041b4:	9726      	str	r7, [sp, #152]	; 0x98
  4041b6:	e888 0060 	stmia.w	r8, {r5, r6}
  4041ba:	f77f aed9 	ble.w	403f70 <_svfprintf_r+0xa38>
  4041be:	aa25      	add	r2, sp, #148	; 0x94
  4041c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041c2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4041c4:	f002 fb0a 	bl	4067dc <__ssprint_r>
  4041c8:	2800      	cmp	r0, #0
  4041ca:	f47f aa87 	bne.w	4036dc <_svfprintf_r+0x1a4>
  4041ce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041d0:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4041d2:	46c8      	mov	r8, r9
  4041d4:	e6ce      	b.n	403f74 <_svfprintf_r+0xa3c>
  4041d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4041d8:	6814      	ldr	r4, [r2, #0]
  4041da:	4613      	mov	r3, r2
  4041dc:	3304      	adds	r3, #4
  4041de:	17e5      	asrs	r5, r4, #31
  4041e0:	930f      	str	r3, [sp, #60]	; 0x3c
  4041e2:	4622      	mov	r2, r4
  4041e4:	462b      	mov	r3, r5
  4041e6:	e4fa      	b.n	403bde <_svfprintf_r+0x6a6>
  4041e8:	3204      	adds	r2, #4
  4041ea:	681c      	ldr	r4, [r3, #0]
  4041ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4041ee:	2301      	movs	r3, #1
  4041f0:	2500      	movs	r5, #0
  4041f2:	f7ff ba94 	b.w	40371e <_svfprintf_r+0x1e6>
  4041f6:	681c      	ldr	r4, [r3, #0]
  4041f8:	3304      	adds	r3, #4
  4041fa:	930f      	str	r3, [sp, #60]	; 0x3c
  4041fc:	2500      	movs	r5, #0
  4041fe:	e421      	b.n	403a44 <_svfprintf_r+0x50c>
  404200:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404202:	460a      	mov	r2, r1
  404204:	3204      	adds	r2, #4
  404206:	680c      	ldr	r4, [r1, #0]
  404208:	920f      	str	r2, [sp, #60]	; 0x3c
  40420a:	2500      	movs	r5, #0
  40420c:	f7ff ba87 	b.w	40371e <_svfprintf_r+0x1e6>
  404210:	4614      	mov	r4, r2
  404212:	3301      	adds	r3, #1
  404214:	4434      	add	r4, r6
  404216:	2b07      	cmp	r3, #7
  404218:	9427      	str	r4, [sp, #156]	; 0x9c
  40421a:	9326      	str	r3, [sp, #152]	; 0x98
  40421c:	e888 0060 	stmia.w	r8, {r5, r6}
  404220:	f77f ab68 	ble.w	4038f4 <_svfprintf_r+0x3bc>
  404224:	e6b3      	b.n	403f8e <_svfprintf_r+0xa56>
  404226:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40422a:	f8cd b01c 	str.w	fp, [sp, #28]
  40422e:	ae42      	add	r6, sp, #264	; 0x108
  404230:	3430      	adds	r4, #48	; 0x30
  404232:	2301      	movs	r3, #1
  404234:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404238:	930e      	str	r3, [sp, #56]	; 0x38
  40423a:	f7ff ba8d 	b.w	403758 <_svfprintf_r+0x220>
  40423e:	aa25      	add	r2, sp, #148	; 0x94
  404240:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404242:	980c      	ldr	r0, [sp, #48]	; 0x30
  404244:	f002 faca 	bl	4067dc <__ssprint_r>
  404248:	2800      	cmp	r0, #0
  40424a:	f47f aa47 	bne.w	4036dc <_svfprintf_r+0x1a4>
  40424e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404250:	46c8      	mov	r8, r9
  404252:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404254:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404256:	429a      	cmp	r2, r3
  404258:	db44      	blt.n	4042e4 <_svfprintf_r+0xdac>
  40425a:	9b07      	ldr	r3, [sp, #28]
  40425c:	07d9      	lsls	r1, r3, #31
  40425e:	d441      	bmi.n	4042e4 <_svfprintf_r+0xdac>
  404260:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404262:	9812      	ldr	r0, [sp, #72]	; 0x48
  404264:	1a9a      	subs	r2, r3, r2
  404266:	1a1d      	subs	r5, r3, r0
  404268:	4295      	cmp	r5, r2
  40426a:	bfa8      	it	ge
  40426c:	4615      	movge	r5, r2
  40426e:	2d00      	cmp	r5, #0
  404270:	dd0e      	ble.n	404290 <_svfprintf_r+0xd58>
  404272:	9926      	ldr	r1, [sp, #152]	; 0x98
  404274:	f8c8 5004 	str.w	r5, [r8, #4]
  404278:	3101      	adds	r1, #1
  40427a:	4406      	add	r6, r0
  40427c:	442c      	add	r4, r5
  40427e:	2907      	cmp	r1, #7
  404280:	f8c8 6000 	str.w	r6, [r8]
  404284:	9427      	str	r4, [sp, #156]	; 0x9c
  404286:	9126      	str	r1, [sp, #152]	; 0x98
  404288:	f300 823b 	bgt.w	404702 <_svfprintf_r+0x11ca>
  40428c:	f108 0808 	add.w	r8, r8, #8
  404290:	2d00      	cmp	r5, #0
  404292:	bfac      	ite	ge
  404294:	1b56      	subge	r6, r2, r5
  404296:	4616      	movlt	r6, r2
  404298:	2e00      	cmp	r6, #0
  40429a:	f77f ab2d 	ble.w	4038f8 <_svfprintf_r+0x3c0>
  40429e:	2e10      	cmp	r6, #16
  4042a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042a2:	4db0      	ldr	r5, [pc, #704]	; (404564 <_svfprintf_r+0x102c>)
  4042a4:	ddb5      	ble.n	404212 <_svfprintf_r+0xcda>
  4042a6:	4622      	mov	r2, r4
  4042a8:	2710      	movs	r7, #16
  4042aa:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4042ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4042b0:	e004      	b.n	4042bc <_svfprintf_r+0xd84>
  4042b2:	f108 0808 	add.w	r8, r8, #8
  4042b6:	3e10      	subs	r6, #16
  4042b8:	2e10      	cmp	r6, #16
  4042ba:	dda9      	ble.n	404210 <_svfprintf_r+0xcd8>
  4042bc:	3301      	adds	r3, #1
  4042be:	3210      	adds	r2, #16
  4042c0:	2b07      	cmp	r3, #7
  4042c2:	9227      	str	r2, [sp, #156]	; 0x9c
  4042c4:	9326      	str	r3, [sp, #152]	; 0x98
  4042c6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4042ca:	ddf2      	ble.n	4042b2 <_svfprintf_r+0xd7a>
  4042cc:	aa25      	add	r2, sp, #148	; 0x94
  4042ce:	4621      	mov	r1, r4
  4042d0:	4658      	mov	r0, fp
  4042d2:	f002 fa83 	bl	4067dc <__ssprint_r>
  4042d6:	2800      	cmp	r0, #0
  4042d8:	f47f aa00 	bne.w	4036dc <_svfprintf_r+0x1a4>
  4042dc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4042de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042e0:	46c8      	mov	r8, r9
  4042e2:	e7e8      	b.n	4042b6 <_svfprintf_r+0xd7e>
  4042e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042e6:	9819      	ldr	r0, [sp, #100]	; 0x64
  4042e8:	991a      	ldr	r1, [sp, #104]	; 0x68
  4042ea:	f8c8 1000 	str.w	r1, [r8]
  4042ee:	3301      	adds	r3, #1
  4042f0:	4404      	add	r4, r0
  4042f2:	2b07      	cmp	r3, #7
  4042f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4042f6:	f8c8 0004 	str.w	r0, [r8, #4]
  4042fa:	9326      	str	r3, [sp, #152]	; 0x98
  4042fc:	f300 81f5 	bgt.w	4046ea <_svfprintf_r+0x11b2>
  404300:	f108 0808 	add.w	r8, r8, #8
  404304:	e7ac      	b.n	404260 <_svfprintf_r+0xd28>
  404306:	9b07      	ldr	r3, [sp, #28]
  404308:	07da      	lsls	r2, r3, #31
  40430a:	f53f adfe 	bmi.w	403f0a <_svfprintf_r+0x9d2>
  40430e:	3701      	adds	r7, #1
  404310:	3401      	adds	r4, #1
  404312:	2301      	movs	r3, #1
  404314:	2f07      	cmp	r7, #7
  404316:	9427      	str	r4, [sp, #156]	; 0x9c
  404318:	9726      	str	r7, [sp, #152]	; 0x98
  40431a:	f8c8 6000 	str.w	r6, [r8]
  40431e:	f8c8 3004 	str.w	r3, [r8, #4]
  404322:	f77f ae25 	ble.w	403f70 <_svfprintf_r+0xa38>
  404326:	e74a      	b.n	4041be <_svfprintf_r+0xc86>
  404328:	aa25      	add	r2, sp, #148	; 0x94
  40432a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40432c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40432e:	f002 fa55 	bl	4067dc <__ssprint_r>
  404332:	2800      	cmp	r0, #0
  404334:	f47f a9d2 	bne.w	4036dc <_svfprintf_r+0x1a4>
  404338:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40433a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40433c:	46c8      	mov	r8, r9
  40433e:	e5f2      	b.n	403f26 <_svfprintf_r+0x9ee>
  404340:	aa25      	add	r2, sp, #148	; 0x94
  404342:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404344:	980c      	ldr	r0, [sp, #48]	; 0x30
  404346:	f002 fa49 	bl	4067dc <__ssprint_r>
  40434a:	2800      	cmp	r0, #0
  40434c:	f47f a9c6 	bne.w	4036dc <_svfprintf_r+0x1a4>
  404350:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404352:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404354:	46c8      	mov	r8, r9
  404356:	e5f5      	b.n	403f44 <_svfprintf_r+0xa0c>
  404358:	464e      	mov	r6, r9
  40435a:	f7ff b9fd 	b.w	403758 <_svfprintf_r+0x220>
  40435e:	aa25      	add	r2, sp, #148	; 0x94
  404360:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404362:	980c      	ldr	r0, [sp, #48]	; 0x30
  404364:	f002 fa3a 	bl	4067dc <__ssprint_r>
  404368:	2800      	cmp	r0, #0
  40436a:	f47f a9b7 	bne.w	4036dc <_svfprintf_r+0x1a4>
  40436e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404370:	46c8      	mov	r8, r9
  404372:	f7ff ba72 	b.w	40385a <_svfprintf_r+0x322>
  404376:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404378:	4622      	mov	r2, r4
  40437a:	4620      	mov	r0, r4
  40437c:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40437e:	4623      	mov	r3, r4
  404380:	4621      	mov	r1, r4
  404382:	f002 ff27 	bl	4071d4 <__aeabi_dcmpun>
  404386:	2800      	cmp	r0, #0
  404388:	f040 8286 	bne.w	404898 <_svfprintf_r+0x1360>
  40438c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40438e:	3301      	adds	r3, #1
  404390:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404392:	f023 0320 	bic.w	r3, r3, #32
  404396:	930e      	str	r3, [sp, #56]	; 0x38
  404398:	f000 81e2 	beq.w	404760 <_svfprintf_r+0x1228>
  40439c:	2b47      	cmp	r3, #71	; 0x47
  40439e:	f000 811e 	beq.w	4045de <_svfprintf_r+0x10a6>
  4043a2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4043a6:	9307      	str	r3, [sp, #28]
  4043a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4043aa:	1e1f      	subs	r7, r3, #0
  4043ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4043ae:	9308      	str	r3, [sp, #32]
  4043b0:	bfbb      	ittet	lt
  4043b2:	463b      	movlt	r3, r7
  4043b4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4043b8:	2300      	movge	r3, #0
  4043ba:	232d      	movlt	r3, #45	; 0x2d
  4043bc:	9310      	str	r3, [sp, #64]	; 0x40
  4043be:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4043c0:	2b66      	cmp	r3, #102	; 0x66
  4043c2:	f000 81bb 	beq.w	40473c <_svfprintf_r+0x1204>
  4043c6:	2b46      	cmp	r3, #70	; 0x46
  4043c8:	f000 80df 	beq.w	40458a <_svfprintf_r+0x1052>
  4043cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4043ce:	9a08      	ldr	r2, [sp, #32]
  4043d0:	2b45      	cmp	r3, #69	; 0x45
  4043d2:	bf0c      	ite	eq
  4043d4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4043d6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4043d8:	a823      	add	r0, sp, #140	; 0x8c
  4043da:	a920      	add	r1, sp, #128	; 0x80
  4043dc:	bf08      	it	eq
  4043de:	1c5d      	addeq	r5, r3, #1
  4043e0:	9004      	str	r0, [sp, #16]
  4043e2:	9103      	str	r1, [sp, #12]
  4043e4:	a81f      	add	r0, sp, #124	; 0x7c
  4043e6:	2102      	movs	r1, #2
  4043e8:	463b      	mov	r3, r7
  4043ea:	9002      	str	r0, [sp, #8]
  4043ec:	9501      	str	r5, [sp, #4]
  4043ee:	9100      	str	r1, [sp, #0]
  4043f0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043f2:	f000 fb75 	bl	404ae0 <_dtoa_r>
  4043f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4043f8:	2b67      	cmp	r3, #103	; 0x67
  4043fa:	4606      	mov	r6, r0
  4043fc:	f040 81e0 	bne.w	4047c0 <_svfprintf_r+0x1288>
  404400:	f01b 0f01 	tst.w	fp, #1
  404404:	f000 8246 	beq.w	404894 <_svfprintf_r+0x135c>
  404408:	1974      	adds	r4, r6, r5
  40440a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40440c:	9808      	ldr	r0, [sp, #32]
  40440e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404410:	4639      	mov	r1, r7
  404412:	f002 fead 	bl	407170 <__aeabi_dcmpeq>
  404416:	2800      	cmp	r0, #0
  404418:	f040 8165 	bne.w	4046e6 <_svfprintf_r+0x11ae>
  40441c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40441e:	42a3      	cmp	r3, r4
  404420:	d206      	bcs.n	404430 <_svfprintf_r+0xef8>
  404422:	2130      	movs	r1, #48	; 0x30
  404424:	1c5a      	adds	r2, r3, #1
  404426:	9223      	str	r2, [sp, #140]	; 0x8c
  404428:	7019      	strb	r1, [r3, #0]
  40442a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40442c:	429c      	cmp	r4, r3
  40442e:	d8f9      	bhi.n	404424 <_svfprintf_r+0xeec>
  404430:	1b9b      	subs	r3, r3, r6
  404432:	9313      	str	r3, [sp, #76]	; 0x4c
  404434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404436:	2b47      	cmp	r3, #71	; 0x47
  404438:	f000 80e9 	beq.w	40460e <_svfprintf_r+0x10d6>
  40443c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40443e:	2b65      	cmp	r3, #101	; 0x65
  404440:	f340 81cd 	ble.w	4047de <_svfprintf_r+0x12a6>
  404444:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404446:	2b66      	cmp	r3, #102	; 0x66
  404448:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40444a:	9312      	str	r3, [sp, #72]	; 0x48
  40444c:	f000 819e 	beq.w	40478c <_svfprintf_r+0x1254>
  404450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404452:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404454:	4619      	mov	r1, r3
  404456:	4291      	cmp	r1, r2
  404458:	f300 818a 	bgt.w	404770 <_svfprintf_r+0x1238>
  40445c:	f01b 0f01 	tst.w	fp, #1
  404460:	f040 8213 	bne.w	40488a <_svfprintf_r+0x1352>
  404464:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404468:	9308      	str	r3, [sp, #32]
  40446a:	2367      	movs	r3, #103	; 0x67
  40446c:	920e      	str	r2, [sp, #56]	; 0x38
  40446e:	9311      	str	r3, [sp, #68]	; 0x44
  404470:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404472:	2b00      	cmp	r3, #0
  404474:	f040 80c4 	bne.w	404600 <_svfprintf_r+0x10c8>
  404478:	930a      	str	r3, [sp, #40]	; 0x28
  40447a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40447e:	f7ff b973 	b.w	403768 <_svfprintf_r+0x230>
  404482:	4635      	mov	r5, r6
  404484:	460c      	mov	r4, r1
  404486:	4646      	mov	r6, r8
  404488:	4690      	mov	r8, r2
  40448a:	3301      	adds	r3, #1
  40448c:	443c      	add	r4, r7
  40448e:	2b07      	cmp	r3, #7
  404490:	9427      	str	r4, [sp, #156]	; 0x9c
  404492:	9326      	str	r3, [sp, #152]	; 0x98
  404494:	e888 00a0 	stmia.w	r8, {r5, r7}
  404498:	f73f aed1 	bgt.w	40423e <_svfprintf_r+0xd06>
  40449c:	f108 0808 	add.w	r8, r8, #8
  4044a0:	e6d7      	b.n	404252 <_svfprintf_r+0xd1a>
  4044a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4044a4:	6813      	ldr	r3, [r2, #0]
  4044a6:	3204      	adds	r2, #4
  4044a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4044aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4044ac:	601a      	str	r2, [r3, #0]
  4044ae:	f7ff b86a 	b.w	403586 <_svfprintf_r+0x4e>
  4044b2:	aa25      	add	r2, sp, #148	; 0x94
  4044b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044b8:	f002 f990 	bl	4067dc <__ssprint_r>
  4044bc:	2800      	cmp	r0, #0
  4044be:	f47f a90d 	bne.w	4036dc <_svfprintf_r+0x1a4>
  4044c2:	46c8      	mov	r8, r9
  4044c4:	e48d      	b.n	403de2 <_svfprintf_r+0x8aa>
  4044c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4044c8:	4a27      	ldr	r2, [pc, #156]	; (404568 <_svfprintf_r+0x1030>)
  4044ca:	f8c8 2000 	str.w	r2, [r8]
  4044ce:	3301      	adds	r3, #1
  4044d0:	3401      	adds	r4, #1
  4044d2:	2201      	movs	r2, #1
  4044d4:	2b07      	cmp	r3, #7
  4044d6:	9427      	str	r4, [sp, #156]	; 0x9c
  4044d8:	9326      	str	r3, [sp, #152]	; 0x98
  4044da:	f8c8 2004 	str.w	r2, [r8, #4]
  4044de:	dc72      	bgt.n	4045c6 <_svfprintf_r+0x108e>
  4044e0:	f108 0808 	add.w	r8, r8, #8
  4044e4:	b929      	cbnz	r1, 4044f2 <_svfprintf_r+0xfba>
  4044e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4044e8:	b91b      	cbnz	r3, 4044f2 <_svfprintf_r+0xfba>
  4044ea:	9b07      	ldr	r3, [sp, #28]
  4044ec:	07d8      	lsls	r0, r3, #31
  4044ee:	f57f aa03 	bpl.w	4038f8 <_svfprintf_r+0x3c0>
  4044f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4044f4:	9819      	ldr	r0, [sp, #100]	; 0x64
  4044f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4044f8:	f8c8 2000 	str.w	r2, [r8]
  4044fc:	3301      	adds	r3, #1
  4044fe:	4602      	mov	r2, r0
  404500:	4422      	add	r2, r4
  404502:	2b07      	cmp	r3, #7
  404504:	9227      	str	r2, [sp, #156]	; 0x9c
  404506:	f8c8 0004 	str.w	r0, [r8, #4]
  40450a:	9326      	str	r3, [sp, #152]	; 0x98
  40450c:	f300 818d 	bgt.w	40482a <_svfprintf_r+0x12f2>
  404510:	f108 0808 	add.w	r8, r8, #8
  404514:	2900      	cmp	r1, #0
  404516:	f2c0 8165 	blt.w	4047e4 <_svfprintf_r+0x12ac>
  40451a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40451c:	f8c8 6000 	str.w	r6, [r8]
  404520:	3301      	adds	r3, #1
  404522:	188c      	adds	r4, r1, r2
  404524:	2b07      	cmp	r3, #7
  404526:	9427      	str	r4, [sp, #156]	; 0x9c
  404528:	9326      	str	r3, [sp, #152]	; 0x98
  40452a:	f8c8 1004 	str.w	r1, [r8, #4]
  40452e:	f77f a9e1 	ble.w	4038f4 <_svfprintf_r+0x3bc>
  404532:	e52c      	b.n	403f8e <_svfprintf_r+0xa56>
  404534:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404536:	9909      	ldr	r1, [sp, #36]	; 0x24
  404538:	6813      	ldr	r3, [r2, #0]
  40453a:	17cd      	asrs	r5, r1, #31
  40453c:	4608      	mov	r0, r1
  40453e:	3204      	adds	r2, #4
  404540:	4629      	mov	r1, r5
  404542:	920f      	str	r2, [sp, #60]	; 0x3c
  404544:	e9c3 0100 	strd	r0, r1, [r3]
  404548:	f7ff b81d 	b.w	403586 <_svfprintf_r+0x4e>
  40454c:	aa25      	add	r2, sp, #148	; 0x94
  40454e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404550:	980c      	ldr	r0, [sp, #48]	; 0x30
  404552:	f002 f943 	bl	4067dc <__ssprint_r>
  404556:	2800      	cmp	r0, #0
  404558:	f47f a8c0 	bne.w	4036dc <_svfprintf_r+0x1a4>
  40455c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40455e:	46c8      	mov	r8, r9
  404560:	e458      	b.n	403e14 <_svfprintf_r+0x8dc>
  404562:	bf00      	nop
  404564:	0040756c 	.word	0x0040756c
  404568:	00407558 	.word	0x00407558
  40456c:	2140      	movs	r1, #64	; 0x40
  40456e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404570:	f001 fa0c 	bl	40598c <_malloc_r>
  404574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404576:	6010      	str	r0, [r2, #0]
  404578:	6110      	str	r0, [r2, #16]
  40457a:	2800      	cmp	r0, #0
  40457c:	f000 81f2 	beq.w	404964 <_svfprintf_r+0x142c>
  404580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404582:	2340      	movs	r3, #64	; 0x40
  404584:	6153      	str	r3, [r2, #20]
  404586:	f7fe bfee 	b.w	403566 <_svfprintf_r+0x2e>
  40458a:	a823      	add	r0, sp, #140	; 0x8c
  40458c:	a920      	add	r1, sp, #128	; 0x80
  40458e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404590:	9004      	str	r0, [sp, #16]
  404592:	9103      	str	r1, [sp, #12]
  404594:	a81f      	add	r0, sp, #124	; 0x7c
  404596:	2103      	movs	r1, #3
  404598:	9002      	str	r0, [sp, #8]
  40459a:	9a08      	ldr	r2, [sp, #32]
  40459c:	9401      	str	r4, [sp, #4]
  40459e:	463b      	mov	r3, r7
  4045a0:	9100      	str	r1, [sp, #0]
  4045a2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045a4:	f000 fa9c 	bl	404ae0 <_dtoa_r>
  4045a8:	4625      	mov	r5, r4
  4045aa:	4606      	mov	r6, r0
  4045ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4045ae:	2b46      	cmp	r3, #70	; 0x46
  4045b0:	eb06 0405 	add.w	r4, r6, r5
  4045b4:	f47f af29 	bne.w	40440a <_svfprintf_r+0xed2>
  4045b8:	7833      	ldrb	r3, [r6, #0]
  4045ba:	2b30      	cmp	r3, #48	; 0x30
  4045bc:	f000 8178 	beq.w	4048b0 <_svfprintf_r+0x1378>
  4045c0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4045c2:	442c      	add	r4, r5
  4045c4:	e721      	b.n	40440a <_svfprintf_r+0xed2>
  4045c6:	aa25      	add	r2, sp, #148	; 0x94
  4045c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045cc:	f002 f906 	bl	4067dc <__ssprint_r>
  4045d0:	2800      	cmp	r0, #0
  4045d2:	f47f a883 	bne.w	4036dc <_svfprintf_r+0x1a4>
  4045d6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4045d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045da:	46c8      	mov	r8, r9
  4045dc:	e782      	b.n	4044e4 <_svfprintf_r+0xfac>
  4045de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4045e0:	2b00      	cmp	r3, #0
  4045e2:	bf08      	it	eq
  4045e4:	2301      	moveq	r3, #1
  4045e6:	930a      	str	r3, [sp, #40]	; 0x28
  4045e8:	e6db      	b.n	4043a2 <_svfprintf_r+0xe6a>
  4045ea:	4630      	mov	r0, r6
  4045ec:	940a      	str	r4, [sp, #40]	; 0x28
  4045ee:	f002 f887 	bl	406700 <strlen>
  4045f2:	950f      	str	r5, [sp, #60]	; 0x3c
  4045f4:	900e      	str	r0, [sp, #56]	; 0x38
  4045f6:	f8cd b01c 	str.w	fp, [sp, #28]
  4045fa:	4603      	mov	r3, r0
  4045fc:	f7ff b9f9 	b.w	4039f2 <_svfprintf_r+0x4ba>
  404600:	272d      	movs	r7, #45	; 0x2d
  404602:	2300      	movs	r3, #0
  404604:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404608:	930a      	str	r3, [sp, #40]	; 0x28
  40460a:	f7ff b8ae 	b.w	40376a <_svfprintf_r+0x232>
  40460e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404610:	9312      	str	r3, [sp, #72]	; 0x48
  404612:	461a      	mov	r2, r3
  404614:	3303      	adds	r3, #3
  404616:	db04      	blt.n	404622 <_svfprintf_r+0x10ea>
  404618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40461a:	4619      	mov	r1, r3
  40461c:	4291      	cmp	r1, r2
  40461e:	f6bf af17 	bge.w	404450 <_svfprintf_r+0xf18>
  404622:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404624:	3b02      	subs	r3, #2
  404626:	9311      	str	r3, [sp, #68]	; 0x44
  404628:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40462c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404630:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404632:	3b01      	subs	r3, #1
  404634:	2b00      	cmp	r3, #0
  404636:	931f      	str	r3, [sp, #124]	; 0x7c
  404638:	bfbd      	ittte	lt
  40463a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40463c:	f1c3 0301 	rsblt	r3, r3, #1
  404640:	222d      	movlt	r2, #45	; 0x2d
  404642:	222b      	movge	r2, #43	; 0x2b
  404644:	2b09      	cmp	r3, #9
  404646:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40464a:	f340 8116 	ble.w	40487a <_svfprintf_r+0x1342>
  40464e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404652:	4620      	mov	r0, r4
  404654:	4dab      	ldr	r5, [pc, #684]	; (404904 <_svfprintf_r+0x13cc>)
  404656:	e000      	b.n	40465a <_svfprintf_r+0x1122>
  404658:	4610      	mov	r0, r2
  40465a:	fb85 1203 	smull	r1, r2, r5, r3
  40465e:	17d9      	asrs	r1, r3, #31
  404660:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404664:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404668:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40466c:	3230      	adds	r2, #48	; 0x30
  40466e:	2909      	cmp	r1, #9
  404670:	f800 2c01 	strb.w	r2, [r0, #-1]
  404674:	460b      	mov	r3, r1
  404676:	f100 32ff 	add.w	r2, r0, #4294967295
  40467a:	dced      	bgt.n	404658 <_svfprintf_r+0x1120>
  40467c:	3330      	adds	r3, #48	; 0x30
  40467e:	3802      	subs	r0, #2
  404680:	b2d9      	uxtb	r1, r3
  404682:	4284      	cmp	r4, r0
  404684:	f802 1c01 	strb.w	r1, [r2, #-1]
  404688:	f240 8165 	bls.w	404956 <_svfprintf_r+0x141e>
  40468c:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404690:	4613      	mov	r3, r2
  404692:	e001      	b.n	404698 <_svfprintf_r+0x1160>
  404694:	f813 1b01 	ldrb.w	r1, [r3], #1
  404698:	f800 1b01 	strb.w	r1, [r0], #1
  40469c:	42a3      	cmp	r3, r4
  40469e:	d1f9      	bne.n	404694 <_svfprintf_r+0x115c>
  4046a0:	3301      	adds	r3, #1
  4046a2:	1a9b      	subs	r3, r3, r2
  4046a4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4046a8:	4413      	add	r3, r2
  4046aa:	aa21      	add	r2, sp, #132	; 0x84
  4046ac:	1a9b      	subs	r3, r3, r2
  4046ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4046b0:	931b      	str	r3, [sp, #108]	; 0x6c
  4046b2:	2a01      	cmp	r2, #1
  4046b4:	4413      	add	r3, r2
  4046b6:	930e      	str	r3, [sp, #56]	; 0x38
  4046b8:	f340 8119 	ble.w	4048ee <_svfprintf_r+0x13b6>
  4046bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4046be:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4046c0:	4413      	add	r3, r2
  4046c2:	930e      	str	r3, [sp, #56]	; 0x38
  4046c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4046c8:	9308      	str	r3, [sp, #32]
  4046ca:	2300      	movs	r3, #0
  4046cc:	9312      	str	r3, [sp, #72]	; 0x48
  4046ce:	e6cf      	b.n	404470 <_svfprintf_r+0xf38>
  4046d0:	aa25      	add	r2, sp, #148	; 0x94
  4046d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046d6:	f002 f881 	bl	4067dc <__ssprint_r>
  4046da:	2800      	cmp	r0, #0
  4046dc:	f47e affe 	bne.w	4036dc <_svfprintf_r+0x1a4>
  4046e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4046e2:	46c8      	mov	r8, r9
  4046e4:	e4d7      	b.n	404096 <_svfprintf_r+0xb5e>
  4046e6:	4623      	mov	r3, r4
  4046e8:	e6a2      	b.n	404430 <_svfprintf_r+0xef8>
  4046ea:	aa25      	add	r2, sp, #148	; 0x94
  4046ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046f0:	f002 f874 	bl	4067dc <__ssprint_r>
  4046f4:	2800      	cmp	r0, #0
  4046f6:	f47e aff1 	bne.w	4036dc <_svfprintf_r+0x1a4>
  4046fa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4046fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4046fe:	46c8      	mov	r8, r9
  404700:	e5ae      	b.n	404260 <_svfprintf_r+0xd28>
  404702:	aa25      	add	r2, sp, #148	; 0x94
  404704:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404706:	980c      	ldr	r0, [sp, #48]	; 0x30
  404708:	f002 f868 	bl	4067dc <__ssprint_r>
  40470c:	2800      	cmp	r0, #0
  40470e:	f47e afe5 	bne.w	4036dc <_svfprintf_r+0x1a4>
  404712:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404714:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404716:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404718:	1a9a      	subs	r2, r3, r2
  40471a:	46c8      	mov	r8, r9
  40471c:	e5b8      	b.n	404290 <_svfprintf_r+0xd58>
  40471e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404720:	9612      	str	r6, [sp, #72]	; 0x48
  404722:	2b06      	cmp	r3, #6
  404724:	bf28      	it	cs
  404726:	2306      	movcs	r3, #6
  404728:	960a      	str	r6, [sp, #40]	; 0x28
  40472a:	4637      	mov	r7, r6
  40472c:	9308      	str	r3, [sp, #32]
  40472e:	950f      	str	r5, [sp, #60]	; 0x3c
  404730:	f8cd b01c 	str.w	fp, [sp, #28]
  404734:	930e      	str	r3, [sp, #56]	; 0x38
  404736:	4e74      	ldr	r6, [pc, #464]	; (404908 <_svfprintf_r+0x13d0>)
  404738:	f7ff b816 	b.w	403768 <_svfprintf_r+0x230>
  40473c:	a823      	add	r0, sp, #140	; 0x8c
  40473e:	a920      	add	r1, sp, #128	; 0x80
  404740:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404742:	9004      	str	r0, [sp, #16]
  404744:	9103      	str	r1, [sp, #12]
  404746:	a81f      	add	r0, sp, #124	; 0x7c
  404748:	2103      	movs	r1, #3
  40474a:	9002      	str	r0, [sp, #8]
  40474c:	9a08      	ldr	r2, [sp, #32]
  40474e:	9501      	str	r5, [sp, #4]
  404750:	463b      	mov	r3, r7
  404752:	9100      	str	r1, [sp, #0]
  404754:	980c      	ldr	r0, [sp, #48]	; 0x30
  404756:	f000 f9c3 	bl	404ae0 <_dtoa_r>
  40475a:	4606      	mov	r6, r0
  40475c:	1944      	adds	r4, r0, r5
  40475e:	e72b      	b.n	4045b8 <_svfprintf_r+0x1080>
  404760:	2306      	movs	r3, #6
  404762:	930a      	str	r3, [sp, #40]	; 0x28
  404764:	e61d      	b.n	4043a2 <_svfprintf_r+0xe6a>
  404766:	272d      	movs	r7, #45	; 0x2d
  404768:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40476c:	f7ff bacd 	b.w	403d0a <_svfprintf_r+0x7d2>
  404770:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404772:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404774:	4413      	add	r3, r2
  404776:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404778:	930e      	str	r3, [sp, #56]	; 0x38
  40477a:	2a00      	cmp	r2, #0
  40477c:	f340 80b0 	ble.w	4048e0 <_svfprintf_r+0x13a8>
  404780:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404784:	9308      	str	r3, [sp, #32]
  404786:	2367      	movs	r3, #103	; 0x67
  404788:	9311      	str	r3, [sp, #68]	; 0x44
  40478a:	e671      	b.n	404470 <_svfprintf_r+0xf38>
  40478c:	2b00      	cmp	r3, #0
  40478e:	f340 80c3 	ble.w	404918 <_svfprintf_r+0x13e0>
  404792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404794:	2a00      	cmp	r2, #0
  404796:	f040 8099 	bne.w	4048cc <_svfprintf_r+0x1394>
  40479a:	f01b 0f01 	tst.w	fp, #1
  40479e:	f040 8095 	bne.w	4048cc <_svfprintf_r+0x1394>
  4047a2:	9308      	str	r3, [sp, #32]
  4047a4:	930e      	str	r3, [sp, #56]	; 0x38
  4047a6:	e663      	b.n	404470 <_svfprintf_r+0xf38>
  4047a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047aa:	9308      	str	r3, [sp, #32]
  4047ac:	930e      	str	r3, [sp, #56]	; 0x38
  4047ae:	900a      	str	r0, [sp, #40]	; 0x28
  4047b0:	950f      	str	r5, [sp, #60]	; 0x3c
  4047b2:	f8cd b01c 	str.w	fp, [sp, #28]
  4047b6:	9012      	str	r0, [sp, #72]	; 0x48
  4047b8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4047bc:	f7fe bfd4 	b.w	403768 <_svfprintf_r+0x230>
  4047c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4047c2:	2b47      	cmp	r3, #71	; 0x47
  4047c4:	f47f ae20 	bne.w	404408 <_svfprintf_r+0xed0>
  4047c8:	f01b 0f01 	tst.w	fp, #1
  4047cc:	f47f aeee 	bne.w	4045ac <_svfprintf_r+0x1074>
  4047d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4047d2:	1b9b      	subs	r3, r3, r6
  4047d4:	9313      	str	r3, [sp, #76]	; 0x4c
  4047d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4047d8:	2b47      	cmp	r3, #71	; 0x47
  4047da:	f43f af18 	beq.w	40460e <_svfprintf_r+0x10d6>
  4047de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4047e0:	9312      	str	r3, [sp, #72]	; 0x48
  4047e2:	e721      	b.n	404628 <_svfprintf_r+0x10f0>
  4047e4:	424f      	negs	r7, r1
  4047e6:	3110      	adds	r1, #16
  4047e8:	4d48      	ldr	r5, [pc, #288]	; (40490c <_svfprintf_r+0x13d4>)
  4047ea:	da2f      	bge.n	40484c <_svfprintf_r+0x1314>
  4047ec:	2410      	movs	r4, #16
  4047ee:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4047f2:	e004      	b.n	4047fe <_svfprintf_r+0x12c6>
  4047f4:	f108 0808 	add.w	r8, r8, #8
  4047f8:	3f10      	subs	r7, #16
  4047fa:	2f10      	cmp	r7, #16
  4047fc:	dd26      	ble.n	40484c <_svfprintf_r+0x1314>
  4047fe:	3301      	adds	r3, #1
  404800:	3210      	adds	r2, #16
  404802:	2b07      	cmp	r3, #7
  404804:	9227      	str	r2, [sp, #156]	; 0x9c
  404806:	9326      	str	r3, [sp, #152]	; 0x98
  404808:	f8c8 5000 	str.w	r5, [r8]
  40480c:	f8c8 4004 	str.w	r4, [r8, #4]
  404810:	ddf0      	ble.n	4047f4 <_svfprintf_r+0x12bc>
  404812:	aa25      	add	r2, sp, #148	; 0x94
  404814:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404816:	4658      	mov	r0, fp
  404818:	f001 ffe0 	bl	4067dc <__ssprint_r>
  40481c:	2800      	cmp	r0, #0
  40481e:	f47e af5d 	bne.w	4036dc <_svfprintf_r+0x1a4>
  404822:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404824:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404826:	46c8      	mov	r8, r9
  404828:	e7e6      	b.n	4047f8 <_svfprintf_r+0x12c0>
  40482a:	aa25      	add	r2, sp, #148	; 0x94
  40482c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40482e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404830:	f001 ffd4 	bl	4067dc <__ssprint_r>
  404834:	2800      	cmp	r0, #0
  404836:	f47e af51 	bne.w	4036dc <_svfprintf_r+0x1a4>
  40483a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40483c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40483e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404840:	46c8      	mov	r8, r9
  404842:	e667      	b.n	404514 <_svfprintf_r+0xfdc>
  404844:	2000      	movs	r0, #0
  404846:	900a      	str	r0, [sp, #40]	; 0x28
  404848:	f7fe bed0 	b.w	4035ec <_svfprintf_r+0xb4>
  40484c:	3301      	adds	r3, #1
  40484e:	443a      	add	r2, r7
  404850:	2b07      	cmp	r3, #7
  404852:	e888 00a0 	stmia.w	r8, {r5, r7}
  404856:	9227      	str	r2, [sp, #156]	; 0x9c
  404858:	9326      	str	r3, [sp, #152]	; 0x98
  40485a:	f108 0808 	add.w	r8, r8, #8
  40485e:	f77f ae5c 	ble.w	40451a <_svfprintf_r+0xfe2>
  404862:	aa25      	add	r2, sp, #148	; 0x94
  404864:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404866:	980c      	ldr	r0, [sp, #48]	; 0x30
  404868:	f001 ffb8 	bl	4067dc <__ssprint_r>
  40486c:	2800      	cmp	r0, #0
  40486e:	f47e af35 	bne.w	4036dc <_svfprintf_r+0x1a4>
  404872:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404874:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404876:	46c8      	mov	r8, r9
  404878:	e64f      	b.n	40451a <_svfprintf_r+0xfe2>
  40487a:	3330      	adds	r3, #48	; 0x30
  40487c:	2230      	movs	r2, #48	; 0x30
  40487e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404882:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404886:	ab22      	add	r3, sp, #136	; 0x88
  404888:	e70f      	b.n	4046aa <_svfprintf_r+0x1172>
  40488a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40488c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40488e:	4413      	add	r3, r2
  404890:	930e      	str	r3, [sp, #56]	; 0x38
  404892:	e775      	b.n	404780 <_svfprintf_r+0x1248>
  404894:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404896:	e5cb      	b.n	404430 <_svfprintf_r+0xef8>
  404898:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40489a:	4e1d      	ldr	r6, [pc, #116]	; (404910 <_svfprintf_r+0x13d8>)
  40489c:	2b00      	cmp	r3, #0
  40489e:	bfb6      	itet	lt
  4048a0:	272d      	movlt	r7, #45	; 0x2d
  4048a2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4048a6:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  4048aa:	4b1a      	ldr	r3, [pc, #104]	; (404914 <_svfprintf_r+0x13dc>)
  4048ac:	f7ff ba2f 	b.w	403d0e <_svfprintf_r+0x7d6>
  4048b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4048b2:	9808      	ldr	r0, [sp, #32]
  4048b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4048b6:	4639      	mov	r1, r7
  4048b8:	f002 fc5a 	bl	407170 <__aeabi_dcmpeq>
  4048bc:	2800      	cmp	r0, #0
  4048be:	f47f ae7f 	bne.w	4045c0 <_svfprintf_r+0x1088>
  4048c2:	f1c5 0501 	rsb	r5, r5, #1
  4048c6:	951f      	str	r5, [sp, #124]	; 0x7c
  4048c8:	442c      	add	r4, r5
  4048ca:	e59e      	b.n	40440a <_svfprintf_r+0xed2>
  4048cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4048ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4048d0:	4413      	add	r3, r2
  4048d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4048d4:	441a      	add	r2, r3
  4048d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4048da:	920e      	str	r2, [sp, #56]	; 0x38
  4048dc:	9308      	str	r3, [sp, #32]
  4048de:	e5c7      	b.n	404470 <_svfprintf_r+0xf38>
  4048e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4048e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4048e4:	f1c3 0301 	rsb	r3, r3, #1
  4048e8:	441a      	add	r2, r3
  4048ea:	4613      	mov	r3, r2
  4048ec:	e7d0      	b.n	404890 <_svfprintf_r+0x1358>
  4048ee:	f01b 0301 	ands.w	r3, fp, #1
  4048f2:	9312      	str	r3, [sp, #72]	; 0x48
  4048f4:	f47f aee2 	bne.w	4046bc <_svfprintf_r+0x1184>
  4048f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4048fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4048fe:	9308      	str	r3, [sp, #32]
  404900:	e5b6      	b.n	404470 <_svfprintf_r+0xf38>
  404902:	bf00      	nop
  404904:	66666667 	.word	0x66666667
  404908:	00407550 	.word	0x00407550
  40490c:	0040756c 	.word	0x0040756c
  404910:	00407524 	.word	0x00407524
  404914:	00407520 	.word	0x00407520
  404918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40491a:	b913      	cbnz	r3, 404922 <_svfprintf_r+0x13ea>
  40491c:	f01b 0f01 	tst.w	fp, #1
  404920:	d002      	beq.n	404928 <_svfprintf_r+0x13f0>
  404922:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404924:	3301      	adds	r3, #1
  404926:	e7d4      	b.n	4048d2 <_svfprintf_r+0x139a>
  404928:	2301      	movs	r3, #1
  40492a:	e73a      	b.n	4047a2 <_svfprintf_r+0x126a>
  40492c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40492e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404932:	6828      	ldr	r0, [r5, #0]
  404934:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404938:	900a      	str	r0, [sp, #40]	; 0x28
  40493a:	4628      	mov	r0, r5
  40493c:	3004      	adds	r0, #4
  40493e:	46a2      	mov	sl, r4
  404940:	900f      	str	r0, [sp, #60]	; 0x3c
  404942:	f7fe be51 	b.w	4035e8 <_svfprintf_r+0xb0>
  404946:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40494a:	f7ff b867 	b.w	403a1c <_svfprintf_r+0x4e4>
  40494e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404952:	f7ff ba15 	b.w	403d80 <_svfprintf_r+0x848>
  404956:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40495a:	e6a6      	b.n	4046aa <_svfprintf_r+0x1172>
  40495c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404960:	f7ff b8eb 	b.w	403b3a <_svfprintf_r+0x602>
  404964:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404966:	230c      	movs	r3, #12
  404968:	6013      	str	r3, [r2, #0]
  40496a:	f04f 33ff 	mov.w	r3, #4294967295
  40496e:	9309      	str	r3, [sp, #36]	; 0x24
  404970:	f7fe bebd 	b.w	4036ee <_svfprintf_r+0x1b6>
  404974:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404978:	f7ff b99a 	b.w	403cb0 <_svfprintf_r+0x778>
  40497c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404980:	f7ff b976 	b.w	403c70 <_svfprintf_r+0x738>
  404984:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404988:	f7ff b959 	b.w	403c3e <_svfprintf_r+0x706>
  40498c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404990:	f7ff b912 	b.w	403bb8 <_svfprintf_r+0x680>

00404994 <register_fini>:
  404994:	4b02      	ldr	r3, [pc, #8]	; (4049a0 <register_fini+0xc>)
  404996:	b113      	cbz	r3, 40499e <register_fini+0xa>
  404998:	4802      	ldr	r0, [pc, #8]	; (4049a4 <register_fini+0x10>)
  40499a:	f000 b805 	b.w	4049a8 <atexit>
  40499e:	4770      	bx	lr
  4049a0:	00000000 	.word	0x00000000
  4049a4:	00405935 	.word	0x00405935

004049a8 <atexit>:
  4049a8:	2300      	movs	r3, #0
  4049aa:	4601      	mov	r1, r0
  4049ac:	461a      	mov	r2, r3
  4049ae:	4618      	mov	r0, r3
  4049b0:	f001 bf92 	b.w	4068d8 <__register_exitproc>

004049b4 <quorem>:
  4049b4:	6902      	ldr	r2, [r0, #16]
  4049b6:	690b      	ldr	r3, [r1, #16]
  4049b8:	4293      	cmp	r3, r2
  4049ba:	f300 808d 	bgt.w	404ad8 <quorem+0x124>
  4049be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049c2:	f103 38ff 	add.w	r8, r3, #4294967295
  4049c6:	f101 0714 	add.w	r7, r1, #20
  4049ca:	f100 0b14 	add.w	fp, r0, #20
  4049ce:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4049d2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4049d6:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4049da:	b083      	sub	sp, #12
  4049dc:	3201      	adds	r2, #1
  4049de:	fbb3 f9f2 	udiv	r9, r3, r2
  4049e2:	eb0b 0304 	add.w	r3, fp, r4
  4049e6:	9400      	str	r4, [sp, #0]
  4049e8:	eb07 0a04 	add.w	sl, r7, r4
  4049ec:	9301      	str	r3, [sp, #4]
  4049ee:	f1b9 0f00 	cmp.w	r9, #0
  4049f2:	d039      	beq.n	404a68 <quorem+0xb4>
  4049f4:	2500      	movs	r5, #0
  4049f6:	462e      	mov	r6, r5
  4049f8:	46bc      	mov	ip, r7
  4049fa:	46de      	mov	lr, fp
  4049fc:	f85c 4b04 	ldr.w	r4, [ip], #4
  404a00:	f8de 3000 	ldr.w	r3, [lr]
  404a04:	b2a2      	uxth	r2, r4
  404a06:	fb09 5502 	mla	r5, r9, r2, r5
  404a0a:	0c22      	lsrs	r2, r4, #16
  404a0c:	0c2c      	lsrs	r4, r5, #16
  404a0e:	fb09 4202 	mla	r2, r9, r2, r4
  404a12:	b2ad      	uxth	r5, r5
  404a14:	1b75      	subs	r5, r6, r5
  404a16:	b296      	uxth	r6, r2
  404a18:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  404a1c:	fa15 f383 	uxtah	r3, r5, r3
  404a20:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404a24:	b29b      	uxth	r3, r3
  404a26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  404a2a:	45e2      	cmp	sl, ip
  404a2c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404a30:	f84e 3b04 	str.w	r3, [lr], #4
  404a34:	ea4f 4626 	mov.w	r6, r6, asr #16
  404a38:	d2e0      	bcs.n	4049fc <quorem+0x48>
  404a3a:	9b00      	ldr	r3, [sp, #0]
  404a3c:	f85b 3003 	ldr.w	r3, [fp, r3]
  404a40:	b993      	cbnz	r3, 404a68 <quorem+0xb4>
  404a42:	9c01      	ldr	r4, [sp, #4]
  404a44:	1f23      	subs	r3, r4, #4
  404a46:	459b      	cmp	fp, r3
  404a48:	d20c      	bcs.n	404a64 <quorem+0xb0>
  404a4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404a4e:	b94b      	cbnz	r3, 404a64 <quorem+0xb0>
  404a50:	f1a4 0308 	sub.w	r3, r4, #8
  404a54:	e002      	b.n	404a5c <quorem+0xa8>
  404a56:	681a      	ldr	r2, [r3, #0]
  404a58:	3b04      	subs	r3, #4
  404a5a:	b91a      	cbnz	r2, 404a64 <quorem+0xb0>
  404a5c:	459b      	cmp	fp, r3
  404a5e:	f108 38ff 	add.w	r8, r8, #4294967295
  404a62:	d3f8      	bcc.n	404a56 <quorem+0xa2>
  404a64:	f8c0 8010 	str.w	r8, [r0, #16]
  404a68:	4604      	mov	r4, r0
  404a6a:	f001 fd35 	bl	4064d8 <__mcmp>
  404a6e:	2800      	cmp	r0, #0
  404a70:	db2e      	blt.n	404ad0 <quorem+0x11c>
  404a72:	f109 0901 	add.w	r9, r9, #1
  404a76:	465d      	mov	r5, fp
  404a78:	2300      	movs	r3, #0
  404a7a:	f857 1b04 	ldr.w	r1, [r7], #4
  404a7e:	6828      	ldr	r0, [r5, #0]
  404a80:	b28a      	uxth	r2, r1
  404a82:	1a9a      	subs	r2, r3, r2
  404a84:	0c0b      	lsrs	r3, r1, #16
  404a86:	fa12 f280 	uxtah	r2, r2, r0
  404a8a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  404a8e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404a92:	b292      	uxth	r2, r2
  404a94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404a98:	45ba      	cmp	sl, r7
  404a9a:	f845 2b04 	str.w	r2, [r5], #4
  404a9e:	ea4f 4323 	mov.w	r3, r3, asr #16
  404aa2:	d2ea      	bcs.n	404a7a <quorem+0xc6>
  404aa4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  404aa8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404aac:	b982      	cbnz	r2, 404ad0 <quorem+0x11c>
  404aae:	1f1a      	subs	r2, r3, #4
  404ab0:	4593      	cmp	fp, r2
  404ab2:	d20b      	bcs.n	404acc <quorem+0x118>
  404ab4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404ab8:	b942      	cbnz	r2, 404acc <quorem+0x118>
  404aba:	3b08      	subs	r3, #8
  404abc:	e002      	b.n	404ac4 <quorem+0x110>
  404abe:	681a      	ldr	r2, [r3, #0]
  404ac0:	3b04      	subs	r3, #4
  404ac2:	b91a      	cbnz	r2, 404acc <quorem+0x118>
  404ac4:	459b      	cmp	fp, r3
  404ac6:	f108 38ff 	add.w	r8, r8, #4294967295
  404aca:	d3f8      	bcc.n	404abe <quorem+0x10a>
  404acc:	f8c4 8010 	str.w	r8, [r4, #16]
  404ad0:	4648      	mov	r0, r9
  404ad2:	b003      	add	sp, #12
  404ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ad8:	2000      	movs	r0, #0
  404ada:	4770      	bx	lr
  404adc:	0000      	movs	r0, r0
	...

00404ae0 <_dtoa_r>:
  404ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ae4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404ae6:	b09b      	sub	sp, #108	; 0x6c
  404ae8:	4604      	mov	r4, r0
  404aea:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  404aec:	4692      	mov	sl, r2
  404aee:	469b      	mov	fp, r3
  404af0:	b141      	cbz	r1, 404b04 <_dtoa_r+0x24>
  404af2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404af4:	604a      	str	r2, [r1, #4]
  404af6:	2301      	movs	r3, #1
  404af8:	4093      	lsls	r3, r2
  404afa:	608b      	str	r3, [r1, #8]
  404afc:	f001 fb14 	bl	406128 <_Bfree>
  404b00:	2300      	movs	r3, #0
  404b02:	6423      	str	r3, [r4, #64]	; 0x40
  404b04:	f1bb 0f00 	cmp.w	fp, #0
  404b08:	465d      	mov	r5, fp
  404b0a:	db35      	blt.n	404b78 <_dtoa_r+0x98>
  404b0c:	2300      	movs	r3, #0
  404b0e:	6033      	str	r3, [r6, #0]
  404b10:	4b9d      	ldr	r3, [pc, #628]	; (404d88 <_dtoa_r+0x2a8>)
  404b12:	43ab      	bics	r3, r5
  404b14:	d015      	beq.n	404b42 <_dtoa_r+0x62>
  404b16:	4650      	mov	r0, sl
  404b18:	4659      	mov	r1, fp
  404b1a:	2200      	movs	r2, #0
  404b1c:	2300      	movs	r3, #0
  404b1e:	f002 fb27 	bl	407170 <__aeabi_dcmpeq>
  404b22:	4680      	mov	r8, r0
  404b24:	2800      	cmp	r0, #0
  404b26:	d02d      	beq.n	404b84 <_dtoa_r+0xa4>
  404b28:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404b2a:	2301      	movs	r3, #1
  404b2c:	6013      	str	r3, [r2, #0]
  404b2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404b30:	2b00      	cmp	r3, #0
  404b32:	f000 80bd 	beq.w	404cb0 <_dtoa_r+0x1d0>
  404b36:	4895      	ldr	r0, [pc, #596]	; (404d8c <_dtoa_r+0x2ac>)
  404b38:	6018      	str	r0, [r3, #0]
  404b3a:	3801      	subs	r0, #1
  404b3c:	b01b      	add	sp, #108	; 0x6c
  404b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b42:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404b44:	f242 730f 	movw	r3, #9999	; 0x270f
  404b48:	6013      	str	r3, [r2, #0]
  404b4a:	f1ba 0f00 	cmp.w	sl, #0
  404b4e:	d10d      	bne.n	404b6c <_dtoa_r+0x8c>
  404b50:	f3c5 0513 	ubfx	r5, r5, #0, #20
  404b54:	b955      	cbnz	r5, 404b6c <_dtoa_r+0x8c>
  404b56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404b58:	488d      	ldr	r0, [pc, #564]	; (404d90 <_dtoa_r+0x2b0>)
  404b5a:	2b00      	cmp	r3, #0
  404b5c:	d0ee      	beq.n	404b3c <_dtoa_r+0x5c>
  404b5e:	f100 0308 	add.w	r3, r0, #8
  404b62:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  404b64:	6013      	str	r3, [r2, #0]
  404b66:	b01b      	add	sp, #108	; 0x6c
  404b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404b6e:	4889      	ldr	r0, [pc, #548]	; (404d94 <_dtoa_r+0x2b4>)
  404b70:	2b00      	cmp	r3, #0
  404b72:	d0e3      	beq.n	404b3c <_dtoa_r+0x5c>
  404b74:	1cc3      	adds	r3, r0, #3
  404b76:	e7f4      	b.n	404b62 <_dtoa_r+0x82>
  404b78:	2301      	movs	r3, #1
  404b7a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  404b7e:	6033      	str	r3, [r6, #0]
  404b80:	46ab      	mov	fp, r5
  404b82:	e7c5      	b.n	404b10 <_dtoa_r+0x30>
  404b84:	aa18      	add	r2, sp, #96	; 0x60
  404b86:	ab19      	add	r3, sp, #100	; 0x64
  404b88:	9201      	str	r2, [sp, #4]
  404b8a:	9300      	str	r3, [sp, #0]
  404b8c:	4652      	mov	r2, sl
  404b8e:	465b      	mov	r3, fp
  404b90:	4620      	mov	r0, r4
  404b92:	f001 fd41 	bl	406618 <__d2b>
  404b96:	0d2b      	lsrs	r3, r5, #20
  404b98:	4681      	mov	r9, r0
  404b9a:	d071      	beq.n	404c80 <_dtoa_r+0x1a0>
  404b9c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  404ba0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  404ba4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404ba6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  404baa:	4650      	mov	r0, sl
  404bac:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  404bb0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404bb4:	2200      	movs	r2, #0
  404bb6:	4b78      	ldr	r3, [pc, #480]	; (404d98 <_dtoa_r+0x2b8>)
  404bb8:	f7fe f834 	bl	402c24 <__aeabi_dsub>
  404bbc:	a36c      	add	r3, pc, #432	; (adr r3, 404d70 <_dtoa_r+0x290>)
  404bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  404bc2:	f7fe f9e3 	bl	402f8c <__aeabi_dmul>
  404bc6:	a36c      	add	r3, pc, #432	; (adr r3, 404d78 <_dtoa_r+0x298>)
  404bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
  404bcc:	f7fe f82c 	bl	402c28 <__adddf3>
  404bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404bd4:	4630      	mov	r0, r6
  404bd6:	f7fe f973 	bl	402ec0 <__aeabi_i2d>
  404bda:	a369      	add	r3, pc, #420	; (adr r3, 404d80 <_dtoa_r+0x2a0>)
  404bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
  404be0:	f7fe f9d4 	bl	402f8c <__aeabi_dmul>
  404be4:	4602      	mov	r2, r0
  404be6:	460b      	mov	r3, r1
  404be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404bec:	f7fe f81c 	bl	402c28 <__adddf3>
  404bf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404bf4:	f7fe fbdc 	bl	4033b0 <__aeabi_d2iz>
  404bf8:	2200      	movs	r2, #0
  404bfa:	9002      	str	r0, [sp, #8]
  404bfc:	2300      	movs	r3, #0
  404bfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404c02:	f002 fabf 	bl	407184 <__aeabi_dcmplt>
  404c06:	2800      	cmp	r0, #0
  404c08:	f040 8173 	bne.w	404ef2 <_dtoa_r+0x412>
  404c0c:	9d02      	ldr	r5, [sp, #8]
  404c0e:	2d16      	cmp	r5, #22
  404c10:	f200 815d 	bhi.w	404ece <_dtoa_r+0x3ee>
  404c14:	4b61      	ldr	r3, [pc, #388]	; (404d9c <_dtoa_r+0x2bc>)
  404c16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
  404c1e:	4652      	mov	r2, sl
  404c20:	465b      	mov	r3, fp
  404c22:	f002 facd 	bl	4071c0 <__aeabi_dcmpgt>
  404c26:	2800      	cmp	r0, #0
  404c28:	f000 81c5 	beq.w	404fb6 <_dtoa_r+0x4d6>
  404c2c:	1e6b      	subs	r3, r5, #1
  404c2e:	9302      	str	r3, [sp, #8]
  404c30:	2300      	movs	r3, #0
  404c32:	930e      	str	r3, [sp, #56]	; 0x38
  404c34:	1bbf      	subs	r7, r7, r6
  404c36:	1e7b      	subs	r3, r7, #1
  404c38:	9306      	str	r3, [sp, #24]
  404c3a:	f100 8154 	bmi.w	404ee6 <_dtoa_r+0x406>
  404c3e:	2300      	movs	r3, #0
  404c40:	9308      	str	r3, [sp, #32]
  404c42:	9b02      	ldr	r3, [sp, #8]
  404c44:	2b00      	cmp	r3, #0
  404c46:	f2c0 8145 	blt.w	404ed4 <_dtoa_r+0x3f4>
  404c4a:	9a06      	ldr	r2, [sp, #24]
  404c4c:	930d      	str	r3, [sp, #52]	; 0x34
  404c4e:	4611      	mov	r1, r2
  404c50:	4419      	add	r1, r3
  404c52:	2300      	movs	r3, #0
  404c54:	9106      	str	r1, [sp, #24]
  404c56:	930c      	str	r3, [sp, #48]	; 0x30
  404c58:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c5a:	2b09      	cmp	r3, #9
  404c5c:	d82a      	bhi.n	404cb4 <_dtoa_r+0x1d4>
  404c5e:	2b05      	cmp	r3, #5
  404c60:	f340 865b 	ble.w	40591a <_dtoa_r+0xe3a>
  404c64:	3b04      	subs	r3, #4
  404c66:	9324      	str	r3, [sp, #144]	; 0x90
  404c68:	2500      	movs	r5, #0
  404c6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c6c:	3b02      	subs	r3, #2
  404c6e:	2b03      	cmp	r3, #3
  404c70:	f200 8642 	bhi.w	4058f8 <_dtoa_r+0xe18>
  404c74:	e8df f013 	tbh	[pc, r3, lsl #1]
  404c78:	02c903d4 	.word	0x02c903d4
  404c7c:	046103df 	.word	0x046103df
  404c80:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404c82:	9e19      	ldr	r6, [sp, #100]	; 0x64
  404c84:	443e      	add	r6, r7
  404c86:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404c8a:	2b20      	cmp	r3, #32
  404c8c:	f340 818e 	ble.w	404fac <_dtoa_r+0x4cc>
  404c90:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404c94:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404c98:	409d      	lsls	r5, r3
  404c9a:	fa2a f000 	lsr.w	r0, sl, r0
  404c9e:	4328      	orrs	r0, r5
  404ca0:	f7fe f8fe 	bl	402ea0 <__aeabi_ui2d>
  404ca4:	2301      	movs	r3, #1
  404ca6:	3e01      	subs	r6, #1
  404ca8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404cac:	9314      	str	r3, [sp, #80]	; 0x50
  404cae:	e781      	b.n	404bb4 <_dtoa_r+0xd4>
  404cb0:	483b      	ldr	r0, [pc, #236]	; (404da0 <_dtoa_r+0x2c0>)
  404cb2:	e743      	b.n	404b3c <_dtoa_r+0x5c>
  404cb4:	2100      	movs	r1, #0
  404cb6:	6461      	str	r1, [r4, #68]	; 0x44
  404cb8:	4620      	mov	r0, r4
  404cba:	9125      	str	r1, [sp, #148]	; 0x94
  404cbc:	f001 fa0e 	bl	4060dc <_Balloc>
  404cc0:	f04f 33ff 	mov.w	r3, #4294967295
  404cc4:	930a      	str	r3, [sp, #40]	; 0x28
  404cc6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404cc8:	930f      	str	r3, [sp, #60]	; 0x3c
  404cca:	2301      	movs	r3, #1
  404ccc:	9004      	str	r0, [sp, #16]
  404cce:	6420      	str	r0, [r4, #64]	; 0x40
  404cd0:	9224      	str	r2, [sp, #144]	; 0x90
  404cd2:	930b      	str	r3, [sp, #44]	; 0x2c
  404cd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404cd6:	2b00      	cmp	r3, #0
  404cd8:	f2c0 80d9 	blt.w	404e8e <_dtoa_r+0x3ae>
  404cdc:	9a02      	ldr	r2, [sp, #8]
  404cde:	2a0e      	cmp	r2, #14
  404ce0:	f300 80d5 	bgt.w	404e8e <_dtoa_r+0x3ae>
  404ce4:	4b2d      	ldr	r3, [pc, #180]	; (404d9c <_dtoa_r+0x2bc>)
  404ce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404cea:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cee:	e9cd 2308 	strd	r2, r3, [sp, #32]
  404cf2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404cf4:	2b00      	cmp	r3, #0
  404cf6:	f2c0 83ba 	blt.w	40546e <_dtoa_r+0x98e>
  404cfa:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  404cfe:	4650      	mov	r0, sl
  404d00:	462a      	mov	r2, r5
  404d02:	4633      	mov	r3, r6
  404d04:	4659      	mov	r1, fp
  404d06:	f7fe fa6b 	bl	4031e0 <__aeabi_ddiv>
  404d0a:	f7fe fb51 	bl	4033b0 <__aeabi_d2iz>
  404d0e:	4680      	mov	r8, r0
  404d10:	f7fe f8d6 	bl	402ec0 <__aeabi_i2d>
  404d14:	462a      	mov	r2, r5
  404d16:	4633      	mov	r3, r6
  404d18:	f7fe f938 	bl	402f8c <__aeabi_dmul>
  404d1c:	460b      	mov	r3, r1
  404d1e:	4602      	mov	r2, r0
  404d20:	4659      	mov	r1, fp
  404d22:	4650      	mov	r0, sl
  404d24:	f7fd ff7e 	bl	402c24 <__aeabi_dsub>
  404d28:	9d04      	ldr	r5, [sp, #16]
  404d2a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  404d2e:	702b      	strb	r3, [r5, #0]
  404d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d32:	2b01      	cmp	r3, #1
  404d34:	4606      	mov	r6, r0
  404d36:	460f      	mov	r7, r1
  404d38:	f105 0501 	add.w	r5, r5, #1
  404d3c:	d068      	beq.n	404e10 <_dtoa_r+0x330>
  404d3e:	2200      	movs	r2, #0
  404d40:	4b18      	ldr	r3, [pc, #96]	; (404da4 <_dtoa_r+0x2c4>)
  404d42:	f7fe f923 	bl	402f8c <__aeabi_dmul>
  404d46:	2200      	movs	r2, #0
  404d48:	2300      	movs	r3, #0
  404d4a:	4606      	mov	r6, r0
  404d4c:	460f      	mov	r7, r1
  404d4e:	f002 fa0f 	bl	407170 <__aeabi_dcmpeq>
  404d52:	2800      	cmp	r0, #0
  404d54:	f040 8088 	bne.w	404e68 <_dtoa_r+0x388>
  404d58:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  404d5c:	f04f 0a00 	mov.w	sl, #0
  404d60:	f8df b040 	ldr.w	fp, [pc, #64]	; 404da4 <_dtoa_r+0x2c4>
  404d64:	940c      	str	r4, [sp, #48]	; 0x30
  404d66:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  404d6a:	e028      	b.n	404dbe <_dtoa_r+0x2de>
  404d6c:	f3af 8000 	nop.w
  404d70:	636f4361 	.word	0x636f4361
  404d74:	3fd287a7 	.word	0x3fd287a7
  404d78:	8b60c8b3 	.word	0x8b60c8b3
  404d7c:	3fc68a28 	.word	0x3fc68a28
  404d80:	509f79fb 	.word	0x509f79fb
  404d84:	3fd34413 	.word	0x3fd34413
  404d88:	7ff00000 	.word	0x7ff00000
  404d8c:	00407559 	.word	0x00407559
  404d90:	0040757c 	.word	0x0040757c
  404d94:	00407588 	.word	0x00407588
  404d98:	3ff80000 	.word	0x3ff80000
  404d9c:	004075b8 	.word	0x004075b8
  404da0:	00407558 	.word	0x00407558
  404da4:	40240000 	.word	0x40240000
  404da8:	f7fe f8f0 	bl	402f8c <__aeabi_dmul>
  404dac:	2200      	movs	r2, #0
  404dae:	2300      	movs	r3, #0
  404db0:	4606      	mov	r6, r0
  404db2:	460f      	mov	r7, r1
  404db4:	f002 f9dc 	bl	407170 <__aeabi_dcmpeq>
  404db8:	2800      	cmp	r0, #0
  404dba:	f040 83c1 	bne.w	405540 <_dtoa_r+0xa60>
  404dbe:	4642      	mov	r2, r8
  404dc0:	464b      	mov	r3, r9
  404dc2:	4630      	mov	r0, r6
  404dc4:	4639      	mov	r1, r7
  404dc6:	f7fe fa0b 	bl	4031e0 <__aeabi_ddiv>
  404dca:	f7fe faf1 	bl	4033b0 <__aeabi_d2iz>
  404dce:	4604      	mov	r4, r0
  404dd0:	f7fe f876 	bl	402ec0 <__aeabi_i2d>
  404dd4:	4642      	mov	r2, r8
  404dd6:	464b      	mov	r3, r9
  404dd8:	f7fe f8d8 	bl	402f8c <__aeabi_dmul>
  404ddc:	4602      	mov	r2, r0
  404dde:	460b      	mov	r3, r1
  404de0:	4630      	mov	r0, r6
  404de2:	4639      	mov	r1, r7
  404de4:	f7fd ff1e 	bl	402c24 <__aeabi_dsub>
  404de8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  404dec:	9e04      	ldr	r6, [sp, #16]
  404dee:	f805 eb01 	strb.w	lr, [r5], #1
  404df2:	eba5 0e06 	sub.w	lr, r5, r6
  404df6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404df8:	45b6      	cmp	lr, r6
  404dfa:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404dfe:	4652      	mov	r2, sl
  404e00:	465b      	mov	r3, fp
  404e02:	d1d1      	bne.n	404da8 <_dtoa_r+0x2c8>
  404e04:	46a0      	mov	r8, r4
  404e06:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404e0a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404e0c:	4606      	mov	r6, r0
  404e0e:	460f      	mov	r7, r1
  404e10:	4632      	mov	r2, r6
  404e12:	463b      	mov	r3, r7
  404e14:	4630      	mov	r0, r6
  404e16:	4639      	mov	r1, r7
  404e18:	f7fd ff06 	bl	402c28 <__adddf3>
  404e1c:	4606      	mov	r6, r0
  404e1e:	460f      	mov	r7, r1
  404e20:	4602      	mov	r2, r0
  404e22:	460b      	mov	r3, r1
  404e24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404e28:	f002 f9ac 	bl	407184 <__aeabi_dcmplt>
  404e2c:	b948      	cbnz	r0, 404e42 <_dtoa_r+0x362>
  404e2e:	4632      	mov	r2, r6
  404e30:	463b      	mov	r3, r7
  404e32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404e36:	f002 f99b 	bl	407170 <__aeabi_dcmpeq>
  404e3a:	b1a8      	cbz	r0, 404e68 <_dtoa_r+0x388>
  404e3c:	f018 0f01 	tst.w	r8, #1
  404e40:	d012      	beq.n	404e68 <_dtoa_r+0x388>
  404e42:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404e46:	9a04      	ldr	r2, [sp, #16]
  404e48:	1e6b      	subs	r3, r5, #1
  404e4a:	e004      	b.n	404e56 <_dtoa_r+0x376>
  404e4c:	429a      	cmp	r2, r3
  404e4e:	f000 8401 	beq.w	405654 <_dtoa_r+0xb74>
  404e52:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  404e56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  404e5a:	f103 0501 	add.w	r5, r3, #1
  404e5e:	d0f5      	beq.n	404e4c <_dtoa_r+0x36c>
  404e60:	f108 0801 	add.w	r8, r8, #1
  404e64:	f883 8000 	strb.w	r8, [r3]
  404e68:	4649      	mov	r1, r9
  404e6a:	4620      	mov	r0, r4
  404e6c:	f001 f95c 	bl	406128 <_Bfree>
  404e70:	2200      	movs	r2, #0
  404e72:	9b02      	ldr	r3, [sp, #8]
  404e74:	702a      	strb	r2, [r5, #0]
  404e76:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404e78:	3301      	adds	r3, #1
  404e7a:	6013      	str	r3, [r2, #0]
  404e7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404e7e:	2b00      	cmp	r3, #0
  404e80:	f000 839e 	beq.w	4055c0 <_dtoa_r+0xae0>
  404e84:	9804      	ldr	r0, [sp, #16]
  404e86:	601d      	str	r5, [r3, #0]
  404e88:	b01b      	add	sp, #108	; 0x6c
  404e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404e90:	2a00      	cmp	r2, #0
  404e92:	d03e      	beq.n	404f12 <_dtoa_r+0x432>
  404e94:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404e96:	2a01      	cmp	r2, #1
  404e98:	f340 8311 	ble.w	4054be <_dtoa_r+0x9de>
  404e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404ea0:	1e5f      	subs	r7, r3, #1
  404ea2:	42ba      	cmp	r2, r7
  404ea4:	f2c0 838f 	blt.w	4055c6 <_dtoa_r+0xae6>
  404ea8:	1bd7      	subs	r7, r2, r7
  404eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404eac:	2b00      	cmp	r3, #0
  404eae:	f2c0 848b 	blt.w	4057c8 <_dtoa_r+0xce8>
  404eb2:	9d08      	ldr	r5, [sp, #32]
  404eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404eb6:	9a08      	ldr	r2, [sp, #32]
  404eb8:	441a      	add	r2, r3
  404eba:	9208      	str	r2, [sp, #32]
  404ebc:	9a06      	ldr	r2, [sp, #24]
  404ebe:	2101      	movs	r1, #1
  404ec0:	441a      	add	r2, r3
  404ec2:	4620      	mov	r0, r4
  404ec4:	9206      	str	r2, [sp, #24]
  404ec6:	f001 f9c9 	bl	40625c <__i2b>
  404eca:	4606      	mov	r6, r0
  404ecc:	e024      	b.n	404f18 <_dtoa_r+0x438>
  404ece:	2301      	movs	r3, #1
  404ed0:	930e      	str	r3, [sp, #56]	; 0x38
  404ed2:	e6af      	b.n	404c34 <_dtoa_r+0x154>
  404ed4:	9a08      	ldr	r2, [sp, #32]
  404ed6:	9b02      	ldr	r3, [sp, #8]
  404ed8:	1ad2      	subs	r2, r2, r3
  404eda:	425b      	negs	r3, r3
  404edc:	930c      	str	r3, [sp, #48]	; 0x30
  404ede:	2300      	movs	r3, #0
  404ee0:	9208      	str	r2, [sp, #32]
  404ee2:	930d      	str	r3, [sp, #52]	; 0x34
  404ee4:	e6b8      	b.n	404c58 <_dtoa_r+0x178>
  404ee6:	f1c7 0301 	rsb	r3, r7, #1
  404eea:	9308      	str	r3, [sp, #32]
  404eec:	2300      	movs	r3, #0
  404eee:	9306      	str	r3, [sp, #24]
  404ef0:	e6a7      	b.n	404c42 <_dtoa_r+0x162>
  404ef2:	9d02      	ldr	r5, [sp, #8]
  404ef4:	4628      	mov	r0, r5
  404ef6:	f7fd ffe3 	bl	402ec0 <__aeabi_i2d>
  404efa:	4602      	mov	r2, r0
  404efc:	460b      	mov	r3, r1
  404efe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404f02:	f002 f935 	bl	407170 <__aeabi_dcmpeq>
  404f06:	2800      	cmp	r0, #0
  404f08:	f47f ae80 	bne.w	404c0c <_dtoa_r+0x12c>
  404f0c:	1e6b      	subs	r3, r5, #1
  404f0e:	9302      	str	r3, [sp, #8]
  404f10:	e67c      	b.n	404c0c <_dtoa_r+0x12c>
  404f12:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404f14:	9d08      	ldr	r5, [sp, #32]
  404f16:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  404f18:	2d00      	cmp	r5, #0
  404f1a:	dd0c      	ble.n	404f36 <_dtoa_r+0x456>
  404f1c:	9906      	ldr	r1, [sp, #24]
  404f1e:	2900      	cmp	r1, #0
  404f20:	460b      	mov	r3, r1
  404f22:	dd08      	ble.n	404f36 <_dtoa_r+0x456>
  404f24:	42a9      	cmp	r1, r5
  404f26:	9a08      	ldr	r2, [sp, #32]
  404f28:	bfa8      	it	ge
  404f2a:	462b      	movge	r3, r5
  404f2c:	1ad2      	subs	r2, r2, r3
  404f2e:	1aed      	subs	r5, r5, r3
  404f30:	1acb      	subs	r3, r1, r3
  404f32:	9208      	str	r2, [sp, #32]
  404f34:	9306      	str	r3, [sp, #24]
  404f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404f38:	b1d3      	cbz	r3, 404f70 <_dtoa_r+0x490>
  404f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404f3c:	2b00      	cmp	r3, #0
  404f3e:	f000 82b7 	beq.w	4054b0 <_dtoa_r+0x9d0>
  404f42:	2f00      	cmp	r7, #0
  404f44:	dd10      	ble.n	404f68 <_dtoa_r+0x488>
  404f46:	4631      	mov	r1, r6
  404f48:	463a      	mov	r2, r7
  404f4a:	4620      	mov	r0, r4
  404f4c:	f001 fa22 	bl	406394 <__pow5mult>
  404f50:	464a      	mov	r2, r9
  404f52:	4601      	mov	r1, r0
  404f54:	4606      	mov	r6, r0
  404f56:	4620      	mov	r0, r4
  404f58:	f001 f98a 	bl	406270 <__multiply>
  404f5c:	4649      	mov	r1, r9
  404f5e:	4680      	mov	r8, r0
  404f60:	4620      	mov	r0, r4
  404f62:	f001 f8e1 	bl	406128 <_Bfree>
  404f66:	46c1      	mov	r9, r8
  404f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404f6a:	1bda      	subs	r2, r3, r7
  404f6c:	f040 82a1 	bne.w	4054b2 <_dtoa_r+0x9d2>
  404f70:	2101      	movs	r1, #1
  404f72:	4620      	mov	r0, r4
  404f74:	f001 f972 	bl	40625c <__i2b>
  404f78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404f7a:	2b00      	cmp	r3, #0
  404f7c:	4680      	mov	r8, r0
  404f7e:	dd1c      	ble.n	404fba <_dtoa_r+0x4da>
  404f80:	4601      	mov	r1, r0
  404f82:	461a      	mov	r2, r3
  404f84:	4620      	mov	r0, r4
  404f86:	f001 fa05 	bl	406394 <__pow5mult>
  404f8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f8c:	2b01      	cmp	r3, #1
  404f8e:	4680      	mov	r8, r0
  404f90:	f340 8254 	ble.w	40543c <_dtoa_r+0x95c>
  404f94:	2300      	movs	r3, #0
  404f96:	930c      	str	r3, [sp, #48]	; 0x30
  404f98:	f8d8 3010 	ldr.w	r3, [r8, #16]
  404f9c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  404fa0:	6918      	ldr	r0, [r3, #16]
  404fa2:	f001 f90b 	bl	4061bc <__hi0bits>
  404fa6:	f1c0 0020 	rsb	r0, r0, #32
  404faa:	e010      	b.n	404fce <_dtoa_r+0x4ee>
  404fac:	f1c3 0520 	rsb	r5, r3, #32
  404fb0:	fa0a f005 	lsl.w	r0, sl, r5
  404fb4:	e674      	b.n	404ca0 <_dtoa_r+0x1c0>
  404fb6:	900e      	str	r0, [sp, #56]	; 0x38
  404fb8:	e63c      	b.n	404c34 <_dtoa_r+0x154>
  404fba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fbc:	2b01      	cmp	r3, #1
  404fbe:	f340 8287 	ble.w	4054d0 <_dtoa_r+0x9f0>
  404fc2:	2300      	movs	r3, #0
  404fc4:	930c      	str	r3, [sp, #48]	; 0x30
  404fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404fc8:	2001      	movs	r0, #1
  404fca:	2b00      	cmp	r3, #0
  404fcc:	d1e4      	bne.n	404f98 <_dtoa_r+0x4b8>
  404fce:	9a06      	ldr	r2, [sp, #24]
  404fd0:	4410      	add	r0, r2
  404fd2:	f010 001f 	ands.w	r0, r0, #31
  404fd6:	f000 80a1 	beq.w	40511c <_dtoa_r+0x63c>
  404fda:	f1c0 0320 	rsb	r3, r0, #32
  404fde:	2b04      	cmp	r3, #4
  404fe0:	f340 849e 	ble.w	405920 <_dtoa_r+0xe40>
  404fe4:	9b08      	ldr	r3, [sp, #32]
  404fe6:	f1c0 001c 	rsb	r0, r0, #28
  404fea:	4403      	add	r3, r0
  404fec:	9308      	str	r3, [sp, #32]
  404fee:	4613      	mov	r3, r2
  404ff0:	4403      	add	r3, r0
  404ff2:	4405      	add	r5, r0
  404ff4:	9306      	str	r3, [sp, #24]
  404ff6:	9b08      	ldr	r3, [sp, #32]
  404ff8:	2b00      	cmp	r3, #0
  404ffa:	dd05      	ble.n	405008 <_dtoa_r+0x528>
  404ffc:	4649      	mov	r1, r9
  404ffe:	461a      	mov	r2, r3
  405000:	4620      	mov	r0, r4
  405002:	f001 fa17 	bl	406434 <__lshift>
  405006:	4681      	mov	r9, r0
  405008:	9b06      	ldr	r3, [sp, #24]
  40500a:	2b00      	cmp	r3, #0
  40500c:	dd05      	ble.n	40501a <_dtoa_r+0x53a>
  40500e:	4641      	mov	r1, r8
  405010:	461a      	mov	r2, r3
  405012:	4620      	mov	r0, r4
  405014:	f001 fa0e 	bl	406434 <__lshift>
  405018:	4680      	mov	r8, r0
  40501a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40501c:	2b00      	cmp	r3, #0
  40501e:	f040 8086 	bne.w	40512e <_dtoa_r+0x64e>
  405022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405024:	2b00      	cmp	r3, #0
  405026:	f340 8266 	ble.w	4054f6 <_dtoa_r+0xa16>
  40502a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40502c:	2b00      	cmp	r3, #0
  40502e:	f000 8098 	beq.w	405162 <_dtoa_r+0x682>
  405032:	2d00      	cmp	r5, #0
  405034:	dd05      	ble.n	405042 <_dtoa_r+0x562>
  405036:	4631      	mov	r1, r6
  405038:	462a      	mov	r2, r5
  40503a:	4620      	mov	r0, r4
  40503c:	f001 f9fa 	bl	406434 <__lshift>
  405040:	4606      	mov	r6, r0
  405042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405044:	2b00      	cmp	r3, #0
  405046:	f040 8337 	bne.w	4056b8 <_dtoa_r+0xbd8>
  40504a:	9606      	str	r6, [sp, #24]
  40504c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40504e:	9a04      	ldr	r2, [sp, #16]
  405050:	f8dd b018 	ldr.w	fp, [sp, #24]
  405054:	3b01      	subs	r3, #1
  405056:	18d3      	adds	r3, r2, r3
  405058:	930b      	str	r3, [sp, #44]	; 0x2c
  40505a:	f00a 0301 	and.w	r3, sl, #1
  40505e:	930c      	str	r3, [sp, #48]	; 0x30
  405060:	4617      	mov	r7, r2
  405062:	46c2      	mov	sl, r8
  405064:	4651      	mov	r1, sl
  405066:	4648      	mov	r0, r9
  405068:	f7ff fca4 	bl	4049b4 <quorem>
  40506c:	4631      	mov	r1, r6
  40506e:	4605      	mov	r5, r0
  405070:	4648      	mov	r0, r9
  405072:	f001 fa31 	bl	4064d8 <__mcmp>
  405076:	465a      	mov	r2, fp
  405078:	900a      	str	r0, [sp, #40]	; 0x28
  40507a:	4651      	mov	r1, sl
  40507c:	4620      	mov	r0, r4
  40507e:	f001 fa47 	bl	406510 <__mdiff>
  405082:	68c2      	ldr	r2, [r0, #12]
  405084:	4680      	mov	r8, r0
  405086:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40508a:	2a00      	cmp	r2, #0
  40508c:	f040 822b 	bne.w	4054e6 <_dtoa_r+0xa06>
  405090:	4601      	mov	r1, r0
  405092:	4648      	mov	r0, r9
  405094:	9308      	str	r3, [sp, #32]
  405096:	f001 fa1f 	bl	4064d8 <__mcmp>
  40509a:	4641      	mov	r1, r8
  40509c:	9006      	str	r0, [sp, #24]
  40509e:	4620      	mov	r0, r4
  4050a0:	f001 f842 	bl	406128 <_Bfree>
  4050a4:	9a06      	ldr	r2, [sp, #24]
  4050a6:	9b08      	ldr	r3, [sp, #32]
  4050a8:	b932      	cbnz	r2, 4050b8 <_dtoa_r+0x5d8>
  4050aa:	9924      	ldr	r1, [sp, #144]	; 0x90
  4050ac:	b921      	cbnz	r1, 4050b8 <_dtoa_r+0x5d8>
  4050ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4050b0:	2a00      	cmp	r2, #0
  4050b2:	f000 83ef 	beq.w	405894 <_dtoa_r+0xdb4>
  4050b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4050b8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4050ba:	2900      	cmp	r1, #0
  4050bc:	f2c0 829f 	blt.w	4055fe <_dtoa_r+0xb1e>
  4050c0:	d105      	bne.n	4050ce <_dtoa_r+0x5ee>
  4050c2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4050c4:	b919      	cbnz	r1, 4050ce <_dtoa_r+0x5ee>
  4050c6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4050c8:	2900      	cmp	r1, #0
  4050ca:	f000 8298 	beq.w	4055fe <_dtoa_r+0xb1e>
  4050ce:	2a00      	cmp	r2, #0
  4050d0:	f300 8306 	bgt.w	4056e0 <_dtoa_r+0xc00>
  4050d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4050d6:	703b      	strb	r3, [r7, #0]
  4050d8:	f107 0801 	add.w	r8, r7, #1
  4050dc:	4297      	cmp	r7, r2
  4050de:	4645      	mov	r5, r8
  4050e0:	f000 830c 	beq.w	4056fc <_dtoa_r+0xc1c>
  4050e4:	4649      	mov	r1, r9
  4050e6:	2300      	movs	r3, #0
  4050e8:	220a      	movs	r2, #10
  4050ea:	4620      	mov	r0, r4
  4050ec:	f001 f826 	bl	40613c <__multadd>
  4050f0:	455e      	cmp	r6, fp
  4050f2:	4681      	mov	r9, r0
  4050f4:	4631      	mov	r1, r6
  4050f6:	f04f 0300 	mov.w	r3, #0
  4050fa:	f04f 020a 	mov.w	r2, #10
  4050fe:	4620      	mov	r0, r4
  405100:	f000 81eb 	beq.w	4054da <_dtoa_r+0x9fa>
  405104:	f001 f81a 	bl	40613c <__multadd>
  405108:	4659      	mov	r1, fp
  40510a:	4606      	mov	r6, r0
  40510c:	2300      	movs	r3, #0
  40510e:	220a      	movs	r2, #10
  405110:	4620      	mov	r0, r4
  405112:	f001 f813 	bl	40613c <__multadd>
  405116:	4647      	mov	r7, r8
  405118:	4683      	mov	fp, r0
  40511a:	e7a3      	b.n	405064 <_dtoa_r+0x584>
  40511c:	201c      	movs	r0, #28
  40511e:	9b08      	ldr	r3, [sp, #32]
  405120:	4403      	add	r3, r0
  405122:	9308      	str	r3, [sp, #32]
  405124:	9b06      	ldr	r3, [sp, #24]
  405126:	4403      	add	r3, r0
  405128:	4405      	add	r5, r0
  40512a:	9306      	str	r3, [sp, #24]
  40512c:	e763      	b.n	404ff6 <_dtoa_r+0x516>
  40512e:	4641      	mov	r1, r8
  405130:	4648      	mov	r0, r9
  405132:	f001 f9d1 	bl	4064d8 <__mcmp>
  405136:	2800      	cmp	r0, #0
  405138:	f6bf af73 	bge.w	405022 <_dtoa_r+0x542>
  40513c:	9f02      	ldr	r7, [sp, #8]
  40513e:	4649      	mov	r1, r9
  405140:	2300      	movs	r3, #0
  405142:	220a      	movs	r2, #10
  405144:	4620      	mov	r0, r4
  405146:	3f01      	subs	r7, #1
  405148:	9702      	str	r7, [sp, #8]
  40514a:	f000 fff7 	bl	40613c <__multadd>
  40514e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405150:	4681      	mov	r9, r0
  405152:	2b00      	cmp	r3, #0
  405154:	f040 83b6 	bne.w	4058c4 <_dtoa_r+0xde4>
  405158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40515a:	2b00      	cmp	r3, #0
  40515c:	f340 83bf 	ble.w	4058de <_dtoa_r+0xdfe>
  405160:	930a      	str	r3, [sp, #40]	; 0x28
  405162:	f8dd b010 	ldr.w	fp, [sp, #16]
  405166:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405168:	465d      	mov	r5, fp
  40516a:	e002      	b.n	405172 <_dtoa_r+0x692>
  40516c:	f000 ffe6 	bl	40613c <__multadd>
  405170:	4681      	mov	r9, r0
  405172:	4641      	mov	r1, r8
  405174:	4648      	mov	r0, r9
  405176:	f7ff fc1d 	bl	4049b4 <quorem>
  40517a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40517e:	f805 ab01 	strb.w	sl, [r5], #1
  405182:	eba5 030b 	sub.w	r3, r5, fp
  405186:	42bb      	cmp	r3, r7
  405188:	f04f 020a 	mov.w	r2, #10
  40518c:	f04f 0300 	mov.w	r3, #0
  405190:	4649      	mov	r1, r9
  405192:	4620      	mov	r0, r4
  405194:	dbea      	blt.n	40516c <_dtoa_r+0x68c>
  405196:	9b04      	ldr	r3, [sp, #16]
  405198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40519a:	2a01      	cmp	r2, #1
  40519c:	bfac      	ite	ge
  40519e:	189b      	addge	r3, r3, r2
  4051a0:	3301      	addlt	r3, #1
  4051a2:	461d      	mov	r5, r3
  4051a4:	f04f 0b00 	mov.w	fp, #0
  4051a8:	4649      	mov	r1, r9
  4051aa:	2201      	movs	r2, #1
  4051ac:	4620      	mov	r0, r4
  4051ae:	f001 f941 	bl	406434 <__lshift>
  4051b2:	4641      	mov	r1, r8
  4051b4:	4681      	mov	r9, r0
  4051b6:	f001 f98f 	bl	4064d8 <__mcmp>
  4051ba:	2800      	cmp	r0, #0
  4051bc:	f340 823d 	ble.w	40563a <_dtoa_r+0xb5a>
  4051c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4051c4:	9904      	ldr	r1, [sp, #16]
  4051c6:	1e6b      	subs	r3, r5, #1
  4051c8:	e004      	b.n	4051d4 <_dtoa_r+0x6f4>
  4051ca:	428b      	cmp	r3, r1
  4051cc:	f000 81ae 	beq.w	40552c <_dtoa_r+0xa4c>
  4051d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4051d4:	2a39      	cmp	r2, #57	; 0x39
  4051d6:	f103 0501 	add.w	r5, r3, #1
  4051da:	d0f6      	beq.n	4051ca <_dtoa_r+0x6ea>
  4051dc:	3201      	adds	r2, #1
  4051de:	701a      	strb	r2, [r3, #0]
  4051e0:	4641      	mov	r1, r8
  4051e2:	4620      	mov	r0, r4
  4051e4:	f000 ffa0 	bl	406128 <_Bfree>
  4051e8:	2e00      	cmp	r6, #0
  4051ea:	f43f ae3d 	beq.w	404e68 <_dtoa_r+0x388>
  4051ee:	f1bb 0f00 	cmp.w	fp, #0
  4051f2:	d005      	beq.n	405200 <_dtoa_r+0x720>
  4051f4:	45b3      	cmp	fp, r6
  4051f6:	d003      	beq.n	405200 <_dtoa_r+0x720>
  4051f8:	4659      	mov	r1, fp
  4051fa:	4620      	mov	r0, r4
  4051fc:	f000 ff94 	bl	406128 <_Bfree>
  405200:	4631      	mov	r1, r6
  405202:	4620      	mov	r0, r4
  405204:	f000 ff90 	bl	406128 <_Bfree>
  405208:	e62e      	b.n	404e68 <_dtoa_r+0x388>
  40520a:	2300      	movs	r3, #0
  40520c:	930b      	str	r3, [sp, #44]	; 0x2c
  40520e:	9b02      	ldr	r3, [sp, #8]
  405210:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405212:	4413      	add	r3, r2
  405214:	930f      	str	r3, [sp, #60]	; 0x3c
  405216:	3301      	adds	r3, #1
  405218:	2b01      	cmp	r3, #1
  40521a:	461f      	mov	r7, r3
  40521c:	461e      	mov	r6, r3
  40521e:	930a      	str	r3, [sp, #40]	; 0x28
  405220:	bfb8      	it	lt
  405222:	2701      	movlt	r7, #1
  405224:	2100      	movs	r1, #0
  405226:	2f17      	cmp	r7, #23
  405228:	6461      	str	r1, [r4, #68]	; 0x44
  40522a:	d90a      	bls.n	405242 <_dtoa_r+0x762>
  40522c:	2201      	movs	r2, #1
  40522e:	2304      	movs	r3, #4
  405230:	005b      	lsls	r3, r3, #1
  405232:	f103 0014 	add.w	r0, r3, #20
  405236:	4287      	cmp	r7, r0
  405238:	4611      	mov	r1, r2
  40523a:	f102 0201 	add.w	r2, r2, #1
  40523e:	d2f7      	bcs.n	405230 <_dtoa_r+0x750>
  405240:	6461      	str	r1, [r4, #68]	; 0x44
  405242:	4620      	mov	r0, r4
  405244:	f000 ff4a 	bl	4060dc <_Balloc>
  405248:	2e0e      	cmp	r6, #14
  40524a:	9004      	str	r0, [sp, #16]
  40524c:	6420      	str	r0, [r4, #64]	; 0x40
  40524e:	f63f ad41 	bhi.w	404cd4 <_dtoa_r+0x1f4>
  405252:	2d00      	cmp	r5, #0
  405254:	f43f ad3e 	beq.w	404cd4 <_dtoa_r+0x1f4>
  405258:	9902      	ldr	r1, [sp, #8]
  40525a:	2900      	cmp	r1, #0
  40525c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405260:	f340 8202 	ble.w	405668 <_dtoa_r+0xb88>
  405264:	4bb8      	ldr	r3, [pc, #736]	; (405548 <_dtoa_r+0xa68>)
  405266:	f001 020f 	and.w	r2, r1, #15
  40526a:	110d      	asrs	r5, r1, #4
  40526c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405270:	06e9      	lsls	r1, r5, #27
  405272:	e9d3 6700 	ldrd	r6, r7, [r3]
  405276:	f140 81ae 	bpl.w	4055d6 <_dtoa_r+0xaf6>
  40527a:	4bb4      	ldr	r3, [pc, #720]	; (40554c <_dtoa_r+0xa6c>)
  40527c:	4650      	mov	r0, sl
  40527e:	4659      	mov	r1, fp
  405280:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405284:	f7fd ffac 	bl	4031e0 <__aeabi_ddiv>
  405288:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40528c:	f005 050f 	and.w	r5, r5, #15
  405290:	f04f 0a03 	mov.w	sl, #3
  405294:	b18d      	cbz	r5, 4052ba <_dtoa_r+0x7da>
  405296:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40554c <_dtoa_r+0xa6c>
  40529a:	07ea      	lsls	r2, r5, #31
  40529c:	d509      	bpl.n	4052b2 <_dtoa_r+0x7d2>
  40529e:	4630      	mov	r0, r6
  4052a0:	4639      	mov	r1, r7
  4052a2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4052a6:	f7fd fe71 	bl	402f8c <__aeabi_dmul>
  4052aa:	f10a 0a01 	add.w	sl, sl, #1
  4052ae:	4606      	mov	r6, r0
  4052b0:	460f      	mov	r7, r1
  4052b2:	106d      	asrs	r5, r5, #1
  4052b4:	f108 0808 	add.w	r8, r8, #8
  4052b8:	d1ef      	bne.n	40529a <_dtoa_r+0x7ba>
  4052ba:	463b      	mov	r3, r7
  4052bc:	4632      	mov	r2, r6
  4052be:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4052c2:	f7fd ff8d 	bl	4031e0 <__aeabi_ddiv>
  4052c6:	4607      	mov	r7, r0
  4052c8:	4688      	mov	r8, r1
  4052ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4052cc:	b143      	cbz	r3, 4052e0 <_dtoa_r+0x800>
  4052ce:	2200      	movs	r2, #0
  4052d0:	4b9f      	ldr	r3, [pc, #636]	; (405550 <_dtoa_r+0xa70>)
  4052d2:	4638      	mov	r0, r7
  4052d4:	4641      	mov	r1, r8
  4052d6:	f001 ff55 	bl	407184 <__aeabi_dcmplt>
  4052da:	2800      	cmp	r0, #0
  4052dc:	f040 8286 	bne.w	4057ec <_dtoa_r+0xd0c>
  4052e0:	4650      	mov	r0, sl
  4052e2:	f7fd fded 	bl	402ec0 <__aeabi_i2d>
  4052e6:	463a      	mov	r2, r7
  4052e8:	4643      	mov	r3, r8
  4052ea:	f7fd fe4f 	bl	402f8c <__aeabi_dmul>
  4052ee:	4b99      	ldr	r3, [pc, #612]	; (405554 <_dtoa_r+0xa74>)
  4052f0:	2200      	movs	r2, #0
  4052f2:	f7fd fc99 	bl	402c28 <__adddf3>
  4052f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052f8:	4605      	mov	r5, r0
  4052fa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4052fe:	2b00      	cmp	r3, #0
  405300:	f000 813e 	beq.w	405580 <_dtoa_r+0xaa0>
  405304:	9b02      	ldr	r3, [sp, #8]
  405306:	9315      	str	r3, [sp, #84]	; 0x54
  405308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40530a:	9312      	str	r3, [sp, #72]	; 0x48
  40530c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40530e:	2b00      	cmp	r3, #0
  405310:	f000 81fa 	beq.w	405708 <_dtoa_r+0xc28>
  405314:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405316:	4b8c      	ldr	r3, [pc, #560]	; (405548 <_dtoa_r+0xa68>)
  405318:	498f      	ldr	r1, [pc, #572]	; (405558 <_dtoa_r+0xa78>)
  40531a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40531e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405322:	2000      	movs	r0, #0
  405324:	f7fd ff5c 	bl	4031e0 <__aeabi_ddiv>
  405328:	462a      	mov	r2, r5
  40532a:	4633      	mov	r3, r6
  40532c:	f7fd fc7a 	bl	402c24 <__aeabi_dsub>
  405330:	4682      	mov	sl, r0
  405332:	468b      	mov	fp, r1
  405334:	4638      	mov	r0, r7
  405336:	4641      	mov	r1, r8
  405338:	f7fe f83a 	bl	4033b0 <__aeabi_d2iz>
  40533c:	4605      	mov	r5, r0
  40533e:	f7fd fdbf 	bl	402ec0 <__aeabi_i2d>
  405342:	4602      	mov	r2, r0
  405344:	460b      	mov	r3, r1
  405346:	4638      	mov	r0, r7
  405348:	4641      	mov	r1, r8
  40534a:	f7fd fc6b 	bl	402c24 <__aeabi_dsub>
  40534e:	3530      	adds	r5, #48	; 0x30
  405350:	fa5f f885 	uxtb.w	r8, r5
  405354:	9d04      	ldr	r5, [sp, #16]
  405356:	4606      	mov	r6, r0
  405358:	460f      	mov	r7, r1
  40535a:	f885 8000 	strb.w	r8, [r5]
  40535e:	4602      	mov	r2, r0
  405360:	460b      	mov	r3, r1
  405362:	4650      	mov	r0, sl
  405364:	4659      	mov	r1, fp
  405366:	3501      	adds	r5, #1
  405368:	f001 ff2a 	bl	4071c0 <__aeabi_dcmpgt>
  40536c:	2800      	cmp	r0, #0
  40536e:	d154      	bne.n	40541a <_dtoa_r+0x93a>
  405370:	4632      	mov	r2, r6
  405372:	463b      	mov	r3, r7
  405374:	2000      	movs	r0, #0
  405376:	4976      	ldr	r1, [pc, #472]	; (405550 <_dtoa_r+0xa70>)
  405378:	f7fd fc54 	bl	402c24 <__aeabi_dsub>
  40537c:	4602      	mov	r2, r0
  40537e:	460b      	mov	r3, r1
  405380:	4650      	mov	r0, sl
  405382:	4659      	mov	r1, fp
  405384:	f001 ff1c 	bl	4071c0 <__aeabi_dcmpgt>
  405388:	2800      	cmp	r0, #0
  40538a:	f040 8270 	bne.w	40586e <_dtoa_r+0xd8e>
  40538e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405390:	2a01      	cmp	r2, #1
  405392:	f000 8111 	beq.w	4055b8 <_dtoa_r+0xad8>
  405396:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405398:	9a04      	ldr	r2, [sp, #16]
  40539a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40539e:	4413      	add	r3, r2
  4053a0:	4699      	mov	r9, r3
  4053a2:	e00d      	b.n	4053c0 <_dtoa_r+0x8e0>
  4053a4:	2000      	movs	r0, #0
  4053a6:	496a      	ldr	r1, [pc, #424]	; (405550 <_dtoa_r+0xa70>)
  4053a8:	f7fd fc3c 	bl	402c24 <__aeabi_dsub>
  4053ac:	4652      	mov	r2, sl
  4053ae:	465b      	mov	r3, fp
  4053b0:	f001 fee8 	bl	407184 <__aeabi_dcmplt>
  4053b4:	2800      	cmp	r0, #0
  4053b6:	f040 8258 	bne.w	40586a <_dtoa_r+0xd8a>
  4053ba:	454d      	cmp	r5, r9
  4053bc:	f000 80fa 	beq.w	4055b4 <_dtoa_r+0xad4>
  4053c0:	4650      	mov	r0, sl
  4053c2:	4659      	mov	r1, fp
  4053c4:	2200      	movs	r2, #0
  4053c6:	4b65      	ldr	r3, [pc, #404]	; (40555c <_dtoa_r+0xa7c>)
  4053c8:	f7fd fde0 	bl	402f8c <__aeabi_dmul>
  4053cc:	2200      	movs	r2, #0
  4053ce:	4b63      	ldr	r3, [pc, #396]	; (40555c <_dtoa_r+0xa7c>)
  4053d0:	4682      	mov	sl, r0
  4053d2:	468b      	mov	fp, r1
  4053d4:	4630      	mov	r0, r6
  4053d6:	4639      	mov	r1, r7
  4053d8:	f7fd fdd8 	bl	402f8c <__aeabi_dmul>
  4053dc:	460f      	mov	r7, r1
  4053de:	4606      	mov	r6, r0
  4053e0:	f7fd ffe6 	bl	4033b0 <__aeabi_d2iz>
  4053e4:	4680      	mov	r8, r0
  4053e6:	f7fd fd6b 	bl	402ec0 <__aeabi_i2d>
  4053ea:	4602      	mov	r2, r0
  4053ec:	460b      	mov	r3, r1
  4053ee:	4630      	mov	r0, r6
  4053f0:	4639      	mov	r1, r7
  4053f2:	f7fd fc17 	bl	402c24 <__aeabi_dsub>
  4053f6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4053fa:	fa5f f888 	uxtb.w	r8, r8
  4053fe:	4652      	mov	r2, sl
  405400:	465b      	mov	r3, fp
  405402:	f805 8b01 	strb.w	r8, [r5], #1
  405406:	4606      	mov	r6, r0
  405408:	460f      	mov	r7, r1
  40540a:	f001 febb 	bl	407184 <__aeabi_dcmplt>
  40540e:	4632      	mov	r2, r6
  405410:	463b      	mov	r3, r7
  405412:	2800      	cmp	r0, #0
  405414:	d0c6      	beq.n	4053a4 <_dtoa_r+0x8c4>
  405416:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40541a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40541c:	9302      	str	r3, [sp, #8]
  40541e:	e523      	b.n	404e68 <_dtoa_r+0x388>
  405420:	2300      	movs	r3, #0
  405422:	930b      	str	r3, [sp, #44]	; 0x2c
  405424:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405426:	2b00      	cmp	r3, #0
  405428:	f340 80dc 	ble.w	4055e4 <_dtoa_r+0xb04>
  40542c:	461f      	mov	r7, r3
  40542e:	461e      	mov	r6, r3
  405430:	930f      	str	r3, [sp, #60]	; 0x3c
  405432:	930a      	str	r3, [sp, #40]	; 0x28
  405434:	e6f6      	b.n	405224 <_dtoa_r+0x744>
  405436:	2301      	movs	r3, #1
  405438:	930b      	str	r3, [sp, #44]	; 0x2c
  40543a:	e7f3      	b.n	405424 <_dtoa_r+0x944>
  40543c:	f1ba 0f00 	cmp.w	sl, #0
  405440:	f47f ada8 	bne.w	404f94 <_dtoa_r+0x4b4>
  405444:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405448:	2b00      	cmp	r3, #0
  40544a:	f47f adba 	bne.w	404fc2 <_dtoa_r+0x4e2>
  40544e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405452:	0d3f      	lsrs	r7, r7, #20
  405454:	053f      	lsls	r7, r7, #20
  405456:	2f00      	cmp	r7, #0
  405458:	f000 820d 	beq.w	405876 <_dtoa_r+0xd96>
  40545c:	9b08      	ldr	r3, [sp, #32]
  40545e:	3301      	adds	r3, #1
  405460:	9308      	str	r3, [sp, #32]
  405462:	9b06      	ldr	r3, [sp, #24]
  405464:	3301      	adds	r3, #1
  405466:	9306      	str	r3, [sp, #24]
  405468:	2301      	movs	r3, #1
  40546a:	930c      	str	r3, [sp, #48]	; 0x30
  40546c:	e5ab      	b.n	404fc6 <_dtoa_r+0x4e6>
  40546e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405470:	2b00      	cmp	r3, #0
  405472:	f73f ac42 	bgt.w	404cfa <_dtoa_r+0x21a>
  405476:	f040 8221 	bne.w	4058bc <_dtoa_r+0xddc>
  40547a:	2200      	movs	r2, #0
  40547c:	4b38      	ldr	r3, [pc, #224]	; (405560 <_dtoa_r+0xa80>)
  40547e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405482:	f7fd fd83 	bl	402f8c <__aeabi_dmul>
  405486:	4652      	mov	r2, sl
  405488:	465b      	mov	r3, fp
  40548a:	f001 fe8f 	bl	4071ac <__aeabi_dcmpge>
  40548e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405492:	4646      	mov	r6, r8
  405494:	2800      	cmp	r0, #0
  405496:	d041      	beq.n	40551c <_dtoa_r+0xa3c>
  405498:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40549a:	9d04      	ldr	r5, [sp, #16]
  40549c:	43db      	mvns	r3, r3
  40549e:	9302      	str	r3, [sp, #8]
  4054a0:	4641      	mov	r1, r8
  4054a2:	4620      	mov	r0, r4
  4054a4:	f000 fe40 	bl	406128 <_Bfree>
  4054a8:	2e00      	cmp	r6, #0
  4054aa:	f43f acdd 	beq.w	404e68 <_dtoa_r+0x388>
  4054ae:	e6a7      	b.n	405200 <_dtoa_r+0x720>
  4054b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4054b2:	4649      	mov	r1, r9
  4054b4:	4620      	mov	r0, r4
  4054b6:	f000 ff6d 	bl	406394 <__pow5mult>
  4054ba:	4681      	mov	r9, r0
  4054bc:	e558      	b.n	404f70 <_dtoa_r+0x490>
  4054be:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4054c0:	2a00      	cmp	r2, #0
  4054c2:	f000 8187 	beq.w	4057d4 <_dtoa_r+0xcf4>
  4054c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4054ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4054cc:	9d08      	ldr	r5, [sp, #32]
  4054ce:	e4f2      	b.n	404eb6 <_dtoa_r+0x3d6>
  4054d0:	f1ba 0f00 	cmp.w	sl, #0
  4054d4:	f47f ad75 	bne.w	404fc2 <_dtoa_r+0x4e2>
  4054d8:	e7b4      	b.n	405444 <_dtoa_r+0x964>
  4054da:	f000 fe2f 	bl	40613c <__multadd>
  4054de:	4647      	mov	r7, r8
  4054e0:	4606      	mov	r6, r0
  4054e2:	4683      	mov	fp, r0
  4054e4:	e5be      	b.n	405064 <_dtoa_r+0x584>
  4054e6:	4601      	mov	r1, r0
  4054e8:	4620      	mov	r0, r4
  4054ea:	9306      	str	r3, [sp, #24]
  4054ec:	f000 fe1c 	bl	406128 <_Bfree>
  4054f0:	2201      	movs	r2, #1
  4054f2:	9b06      	ldr	r3, [sp, #24]
  4054f4:	e5e0      	b.n	4050b8 <_dtoa_r+0x5d8>
  4054f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4054f8:	2b02      	cmp	r3, #2
  4054fa:	f77f ad96 	ble.w	40502a <_dtoa_r+0x54a>
  4054fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405500:	2b00      	cmp	r3, #0
  405502:	d1c9      	bne.n	405498 <_dtoa_r+0x9b8>
  405504:	4641      	mov	r1, r8
  405506:	2205      	movs	r2, #5
  405508:	4620      	mov	r0, r4
  40550a:	f000 fe17 	bl	40613c <__multadd>
  40550e:	4601      	mov	r1, r0
  405510:	4680      	mov	r8, r0
  405512:	4648      	mov	r0, r9
  405514:	f000 ffe0 	bl	4064d8 <__mcmp>
  405518:	2800      	cmp	r0, #0
  40551a:	ddbd      	ble.n	405498 <_dtoa_r+0x9b8>
  40551c:	9a02      	ldr	r2, [sp, #8]
  40551e:	9904      	ldr	r1, [sp, #16]
  405520:	2331      	movs	r3, #49	; 0x31
  405522:	3201      	adds	r2, #1
  405524:	9202      	str	r2, [sp, #8]
  405526:	700b      	strb	r3, [r1, #0]
  405528:	1c4d      	adds	r5, r1, #1
  40552a:	e7b9      	b.n	4054a0 <_dtoa_r+0x9c0>
  40552c:	9a02      	ldr	r2, [sp, #8]
  40552e:	3201      	adds	r2, #1
  405530:	9202      	str	r2, [sp, #8]
  405532:	9a04      	ldr	r2, [sp, #16]
  405534:	2331      	movs	r3, #49	; 0x31
  405536:	7013      	strb	r3, [r2, #0]
  405538:	e652      	b.n	4051e0 <_dtoa_r+0x700>
  40553a:	2301      	movs	r3, #1
  40553c:	930b      	str	r3, [sp, #44]	; 0x2c
  40553e:	e666      	b.n	40520e <_dtoa_r+0x72e>
  405540:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405544:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405546:	e48f      	b.n	404e68 <_dtoa_r+0x388>
  405548:	004075b8 	.word	0x004075b8
  40554c:	00407590 	.word	0x00407590
  405550:	3ff00000 	.word	0x3ff00000
  405554:	401c0000 	.word	0x401c0000
  405558:	3fe00000 	.word	0x3fe00000
  40555c:	40240000 	.word	0x40240000
  405560:	40140000 	.word	0x40140000
  405564:	4650      	mov	r0, sl
  405566:	f7fd fcab 	bl	402ec0 <__aeabi_i2d>
  40556a:	463a      	mov	r2, r7
  40556c:	4643      	mov	r3, r8
  40556e:	f7fd fd0d 	bl	402f8c <__aeabi_dmul>
  405572:	2200      	movs	r2, #0
  405574:	4bc1      	ldr	r3, [pc, #772]	; (40587c <_dtoa_r+0xd9c>)
  405576:	f7fd fb57 	bl	402c28 <__adddf3>
  40557a:	4605      	mov	r5, r0
  40557c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405580:	4641      	mov	r1, r8
  405582:	2200      	movs	r2, #0
  405584:	4bbe      	ldr	r3, [pc, #760]	; (405880 <_dtoa_r+0xda0>)
  405586:	4638      	mov	r0, r7
  405588:	f7fd fb4c 	bl	402c24 <__aeabi_dsub>
  40558c:	462a      	mov	r2, r5
  40558e:	4633      	mov	r3, r6
  405590:	4682      	mov	sl, r0
  405592:	468b      	mov	fp, r1
  405594:	f001 fe14 	bl	4071c0 <__aeabi_dcmpgt>
  405598:	4680      	mov	r8, r0
  40559a:	2800      	cmp	r0, #0
  40559c:	f040 8110 	bne.w	4057c0 <_dtoa_r+0xce0>
  4055a0:	462a      	mov	r2, r5
  4055a2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4055a6:	4650      	mov	r0, sl
  4055a8:	4659      	mov	r1, fp
  4055aa:	f001 fdeb 	bl	407184 <__aeabi_dcmplt>
  4055ae:	b118      	cbz	r0, 4055b8 <_dtoa_r+0xad8>
  4055b0:	4646      	mov	r6, r8
  4055b2:	e771      	b.n	405498 <_dtoa_r+0x9b8>
  4055b4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4055b8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4055bc:	f7ff bb8a 	b.w	404cd4 <_dtoa_r+0x1f4>
  4055c0:	9804      	ldr	r0, [sp, #16]
  4055c2:	f7ff babb 	b.w	404b3c <_dtoa_r+0x5c>
  4055c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4055c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4055ca:	970c      	str	r7, [sp, #48]	; 0x30
  4055cc:	1afb      	subs	r3, r7, r3
  4055ce:	441a      	add	r2, r3
  4055d0:	920d      	str	r2, [sp, #52]	; 0x34
  4055d2:	2700      	movs	r7, #0
  4055d4:	e469      	b.n	404eaa <_dtoa_r+0x3ca>
  4055d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4055da:	f04f 0a02 	mov.w	sl, #2
  4055de:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4055e2:	e657      	b.n	405294 <_dtoa_r+0x7b4>
  4055e4:	2100      	movs	r1, #0
  4055e6:	2301      	movs	r3, #1
  4055e8:	6461      	str	r1, [r4, #68]	; 0x44
  4055ea:	4620      	mov	r0, r4
  4055ec:	9325      	str	r3, [sp, #148]	; 0x94
  4055ee:	f000 fd75 	bl	4060dc <_Balloc>
  4055f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4055f4:	9004      	str	r0, [sp, #16]
  4055f6:	6420      	str	r0, [r4, #64]	; 0x40
  4055f8:	930a      	str	r3, [sp, #40]	; 0x28
  4055fa:	930f      	str	r3, [sp, #60]	; 0x3c
  4055fc:	e629      	b.n	405252 <_dtoa_r+0x772>
  4055fe:	2a00      	cmp	r2, #0
  405600:	46d0      	mov	r8, sl
  405602:	f8cd b018 	str.w	fp, [sp, #24]
  405606:	469a      	mov	sl, r3
  405608:	dd11      	ble.n	40562e <_dtoa_r+0xb4e>
  40560a:	4649      	mov	r1, r9
  40560c:	2201      	movs	r2, #1
  40560e:	4620      	mov	r0, r4
  405610:	f000 ff10 	bl	406434 <__lshift>
  405614:	4641      	mov	r1, r8
  405616:	4681      	mov	r9, r0
  405618:	f000 ff5e 	bl	4064d8 <__mcmp>
  40561c:	2800      	cmp	r0, #0
  40561e:	f340 8146 	ble.w	4058ae <_dtoa_r+0xdce>
  405622:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405626:	f000 8106 	beq.w	405836 <_dtoa_r+0xd56>
  40562a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40562e:	46b3      	mov	fp, r6
  405630:	f887 a000 	strb.w	sl, [r7]
  405634:	1c7d      	adds	r5, r7, #1
  405636:	9e06      	ldr	r6, [sp, #24]
  405638:	e5d2      	b.n	4051e0 <_dtoa_r+0x700>
  40563a:	d104      	bne.n	405646 <_dtoa_r+0xb66>
  40563c:	f01a 0f01 	tst.w	sl, #1
  405640:	d001      	beq.n	405646 <_dtoa_r+0xb66>
  405642:	e5bd      	b.n	4051c0 <_dtoa_r+0x6e0>
  405644:	4615      	mov	r5, r2
  405646:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40564a:	2b30      	cmp	r3, #48	; 0x30
  40564c:	f105 32ff 	add.w	r2, r5, #4294967295
  405650:	d0f8      	beq.n	405644 <_dtoa_r+0xb64>
  405652:	e5c5      	b.n	4051e0 <_dtoa_r+0x700>
  405654:	9904      	ldr	r1, [sp, #16]
  405656:	2230      	movs	r2, #48	; 0x30
  405658:	700a      	strb	r2, [r1, #0]
  40565a:	9a02      	ldr	r2, [sp, #8]
  40565c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405660:	3201      	adds	r2, #1
  405662:	9202      	str	r2, [sp, #8]
  405664:	f7ff bbfc 	b.w	404e60 <_dtoa_r+0x380>
  405668:	f000 80bb 	beq.w	4057e2 <_dtoa_r+0xd02>
  40566c:	9b02      	ldr	r3, [sp, #8]
  40566e:	425d      	negs	r5, r3
  405670:	4b84      	ldr	r3, [pc, #528]	; (405884 <_dtoa_r+0xda4>)
  405672:	f005 020f 	and.w	r2, r5, #15
  405676:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40567a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40567e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405682:	f7fd fc83 	bl	402f8c <__aeabi_dmul>
  405686:	112d      	asrs	r5, r5, #4
  405688:	4607      	mov	r7, r0
  40568a:	4688      	mov	r8, r1
  40568c:	f000 812c 	beq.w	4058e8 <_dtoa_r+0xe08>
  405690:	4e7d      	ldr	r6, [pc, #500]	; (405888 <_dtoa_r+0xda8>)
  405692:	f04f 0a02 	mov.w	sl, #2
  405696:	07eb      	lsls	r3, r5, #31
  405698:	d509      	bpl.n	4056ae <_dtoa_r+0xbce>
  40569a:	4638      	mov	r0, r7
  40569c:	4641      	mov	r1, r8
  40569e:	e9d6 2300 	ldrd	r2, r3, [r6]
  4056a2:	f7fd fc73 	bl	402f8c <__aeabi_dmul>
  4056a6:	f10a 0a01 	add.w	sl, sl, #1
  4056aa:	4607      	mov	r7, r0
  4056ac:	4688      	mov	r8, r1
  4056ae:	106d      	asrs	r5, r5, #1
  4056b0:	f106 0608 	add.w	r6, r6, #8
  4056b4:	d1ef      	bne.n	405696 <_dtoa_r+0xbb6>
  4056b6:	e608      	b.n	4052ca <_dtoa_r+0x7ea>
  4056b8:	6871      	ldr	r1, [r6, #4]
  4056ba:	4620      	mov	r0, r4
  4056bc:	f000 fd0e 	bl	4060dc <_Balloc>
  4056c0:	6933      	ldr	r3, [r6, #16]
  4056c2:	3302      	adds	r3, #2
  4056c4:	009a      	lsls	r2, r3, #2
  4056c6:	4605      	mov	r5, r0
  4056c8:	f106 010c 	add.w	r1, r6, #12
  4056cc:	300c      	adds	r0, #12
  4056ce:	f000 fc5f 	bl	405f90 <memcpy>
  4056d2:	4629      	mov	r1, r5
  4056d4:	2201      	movs	r2, #1
  4056d6:	4620      	mov	r0, r4
  4056d8:	f000 feac 	bl	406434 <__lshift>
  4056dc:	9006      	str	r0, [sp, #24]
  4056de:	e4b5      	b.n	40504c <_dtoa_r+0x56c>
  4056e0:	2b39      	cmp	r3, #57	; 0x39
  4056e2:	f8cd b018 	str.w	fp, [sp, #24]
  4056e6:	46d0      	mov	r8, sl
  4056e8:	f000 80a5 	beq.w	405836 <_dtoa_r+0xd56>
  4056ec:	f103 0a01 	add.w	sl, r3, #1
  4056f0:	46b3      	mov	fp, r6
  4056f2:	f887 a000 	strb.w	sl, [r7]
  4056f6:	1c7d      	adds	r5, r7, #1
  4056f8:	9e06      	ldr	r6, [sp, #24]
  4056fa:	e571      	b.n	4051e0 <_dtoa_r+0x700>
  4056fc:	465a      	mov	r2, fp
  4056fe:	46d0      	mov	r8, sl
  405700:	46b3      	mov	fp, r6
  405702:	469a      	mov	sl, r3
  405704:	4616      	mov	r6, r2
  405706:	e54f      	b.n	4051a8 <_dtoa_r+0x6c8>
  405708:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40570a:	495e      	ldr	r1, [pc, #376]	; (405884 <_dtoa_r+0xda4>)
  40570c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405710:	462a      	mov	r2, r5
  405712:	4633      	mov	r3, r6
  405714:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405718:	f7fd fc38 	bl	402f8c <__aeabi_dmul>
  40571c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405720:	4638      	mov	r0, r7
  405722:	4641      	mov	r1, r8
  405724:	f7fd fe44 	bl	4033b0 <__aeabi_d2iz>
  405728:	4605      	mov	r5, r0
  40572a:	f7fd fbc9 	bl	402ec0 <__aeabi_i2d>
  40572e:	460b      	mov	r3, r1
  405730:	4602      	mov	r2, r0
  405732:	4641      	mov	r1, r8
  405734:	4638      	mov	r0, r7
  405736:	f7fd fa75 	bl	402c24 <__aeabi_dsub>
  40573a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40573c:	460f      	mov	r7, r1
  40573e:	9904      	ldr	r1, [sp, #16]
  405740:	3530      	adds	r5, #48	; 0x30
  405742:	2b01      	cmp	r3, #1
  405744:	700d      	strb	r5, [r1, #0]
  405746:	4606      	mov	r6, r0
  405748:	f101 0501 	add.w	r5, r1, #1
  40574c:	d026      	beq.n	40579c <_dtoa_r+0xcbc>
  40574e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405750:	9a04      	ldr	r2, [sp, #16]
  405752:	f8df b13c 	ldr.w	fp, [pc, #316]	; 405890 <_dtoa_r+0xdb0>
  405756:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40575a:	4413      	add	r3, r2
  40575c:	f04f 0a00 	mov.w	sl, #0
  405760:	4699      	mov	r9, r3
  405762:	4652      	mov	r2, sl
  405764:	465b      	mov	r3, fp
  405766:	4630      	mov	r0, r6
  405768:	4639      	mov	r1, r7
  40576a:	f7fd fc0f 	bl	402f8c <__aeabi_dmul>
  40576e:	460f      	mov	r7, r1
  405770:	4606      	mov	r6, r0
  405772:	f7fd fe1d 	bl	4033b0 <__aeabi_d2iz>
  405776:	4680      	mov	r8, r0
  405778:	f7fd fba2 	bl	402ec0 <__aeabi_i2d>
  40577c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405780:	4602      	mov	r2, r0
  405782:	460b      	mov	r3, r1
  405784:	4630      	mov	r0, r6
  405786:	4639      	mov	r1, r7
  405788:	f7fd fa4c 	bl	402c24 <__aeabi_dsub>
  40578c:	f805 8b01 	strb.w	r8, [r5], #1
  405790:	454d      	cmp	r5, r9
  405792:	4606      	mov	r6, r0
  405794:	460f      	mov	r7, r1
  405796:	d1e4      	bne.n	405762 <_dtoa_r+0xc82>
  405798:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40579c:	4b3b      	ldr	r3, [pc, #236]	; (40588c <_dtoa_r+0xdac>)
  40579e:	2200      	movs	r2, #0
  4057a0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4057a4:	f7fd fa40 	bl	402c28 <__adddf3>
  4057a8:	4632      	mov	r2, r6
  4057aa:	463b      	mov	r3, r7
  4057ac:	f001 fcea 	bl	407184 <__aeabi_dcmplt>
  4057b0:	2800      	cmp	r0, #0
  4057b2:	d046      	beq.n	405842 <_dtoa_r+0xd62>
  4057b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4057b6:	9302      	str	r3, [sp, #8]
  4057b8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4057bc:	f7ff bb43 	b.w	404e46 <_dtoa_r+0x366>
  4057c0:	f04f 0800 	mov.w	r8, #0
  4057c4:	4646      	mov	r6, r8
  4057c6:	e6a9      	b.n	40551c <_dtoa_r+0xa3c>
  4057c8:	9b08      	ldr	r3, [sp, #32]
  4057ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4057cc:	1a9d      	subs	r5, r3, r2
  4057ce:	2300      	movs	r3, #0
  4057d0:	f7ff bb71 	b.w	404eb6 <_dtoa_r+0x3d6>
  4057d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4057d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4057d8:	9d08      	ldr	r5, [sp, #32]
  4057da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4057de:	f7ff bb6a 	b.w	404eb6 <_dtoa_r+0x3d6>
  4057e2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4057e6:	f04f 0a02 	mov.w	sl, #2
  4057ea:	e56e      	b.n	4052ca <_dtoa_r+0x7ea>
  4057ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4057ee:	2b00      	cmp	r3, #0
  4057f0:	f43f aeb8 	beq.w	405564 <_dtoa_r+0xa84>
  4057f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4057f6:	2b00      	cmp	r3, #0
  4057f8:	f77f aede 	ble.w	4055b8 <_dtoa_r+0xad8>
  4057fc:	2200      	movs	r2, #0
  4057fe:	4b24      	ldr	r3, [pc, #144]	; (405890 <_dtoa_r+0xdb0>)
  405800:	4638      	mov	r0, r7
  405802:	4641      	mov	r1, r8
  405804:	f7fd fbc2 	bl	402f8c <__aeabi_dmul>
  405808:	4607      	mov	r7, r0
  40580a:	4688      	mov	r8, r1
  40580c:	f10a 0001 	add.w	r0, sl, #1
  405810:	f7fd fb56 	bl	402ec0 <__aeabi_i2d>
  405814:	463a      	mov	r2, r7
  405816:	4643      	mov	r3, r8
  405818:	f7fd fbb8 	bl	402f8c <__aeabi_dmul>
  40581c:	2200      	movs	r2, #0
  40581e:	4b17      	ldr	r3, [pc, #92]	; (40587c <_dtoa_r+0xd9c>)
  405820:	f7fd fa02 	bl	402c28 <__adddf3>
  405824:	9a02      	ldr	r2, [sp, #8]
  405826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405828:	9312      	str	r3, [sp, #72]	; 0x48
  40582a:	3a01      	subs	r2, #1
  40582c:	4605      	mov	r5, r0
  40582e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405832:	9215      	str	r2, [sp, #84]	; 0x54
  405834:	e56a      	b.n	40530c <_dtoa_r+0x82c>
  405836:	2239      	movs	r2, #57	; 0x39
  405838:	46b3      	mov	fp, r6
  40583a:	703a      	strb	r2, [r7, #0]
  40583c:	9e06      	ldr	r6, [sp, #24]
  40583e:	1c7d      	adds	r5, r7, #1
  405840:	e4c0      	b.n	4051c4 <_dtoa_r+0x6e4>
  405842:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  405846:	2000      	movs	r0, #0
  405848:	4910      	ldr	r1, [pc, #64]	; (40588c <_dtoa_r+0xdac>)
  40584a:	f7fd f9eb 	bl	402c24 <__aeabi_dsub>
  40584e:	4632      	mov	r2, r6
  405850:	463b      	mov	r3, r7
  405852:	f001 fcb5 	bl	4071c0 <__aeabi_dcmpgt>
  405856:	b908      	cbnz	r0, 40585c <_dtoa_r+0xd7c>
  405858:	e6ae      	b.n	4055b8 <_dtoa_r+0xad8>
  40585a:	4615      	mov	r5, r2
  40585c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405860:	2b30      	cmp	r3, #48	; 0x30
  405862:	f105 32ff 	add.w	r2, r5, #4294967295
  405866:	d0f8      	beq.n	40585a <_dtoa_r+0xd7a>
  405868:	e5d7      	b.n	40541a <_dtoa_r+0x93a>
  40586a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40586e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405870:	9302      	str	r3, [sp, #8]
  405872:	f7ff bae8 	b.w	404e46 <_dtoa_r+0x366>
  405876:	970c      	str	r7, [sp, #48]	; 0x30
  405878:	f7ff bba5 	b.w	404fc6 <_dtoa_r+0x4e6>
  40587c:	401c0000 	.word	0x401c0000
  405880:	40140000 	.word	0x40140000
  405884:	004075b8 	.word	0x004075b8
  405888:	00407590 	.word	0x00407590
  40588c:	3fe00000 	.word	0x3fe00000
  405890:	40240000 	.word	0x40240000
  405894:	2b39      	cmp	r3, #57	; 0x39
  405896:	f8cd b018 	str.w	fp, [sp, #24]
  40589a:	46d0      	mov	r8, sl
  40589c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4058a0:	469a      	mov	sl, r3
  4058a2:	d0c8      	beq.n	405836 <_dtoa_r+0xd56>
  4058a4:	f1bb 0f00 	cmp.w	fp, #0
  4058a8:	f73f aebf 	bgt.w	40562a <_dtoa_r+0xb4a>
  4058ac:	e6bf      	b.n	40562e <_dtoa_r+0xb4e>
  4058ae:	f47f aebe 	bne.w	40562e <_dtoa_r+0xb4e>
  4058b2:	f01a 0f01 	tst.w	sl, #1
  4058b6:	f43f aeba 	beq.w	40562e <_dtoa_r+0xb4e>
  4058ba:	e6b2      	b.n	405622 <_dtoa_r+0xb42>
  4058bc:	f04f 0800 	mov.w	r8, #0
  4058c0:	4646      	mov	r6, r8
  4058c2:	e5e9      	b.n	405498 <_dtoa_r+0x9b8>
  4058c4:	4631      	mov	r1, r6
  4058c6:	2300      	movs	r3, #0
  4058c8:	220a      	movs	r2, #10
  4058ca:	4620      	mov	r0, r4
  4058cc:	f000 fc36 	bl	40613c <__multadd>
  4058d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4058d2:	2b00      	cmp	r3, #0
  4058d4:	4606      	mov	r6, r0
  4058d6:	dd0a      	ble.n	4058ee <_dtoa_r+0xe0e>
  4058d8:	930a      	str	r3, [sp, #40]	; 0x28
  4058da:	f7ff bbaa 	b.w	405032 <_dtoa_r+0x552>
  4058de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058e0:	2b02      	cmp	r3, #2
  4058e2:	dc23      	bgt.n	40592c <_dtoa_r+0xe4c>
  4058e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4058e6:	e43b      	b.n	405160 <_dtoa_r+0x680>
  4058e8:	f04f 0a02 	mov.w	sl, #2
  4058ec:	e4ed      	b.n	4052ca <_dtoa_r+0x7ea>
  4058ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058f0:	2b02      	cmp	r3, #2
  4058f2:	dc1b      	bgt.n	40592c <_dtoa_r+0xe4c>
  4058f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4058f6:	e7ef      	b.n	4058d8 <_dtoa_r+0xdf8>
  4058f8:	2500      	movs	r5, #0
  4058fa:	6465      	str	r5, [r4, #68]	; 0x44
  4058fc:	4629      	mov	r1, r5
  4058fe:	4620      	mov	r0, r4
  405900:	f000 fbec 	bl	4060dc <_Balloc>
  405904:	f04f 33ff 	mov.w	r3, #4294967295
  405908:	930a      	str	r3, [sp, #40]	; 0x28
  40590a:	930f      	str	r3, [sp, #60]	; 0x3c
  40590c:	2301      	movs	r3, #1
  40590e:	9004      	str	r0, [sp, #16]
  405910:	9525      	str	r5, [sp, #148]	; 0x94
  405912:	6420      	str	r0, [r4, #64]	; 0x40
  405914:	930b      	str	r3, [sp, #44]	; 0x2c
  405916:	f7ff b9dd 	b.w	404cd4 <_dtoa_r+0x1f4>
  40591a:	2501      	movs	r5, #1
  40591c:	f7ff b9a5 	b.w	404c6a <_dtoa_r+0x18a>
  405920:	f43f ab69 	beq.w	404ff6 <_dtoa_r+0x516>
  405924:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405928:	f7ff bbf9 	b.w	40511e <_dtoa_r+0x63e>
  40592c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40592e:	930a      	str	r3, [sp, #40]	; 0x28
  405930:	e5e5      	b.n	4054fe <_dtoa_r+0xa1e>
  405932:	bf00      	nop

00405934 <__libc_fini_array>:
  405934:	b538      	push	{r3, r4, r5, lr}
  405936:	4c0a      	ldr	r4, [pc, #40]	; (405960 <__libc_fini_array+0x2c>)
  405938:	4d0a      	ldr	r5, [pc, #40]	; (405964 <__libc_fini_array+0x30>)
  40593a:	1b64      	subs	r4, r4, r5
  40593c:	10a4      	asrs	r4, r4, #2
  40593e:	d00a      	beq.n	405956 <__libc_fini_array+0x22>
  405940:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405944:	3b01      	subs	r3, #1
  405946:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40594a:	3c01      	subs	r4, #1
  40594c:	f855 3904 	ldr.w	r3, [r5], #-4
  405950:	4798      	blx	r3
  405952:	2c00      	cmp	r4, #0
  405954:	d1f9      	bne.n	40594a <__libc_fini_array+0x16>
  405956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40595a:	f001 bf2b 	b.w	4077b4 <_fini>
  40595e:	bf00      	nop
  405960:	004077c4 	.word	0x004077c4
  405964:	004077c0 	.word	0x004077c0

00405968 <_localeconv_r>:
  405968:	4a04      	ldr	r2, [pc, #16]	; (40597c <_localeconv_r+0x14>)
  40596a:	4b05      	ldr	r3, [pc, #20]	; (405980 <_localeconv_r+0x18>)
  40596c:	6812      	ldr	r2, [r2, #0]
  40596e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  405970:	2800      	cmp	r0, #0
  405972:	bf08      	it	eq
  405974:	4618      	moveq	r0, r3
  405976:	30f0      	adds	r0, #240	; 0xf0
  405978:	4770      	bx	lr
  40597a:	bf00      	nop
  40597c:	20400008 	.word	0x20400008
  405980:	2040084c 	.word	0x2040084c

00405984 <__retarget_lock_acquire_recursive>:
  405984:	4770      	bx	lr
  405986:	bf00      	nop

00405988 <__retarget_lock_release_recursive>:
  405988:	4770      	bx	lr
  40598a:	bf00      	nop

0040598c <_malloc_r>:
  40598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405990:	f101 060b 	add.w	r6, r1, #11
  405994:	2e16      	cmp	r6, #22
  405996:	b083      	sub	sp, #12
  405998:	4605      	mov	r5, r0
  40599a:	f240 809e 	bls.w	405ada <_malloc_r+0x14e>
  40599e:	f036 0607 	bics.w	r6, r6, #7
  4059a2:	f100 80bd 	bmi.w	405b20 <_malloc_r+0x194>
  4059a6:	42b1      	cmp	r1, r6
  4059a8:	f200 80ba 	bhi.w	405b20 <_malloc_r+0x194>
  4059ac:	f000 fb8a 	bl	4060c4 <__malloc_lock>
  4059b0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4059b4:	f0c0 8293 	bcc.w	405ede <_malloc_r+0x552>
  4059b8:	0a73      	lsrs	r3, r6, #9
  4059ba:	f000 80b8 	beq.w	405b2e <_malloc_r+0x1a2>
  4059be:	2b04      	cmp	r3, #4
  4059c0:	f200 8179 	bhi.w	405cb6 <_malloc_r+0x32a>
  4059c4:	09b3      	lsrs	r3, r6, #6
  4059c6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4059ca:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4059ce:	00c3      	lsls	r3, r0, #3
  4059d0:	4fbf      	ldr	r7, [pc, #764]	; (405cd0 <_malloc_r+0x344>)
  4059d2:	443b      	add	r3, r7
  4059d4:	f1a3 0108 	sub.w	r1, r3, #8
  4059d8:	685c      	ldr	r4, [r3, #4]
  4059da:	42a1      	cmp	r1, r4
  4059dc:	d106      	bne.n	4059ec <_malloc_r+0x60>
  4059de:	e00c      	b.n	4059fa <_malloc_r+0x6e>
  4059e0:	2a00      	cmp	r2, #0
  4059e2:	f280 80aa 	bge.w	405b3a <_malloc_r+0x1ae>
  4059e6:	68e4      	ldr	r4, [r4, #12]
  4059e8:	42a1      	cmp	r1, r4
  4059ea:	d006      	beq.n	4059fa <_malloc_r+0x6e>
  4059ec:	6863      	ldr	r3, [r4, #4]
  4059ee:	f023 0303 	bic.w	r3, r3, #3
  4059f2:	1b9a      	subs	r2, r3, r6
  4059f4:	2a0f      	cmp	r2, #15
  4059f6:	ddf3      	ble.n	4059e0 <_malloc_r+0x54>
  4059f8:	4670      	mov	r0, lr
  4059fa:	693c      	ldr	r4, [r7, #16]
  4059fc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405ce4 <_malloc_r+0x358>
  405a00:	4574      	cmp	r4, lr
  405a02:	f000 81ab 	beq.w	405d5c <_malloc_r+0x3d0>
  405a06:	6863      	ldr	r3, [r4, #4]
  405a08:	f023 0303 	bic.w	r3, r3, #3
  405a0c:	1b9a      	subs	r2, r3, r6
  405a0e:	2a0f      	cmp	r2, #15
  405a10:	f300 8190 	bgt.w	405d34 <_malloc_r+0x3a8>
  405a14:	2a00      	cmp	r2, #0
  405a16:	f8c7 e014 	str.w	lr, [r7, #20]
  405a1a:	f8c7 e010 	str.w	lr, [r7, #16]
  405a1e:	f280 809d 	bge.w	405b5c <_malloc_r+0x1d0>
  405a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405a26:	f080 8161 	bcs.w	405cec <_malloc_r+0x360>
  405a2a:	08db      	lsrs	r3, r3, #3
  405a2c:	f103 0c01 	add.w	ip, r3, #1
  405a30:	1099      	asrs	r1, r3, #2
  405a32:	687a      	ldr	r2, [r7, #4]
  405a34:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405a38:	f8c4 8008 	str.w	r8, [r4, #8]
  405a3c:	2301      	movs	r3, #1
  405a3e:	408b      	lsls	r3, r1
  405a40:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405a44:	4313      	orrs	r3, r2
  405a46:	3908      	subs	r1, #8
  405a48:	60e1      	str	r1, [r4, #12]
  405a4a:	607b      	str	r3, [r7, #4]
  405a4c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405a50:	f8c8 400c 	str.w	r4, [r8, #12]
  405a54:	1082      	asrs	r2, r0, #2
  405a56:	2401      	movs	r4, #1
  405a58:	4094      	lsls	r4, r2
  405a5a:	429c      	cmp	r4, r3
  405a5c:	f200 808b 	bhi.w	405b76 <_malloc_r+0x1ea>
  405a60:	421c      	tst	r4, r3
  405a62:	d106      	bne.n	405a72 <_malloc_r+0xe6>
  405a64:	f020 0003 	bic.w	r0, r0, #3
  405a68:	0064      	lsls	r4, r4, #1
  405a6a:	421c      	tst	r4, r3
  405a6c:	f100 0004 	add.w	r0, r0, #4
  405a70:	d0fa      	beq.n	405a68 <_malloc_r+0xdc>
  405a72:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405a76:	46cc      	mov	ip, r9
  405a78:	4680      	mov	r8, r0
  405a7a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405a7e:	459c      	cmp	ip, r3
  405a80:	d107      	bne.n	405a92 <_malloc_r+0x106>
  405a82:	e16d      	b.n	405d60 <_malloc_r+0x3d4>
  405a84:	2a00      	cmp	r2, #0
  405a86:	f280 817b 	bge.w	405d80 <_malloc_r+0x3f4>
  405a8a:	68db      	ldr	r3, [r3, #12]
  405a8c:	459c      	cmp	ip, r3
  405a8e:	f000 8167 	beq.w	405d60 <_malloc_r+0x3d4>
  405a92:	6859      	ldr	r1, [r3, #4]
  405a94:	f021 0103 	bic.w	r1, r1, #3
  405a98:	1b8a      	subs	r2, r1, r6
  405a9a:	2a0f      	cmp	r2, #15
  405a9c:	ddf2      	ble.n	405a84 <_malloc_r+0xf8>
  405a9e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405aa2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405aa6:	9300      	str	r3, [sp, #0]
  405aa8:	199c      	adds	r4, r3, r6
  405aaa:	4628      	mov	r0, r5
  405aac:	f046 0601 	orr.w	r6, r6, #1
  405ab0:	f042 0501 	orr.w	r5, r2, #1
  405ab4:	605e      	str	r6, [r3, #4]
  405ab6:	f8c8 c00c 	str.w	ip, [r8, #12]
  405aba:	f8cc 8008 	str.w	r8, [ip, #8]
  405abe:	617c      	str	r4, [r7, #20]
  405ac0:	613c      	str	r4, [r7, #16]
  405ac2:	f8c4 e00c 	str.w	lr, [r4, #12]
  405ac6:	f8c4 e008 	str.w	lr, [r4, #8]
  405aca:	6065      	str	r5, [r4, #4]
  405acc:	505a      	str	r2, [r3, r1]
  405ace:	f000 faff 	bl	4060d0 <__malloc_unlock>
  405ad2:	9b00      	ldr	r3, [sp, #0]
  405ad4:	f103 0408 	add.w	r4, r3, #8
  405ad8:	e01e      	b.n	405b18 <_malloc_r+0x18c>
  405ada:	2910      	cmp	r1, #16
  405adc:	d820      	bhi.n	405b20 <_malloc_r+0x194>
  405ade:	f000 faf1 	bl	4060c4 <__malloc_lock>
  405ae2:	2610      	movs	r6, #16
  405ae4:	2318      	movs	r3, #24
  405ae6:	2002      	movs	r0, #2
  405ae8:	4f79      	ldr	r7, [pc, #484]	; (405cd0 <_malloc_r+0x344>)
  405aea:	443b      	add	r3, r7
  405aec:	f1a3 0208 	sub.w	r2, r3, #8
  405af0:	685c      	ldr	r4, [r3, #4]
  405af2:	4294      	cmp	r4, r2
  405af4:	f000 813d 	beq.w	405d72 <_malloc_r+0x3e6>
  405af8:	6863      	ldr	r3, [r4, #4]
  405afa:	68e1      	ldr	r1, [r4, #12]
  405afc:	68a6      	ldr	r6, [r4, #8]
  405afe:	f023 0303 	bic.w	r3, r3, #3
  405b02:	4423      	add	r3, r4
  405b04:	4628      	mov	r0, r5
  405b06:	685a      	ldr	r2, [r3, #4]
  405b08:	60f1      	str	r1, [r6, #12]
  405b0a:	f042 0201 	orr.w	r2, r2, #1
  405b0e:	608e      	str	r6, [r1, #8]
  405b10:	605a      	str	r2, [r3, #4]
  405b12:	f000 fadd 	bl	4060d0 <__malloc_unlock>
  405b16:	3408      	adds	r4, #8
  405b18:	4620      	mov	r0, r4
  405b1a:	b003      	add	sp, #12
  405b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b20:	2400      	movs	r4, #0
  405b22:	230c      	movs	r3, #12
  405b24:	4620      	mov	r0, r4
  405b26:	602b      	str	r3, [r5, #0]
  405b28:	b003      	add	sp, #12
  405b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b2e:	2040      	movs	r0, #64	; 0x40
  405b30:	f44f 7300 	mov.w	r3, #512	; 0x200
  405b34:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405b38:	e74a      	b.n	4059d0 <_malloc_r+0x44>
  405b3a:	4423      	add	r3, r4
  405b3c:	68e1      	ldr	r1, [r4, #12]
  405b3e:	685a      	ldr	r2, [r3, #4]
  405b40:	68a6      	ldr	r6, [r4, #8]
  405b42:	f042 0201 	orr.w	r2, r2, #1
  405b46:	60f1      	str	r1, [r6, #12]
  405b48:	4628      	mov	r0, r5
  405b4a:	608e      	str	r6, [r1, #8]
  405b4c:	605a      	str	r2, [r3, #4]
  405b4e:	f000 fabf 	bl	4060d0 <__malloc_unlock>
  405b52:	3408      	adds	r4, #8
  405b54:	4620      	mov	r0, r4
  405b56:	b003      	add	sp, #12
  405b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b5c:	4423      	add	r3, r4
  405b5e:	4628      	mov	r0, r5
  405b60:	685a      	ldr	r2, [r3, #4]
  405b62:	f042 0201 	orr.w	r2, r2, #1
  405b66:	605a      	str	r2, [r3, #4]
  405b68:	f000 fab2 	bl	4060d0 <__malloc_unlock>
  405b6c:	3408      	adds	r4, #8
  405b6e:	4620      	mov	r0, r4
  405b70:	b003      	add	sp, #12
  405b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b76:	68bc      	ldr	r4, [r7, #8]
  405b78:	6863      	ldr	r3, [r4, #4]
  405b7a:	f023 0803 	bic.w	r8, r3, #3
  405b7e:	45b0      	cmp	r8, r6
  405b80:	d304      	bcc.n	405b8c <_malloc_r+0x200>
  405b82:	eba8 0306 	sub.w	r3, r8, r6
  405b86:	2b0f      	cmp	r3, #15
  405b88:	f300 8085 	bgt.w	405c96 <_malloc_r+0x30a>
  405b8c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405ce8 <_malloc_r+0x35c>
  405b90:	4b50      	ldr	r3, [pc, #320]	; (405cd4 <_malloc_r+0x348>)
  405b92:	f8d9 2000 	ldr.w	r2, [r9]
  405b96:	681b      	ldr	r3, [r3, #0]
  405b98:	3201      	adds	r2, #1
  405b9a:	4433      	add	r3, r6
  405b9c:	eb04 0a08 	add.w	sl, r4, r8
  405ba0:	f000 8155 	beq.w	405e4e <_malloc_r+0x4c2>
  405ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405ba8:	330f      	adds	r3, #15
  405baa:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405bae:	f02b 0b0f 	bic.w	fp, fp, #15
  405bb2:	4659      	mov	r1, fp
  405bb4:	4628      	mov	r0, r5
  405bb6:	f000 fd8b 	bl	4066d0 <_sbrk_r>
  405bba:	1c41      	adds	r1, r0, #1
  405bbc:	4602      	mov	r2, r0
  405bbe:	f000 80fc 	beq.w	405dba <_malloc_r+0x42e>
  405bc2:	4582      	cmp	sl, r0
  405bc4:	f200 80f7 	bhi.w	405db6 <_malloc_r+0x42a>
  405bc8:	4b43      	ldr	r3, [pc, #268]	; (405cd8 <_malloc_r+0x34c>)
  405bca:	6819      	ldr	r1, [r3, #0]
  405bcc:	4459      	add	r1, fp
  405bce:	6019      	str	r1, [r3, #0]
  405bd0:	f000 814d 	beq.w	405e6e <_malloc_r+0x4e2>
  405bd4:	f8d9 0000 	ldr.w	r0, [r9]
  405bd8:	3001      	adds	r0, #1
  405bda:	bf1b      	ittet	ne
  405bdc:	eba2 0a0a 	subne.w	sl, r2, sl
  405be0:	4451      	addne	r1, sl
  405be2:	f8c9 2000 	streq.w	r2, [r9]
  405be6:	6019      	strne	r1, [r3, #0]
  405be8:	f012 0107 	ands.w	r1, r2, #7
  405bec:	f000 8115 	beq.w	405e1a <_malloc_r+0x48e>
  405bf0:	f1c1 0008 	rsb	r0, r1, #8
  405bf4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405bf8:	4402      	add	r2, r0
  405bfa:	3108      	adds	r1, #8
  405bfc:	eb02 090b 	add.w	r9, r2, fp
  405c00:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405c04:	eba1 0909 	sub.w	r9, r1, r9
  405c08:	4649      	mov	r1, r9
  405c0a:	4628      	mov	r0, r5
  405c0c:	9301      	str	r3, [sp, #4]
  405c0e:	9200      	str	r2, [sp, #0]
  405c10:	f000 fd5e 	bl	4066d0 <_sbrk_r>
  405c14:	1c43      	adds	r3, r0, #1
  405c16:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405c1a:	f000 8143 	beq.w	405ea4 <_malloc_r+0x518>
  405c1e:	1a80      	subs	r0, r0, r2
  405c20:	4448      	add	r0, r9
  405c22:	f040 0001 	orr.w	r0, r0, #1
  405c26:	6819      	ldr	r1, [r3, #0]
  405c28:	60ba      	str	r2, [r7, #8]
  405c2a:	4449      	add	r1, r9
  405c2c:	42bc      	cmp	r4, r7
  405c2e:	6050      	str	r0, [r2, #4]
  405c30:	6019      	str	r1, [r3, #0]
  405c32:	d017      	beq.n	405c64 <_malloc_r+0x2d8>
  405c34:	f1b8 0f0f 	cmp.w	r8, #15
  405c38:	f240 80fb 	bls.w	405e32 <_malloc_r+0x4a6>
  405c3c:	6860      	ldr	r0, [r4, #4]
  405c3e:	f1a8 020c 	sub.w	r2, r8, #12
  405c42:	f022 0207 	bic.w	r2, r2, #7
  405c46:	eb04 0e02 	add.w	lr, r4, r2
  405c4a:	f000 0001 	and.w	r0, r0, #1
  405c4e:	f04f 0c05 	mov.w	ip, #5
  405c52:	4310      	orrs	r0, r2
  405c54:	2a0f      	cmp	r2, #15
  405c56:	6060      	str	r0, [r4, #4]
  405c58:	f8ce c004 	str.w	ip, [lr, #4]
  405c5c:	f8ce c008 	str.w	ip, [lr, #8]
  405c60:	f200 8117 	bhi.w	405e92 <_malloc_r+0x506>
  405c64:	4b1d      	ldr	r3, [pc, #116]	; (405cdc <_malloc_r+0x350>)
  405c66:	68bc      	ldr	r4, [r7, #8]
  405c68:	681a      	ldr	r2, [r3, #0]
  405c6a:	4291      	cmp	r1, r2
  405c6c:	bf88      	it	hi
  405c6e:	6019      	strhi	r1, [r3, #0]
  405c70:	4b1b      	ldr	r3, [pc, #108]	; (405ce0 <_malloc_r+0x354>)
  405c72:	681a      	ldr	r2, [r3, #0]
  405c74:	4291      	cmp	r1, r2
  405c76:	6862      	ldr	r2, [r4, #4]
  405c78:	bf88      	it	hi
  405c7a:	6019      	strhi	r1, [r3, #0]
  405c7c:	f022 0203 	bic.w	r2, r2, #3
  405c80:	4296      	cmp	r6, r2
  405c82:	eba2 0306 	sub.w	r3, r2, r6
  405c86:	d801      	bhi.n	405c8c <_malloc_r+0x300>
  405c88:	2b0f      	cmp	r3, #15
  405c8a:	dc04      	bgt.n	405c96 <_malloc_r+0x30a>
  405c8c:	4628      	mov	r0, r5
  405c8e:	f000 fa1f 	bl	4060d0 <__malloc_unlock>
  405c92:	2400      	movs	r4, #0
  405c94:	e740      	b.n	405b18 <_malloc_r+0x18c>
  405c96:	19a2      	adds	r2, r4, r6
  405c98:	f043 0301 	orr.w	r3, r3, #1
  405c9c:	f046 0601 	orr.w	r6, r6, #1
  405ca0:	6066      	str	r6, [r4, #4]
  405ca2:	4628      	mov	r0, r5
  405ca4:	60ba      	str	r2, [r7, #8]
  405ca6:	6053      	str	r3, [r2, #4]
  405ca8:	f000 fa12 	bl	4060d0 <__malloc_unlock>
  405cac:	3408      	adds	r4, #8
  405cae:	4620      	mov	r0, r4
  405cb0:	b003      	add	sp, #12
  405cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405cb6:	2b14      	cmp	r3, #20
  405cb8:	d971      	bls.n	405d9e <_malloc_r+0x412>
  405cba:	2b54      	cmp	r3, #84	; 0x54
  405cbc:	f200 80a3 	bhi.w	405e06 <_malloc_r+0x47a>
  405cc0:	0b33      	lsrs	r3, r6, #12
  405cc2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405cc6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  405cca:	00c3      	lsls	r3, r0, #3
  405ccc:	e680      	b.n	4059d0 <_malloc_r+0x44>
  405cce:	bf00      	nop
  405cd0:	2040043c 	.word	0x2040043c
  405cd4:	20400e3c 	.word	0x20400e3c
  405cd8:	20400e0c 	.word	0x20400e0c
  405cdc:	20400e34 	.word	0x20400e34
  405ce0:	20400e38 	.word	0x20400e38
  405ce4:	20400444 	.word	0x20400444
  405ce8:	20400844 	.word	0x20400844
  405cec:	0a5a      	lsrs	r2, r3, #9
  405cee:	2a04      	cmp	r2, #4
  405cf0:	d95b      	bls.n	405daa <_malloc_r+0x41e>
  405cf2:	2a14      	cmp	r2, #20
  405cf4:	f200 80ae 	bhi.w	405e54 <_malloc_r+0x4c8>
  405cf8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405cfc:	00c9      	lsls	r1, r1, #3
  405cfe:	325b      	adds	r2, #91	; 0x5b
  405d00:	eb07 0c01 	add.w	ip, r7, r1
  405d04:	5879      	ldr	r1, [r7, r1]
  405d06:	f1ac 0c08 	sub.w	ip, ip, #8
  405d0a:	458c      	cmp	ip, r1
  405d0c:	f000 8088 	beq.w	405e20 <_malloc_r+0x494>
  405d10:	684a      	ldr	r2, [r1, #4]
  405d12:	f022 0203 	bic.w	r2, r2, #3
  405d16:	4293      	cmp	r3, r2
  405d18:	d273      	bcs.n	405e02 <_malloc_r+0x476>
  405d1a:	6889      	ldr	r1, [r1, #8]
  405d1c:	458c      	cmp	ip, r1
  405d1e:	d1f7      	bne.n	405d10 <_malloc_r+0x384>
  405d20:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405d24:	687b      	ldr	r3, [r7, #4]
  405d26:	60e2      	str	r2, [r4, #12]
  405d28:	f8c4 c008 	str.w	ip, [r4, #8]
  405d2c:	6094      	str	r4, [r2, #8]
  405d2e:	f8cc 400c 	str.w	r4, [ip, #12]
  405d32:	e68f      	b.n	405a54 <_malloc_r+0xc8>
  405d34:	19a1      	adds	r1, r4, r6
  405d36:	f046 0c01 	orr.w	ip, r6, #1
  405d3a:	f042 0601 	orr.w	r6, r2, #1
  405d3e:	f8c4 c004 	str.w	ip, [r4, #4]
  405d42:	4628      	mov	r0, r5
  405d44:	6179      	str	r1, [r7, #20]
  405d46:	6139      	str	r1, [r7, #16]
  405d48:	f8c1 e00c 	str.w	lr, [r1, #12]
  405d4c:	f8c1 e008 	str.w	lr, [r1, #8]
  405d50:	604e      	str	r6, [r1, #4]
  405d52:	50e2      	str	r2, [r4, r3]
  405d54:	f000 f9bc 	bl	4060d0 <__malloc_unlock>
  405d58:	3408      	adds	r4, #8
  405d5a:	e6dd      	b.n	405b18 <_malloc_r+0x18c>
  405d5c:	687b      	ldr	r3, [r7, #4]
  405d5e:	e679      	b.n	405a54 <_malloc_r+0xc8>
  405d60:	f108 0801 	add.w	r8, r8, #1
  405d64:	f018 0f03 	tst.w	r8, #3
  405d68:	f10c 0c08 	add.w	ip, ip, #8
  405d6c:	f47f ae85 	bne.w	405a7a <_malloc_r+0xee>
  405d70:	e02d      	b.n	405dce <_malloc_r+0x442>
  405d72:	68dc      	ldr	r4, [r3, #12]
  405d74:	42a3      	cmp	r3, r4
  405d76:	bf08      	it	eq
  405d78:	3002      	addeq	r0, #2
  405d7a:	f43f ae3e 	beq.w	4059fa <_malloc_r+0x6e>
  405d7e:	e6bb      	b.n	405af8 <_malloc_r+0x16c>
  405d80:	4419      	add	r1, r3
  405d82:	461c      	mov	r4, r3
  405d84:	684a      	ldr	r2, [r1, #4]
  405d86:	68db      	ldr	r3, [r3, #12]
  405d88:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405d8c:	f042 0201 	orr.w	r2, r2, #1
  405d90:	604a      	str	r2, [r1, #4]
  405d92:	4628      	mov	r0, r5
  405d94:	60f3      	str	r3, [r6, #12]
  405d96:	609e      	str	r6, [r3, #8]
  405d98:	f000 f99a 	bl	4060d0 <__malloc_unlock>
  405d9c:	e6bc      	b.n	405b18 <_malloc_r+0x18c>
  405d9e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405da2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405da6:	00c3      	lsls	r3, r0, #3
  405da8:	e612      	b.n	4059d0 <_malloc_r+0x44>
  405daa:	099a      	lsrs	r2, r3, #6
  405dac:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405db0:	00c9      	lsls	r1, r1, #3
  405db2:	3238      	adds	r2, #56	; 0x38
  405db4:	e7a4      	b.n	405d00 <_malloc_r+0x374>
  405db6:	42bc      	cmp	r4, r7
  405db8:	d054      	beq.n	405e64 <_malloc_r+0x4d8>
  405dba:	68bc      	ldr	r4, [r7, #8]
  405dbc:	6862      	ldr	r2, [r4, #4]
  405dbe:	f022 0203 	bic.w	r2, r2, #3
  405dc2:	e75d      	b.n	405c80 <_malloc_r+0x2f4>
  405dc4:	f859 3908 	ldr.w	r3, [r9], #-8
  405dc8:	4599      	cmp	r9, r3
  405dca:	f040 8086 	bne.w	405eda <_malloc_r+0x54e>
  405dce:	f010 0f03 	tst.w	r0, #3
  405dd2:	f100 30ff 	add.w	r0, r0, #4294967295
  405dd6:	d1f5      	bne.n	405dc4 <_malloc_r+0x438>
  405dd8:	687b      	ldr	r3, [r7, #4]
  405dda:	ea23 0304 	bic.w	r3, r3, r4
  405dde:	607b      	str	r3, [r7, #4]
  405de0:	0064      	lsls	r4, r4, #1
  405de2:	429c      	cmp	r4, r3
  405de4:	f63f aec7 	bhi.w	405b76 <_malloc_r+0x1ea>
  405de8:	2c00      	cmp	r4, #0
  405dea:	f43f aec4 	beq.w	405b76 <_malloc_r+0x1ea>
  405dee:	421c      	tst	r4, r3
  405df0:	4640      	mov	r0, r8
  405df2:	f47f ae3e 	bne.w	405a72 <_malloc_r+0xe6>
  405df6:	0064      	lsls	r4, r4, #1
  405df8:	421c      	tst	r4, r3
  405dfa:	f100 0004 	add.w	r0, r0, #4
  405dfe:	d0fa      	beq.n	405df6 <_malloc_r+0x46a>
  405e00:	e637      	b.n	405a72 <_malloc_r+0xe6>
  405e02:	468c      	mov	ip, r1
  405e04:	e78c      	b.n	405d20 <_malloc_r+0x394>
  405e06:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405e0a:	d815      	bhi.n	405e38 <_malloc_r+0x4ac>
  405e0c:	0bf3      	lsrs	r3, r6, #15
  405e0e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405e12:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405e16:	00c3      	lsls	r3, r0, #3
  405e18:	e5da      	b.n	4059d0 <_malloc_r+0x44>
  405e1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405e1e:	e6ed      	b.n	405bfc <_malloc_r+0x270>
  405e20:	687b      	ldr	r3, [r7, #4]
  405e22:	1092      	asrs	r2, r2, #2
  405e24:	2101      	movs	r1, #1
  405e26:	fa01 f202 	lsl.w	r2, r1, r2
  405e2a:	4313      	orrs	r3, r2
  405e2c:	607b      	str	r3, [r7, #4]
  405e2e:	4662      	mov	r2, ip
  405e30:	e779      	b.n	405d26 <_malloc_r+0x39a>
  405e32:	2301      	movs	r3, #1
  405e34:	6053      	str	r3, [r2, #4]
  405e36:	e729      	b.n	405c8c <_malloc_r+0x300>
  405e38:	f240 5254 	movw	r2, #1364	; 0x554
  405e3c:	4293      	cmp	r3, r2
  405e3e:	d822      	bhi.n	405e86 <_malloc_r+0x4fa>
  405e40:	0cb3      	lsrs	r3, r6, #18
  405e42:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  405e46:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  405e4a:	00c3      	lsls	r3, r0, #3
  405e4c:	e5c0      	b.n	4059d0 <_malloc_r+0x44>
  405e4e:	f103 0b10 	add.w	fp, r3, #16
  405e52:	e6ae      	b.n	405bb2 <_malloc_r+0x226>
  405e54:	2a54      	cmp	r2, #84	; 0x54
  405e56:	d829      	bhi.n	405eac <_malloc_r+0x520>
  405e58:	0b1a      	lsrs	r2, r3, #12
  405e5a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405e5e:	00c9      	lsls	r1, r1, #3
  405e60:	326e      	adds	r2, #110	; 0x6e
  405e62:	e74d      	b.n	405d00 <_malloc_r+0x374>
  405e64:	4b20      	ldr	r3, [pc, #128]	; (405ee8 <_malloc_r+0x55c>)
  405e66:	6819      	ldr	r1, [r3, #0]
  405e68:	4459      	add	r1, fp
  405e6a:	6019      	str	r1, [r3, #0]
  405e6c:	e6b2      	b.n	405bd4 <_malloc_r+0x248>
  405e6e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405e72:	2800      	cmp	r0, #0
  405e74:	f47f aeae 	bne.w	405bd4 <_malloc_r+0x248>
  405e78:	eb08 030b 	add.w	r3, r8, fp
  405e7c:	68ba      	ldr	r2, [r7, #8]
  405e7e:	f043 0301 	orr.w	r3, r3, #1
  405e82:	6053      	str	r3, [r2, #4]
  405e84:	e6ee      	b.n	405c64 <_malloc_r+0x2d8>
  405e86:	207f      	movs	r0, #127	; 0x7f
  405e88:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405e8c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405e90:	e59e      	b.n	4059d0 <_malloc_r+0x44>
  405e92:	f104 0108 	add.w	r1, r4, #8
  405e96:	4628      	mov	r0, r5
  405e98:	9300      	str	r3, [sp, #0]
  405e9a:	f000 fdff 	bl	406a9c <_free_r>
  405e9e:	9b00      	ldr	r3, [sp, #0]
  405ea0:	6819      	ldr	r1, [r3, #0]
  405ea2:	e6df      	b.n	405c64 <_malloc_r+0x2d8>
  405ea4:	2001      	movs	r0, #1
  405ea6:	f04f 0900 	mov.w	r9, #0
  405eaa:	e6bc      	b.n	405c26 <_malloc_r+0x29a>
  405eac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405eb0:	d805      	bhi.n	405ebe <_malloc_r+0x532>
  405eb2:	0bda      	lsrs	r2, r3, #15
  405eb4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405eb8:	00c9      	lsls	r1, r1, #3
  405eba:	3277      	adds	r2, #119	; 0x77
  405ebc:	e720      	b.n	405d00 <_malloc_r+0x374>
  405ebe:	f240 5154 	movw	r1, #1364	; 0x554
  405ec2:	428a      	cmp	r2, r1
  405ec4:	d805      	bhi.n	405ed2 <_malloc_r+0x546>
  405ec6:	0c9a      	lsrs	r2, r3, #18
  405ec8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405ecc:	00c9      	lsls	r1, r1, #3
  405ece:	327c      	adds	r2, #124	; 0x7c
  405ed0:	e716      	b.n	405d00 <_malloc_r+0x374>
  405ed2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405ed6:	227e      	movs	r2, #126	; 0x7e
  405ed8:	e712      	b.n	405d00 <_malloc_r+0x374>
  405eda:	687b      	ldr	r3, [r7, #4]
  405edc:	e780      	b.n	405de0 <_malloc_r+0x454>
  405ede:	08f0      	lsrs	r0, r6, #3
  405ee0:	f106 0308 	add.w	r3, r6, #8
  405ee4:	e600      	b.n	405ae8 <_malloc_r+0x15c>
  405ee6:	bf00      	nop
  405ee8:	20400e0c 	.word	0x20400e0c
  405eec:	00000000 	.word	0x00000000

00405ef0 <memchr>:
  405ef0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405ef4:	2a10      	cmp	r2, #16
  405ef6:	db2b      	blt.n	405f50 <memchr+0x60>
  405ef8:	f010 0f07 	tst.w	r0, #7
  405efc:	d008      	beq.n	405f10 <memchr+0x20>
  405efe:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f02:	3a01      	subs	r2, #1
  405f04:	428b      	cmp	r3, r1
  405f06:	d02d      	beq.n	405f64 <memchr+0x74>
  405f08:	f010 0f07 	tst.w	r0, #7
  405f0c:	b342      	cbz	r2, 405f60 <memchr+0x70>
  405f0e:	d1f6      	bne.n	405efe <memchr+0xe>
  405f10:	b4f0      	push	{r4, r5, r6, r7}
  405f12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405f16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405f1a:	f022 0407 	bic.w	r4, r2, #7
  405f1e:	f07f 0700 	mvns.w	r7, #0
  405f22:	2300      	movs	r3, #0
  405f24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405f28:	3c08      	subs	r4, #8
  405f2a:	ea85 0501 	eor.w	r5, r5, r1
  405f2e:	ea86 0601 	eor.w	r6, r6, r1
  405f32:	fa85 f547 	uadd8	r5, r5, r7
  405f36:	faa3 f587 	sel	r5, r3, r7
  405f3a:	fa86 f647 	uadd8	r6, r6, r7
  405f3e:	faa5 f687 	sel	r6, r5, r7
  405f42:	b98e      	cbnz	r6, 405f68 <memchr+0x78>
  405f44:	d1ee      	bne.n	405f24 <memchr+0x34>
  405f46:	bcf0      	pop	{r4, r5, r6, r7}
  405f48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f4c:	f002 0207 	and.w	r2, r2, #7
  405f50:	b132      	cbz	r2, 405f60 <memchr+0x70>
  405f52:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f56:	3a01      	subs	r2, #1
  405f58:	ea83 0301 	eor.w	r3, r3, r1
  405f5c:	b113      	cbz	r3, 405f64 <memchr+0x74>
  405f5e:	d1f8      	bne.n	405f52 <memchr+0x62>
  405f60:	2000      	movs	r0, #0
  405f62:	4770      	bx	lr
  405f64:	3801      	subs	r0, #1
  405f66:	4770      	bx	lr
  405f68:	2d00      	cmp	r5, #0
  405f6a:	bf06      	itte	eq
  405f6c:	4635      	moveq	r5, r6
  405f6e:	3803      	subeq	r0, #3
  405f70:	3807      	subne	r0, #7
  405f72:	f015 0f01 	tst.w	r5, #1
  405f76:	d107      	bne.n	405f88 <memchr+0x98>
  405f78:	3001      	adds	r0, #1
  405f7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405f7e:	bf02      	ittt	eq
  405f80:	3001      	addeq	r0, #1
  405f82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405f86:	3001      	addeq	r0, #1
  405f88:	bcf0      	pop	{r4, r5, r6, r7}
  405f8a:	3801      	subs	r0, #1
  405f8c:	4770      	bx	lr
  405f8e:	bf00      	nop

00405f90 <memcpy>:
  405f90:	4684      	mov	ip, r0
  405f92:	ea41 0300 	orr.w	r3, r1, r0
  405f96:	f013 0303 	ands.w	r3, r3, #3
  405f9a:	d16d      	bne.n	406078 <memcpy+0xe8>
  405f9c:	3a40      	subs	r2, #64	; 0x40
  405f9e:	d341      	bcc.n	406024 <memcpy+0x94>
  405fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  405fa4:	f840 3b04 	str.w	r3, [r0], #4
  405fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  405fac:	f840 3b04 	str.w	r3, [r0], #4
  405fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  405fb4:	f840 3b04 	str.w	r3, [r0], #4
  405fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  405fbc:	f840 3b04 	str.w	r3, [r0], #4
  405fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  405fc4:	f840 3b04 	str.w	r3, [r0], #4
  405fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  405fcc:	f840 3b04 	str.w	r3, [r0], #4
  405fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  405fd4:	f840 3b04 	str.w	r3, [r0], #4
  405fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  405fdc:	f840 3b04 	str.w	r3, [r0], #4
  405fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  405fe4:	f840 3b04 	str.w	r3, [r0], #4
  405fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  405fec:	f840 3b04 	str.w	r3, [r0], #4
  405ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ff4:	f840 3b04 	str.w	r3, [r0], #4
  405ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ffc:	f840 3b04 	str.w	r3, [r0], #4
  406000:	f851 3b04 	ldr.w	r3, [r1], #4
  406004:	f840 3b04 	str.w	r3, [r0], #4
  406008:	f851 3b04 	ldr.w	r3, [r1], #4
  40600c:	f840 3b04 	str.w	r3, [r0], #4
  406010:	f851 3b04 	ldr.w	r3, [r1], #4
  406014:	f840 3b04 	str.w	r3, [r0], #4
  406018:	f851 3b04 	ldr.w	r3, [r1], #4
  40601c:	f840 3b04 	str.w	r3, [r0], #4
  406020:	3a40      	subs	r2, #64	; 0x40
  406022:	d2bd      	bcs.n	405fa0 <memcpy+0x10>
  406024:	3230      	adds	r2, #48	; 0x30
  406026:	d311      	bcc.n	40604c <memcpy+0xbc>
  406028:	f851 3b04 	ldr.w	r3, [r1], #4
  40602c:	f840 3b04 	str.w	r3, [r0], #4
  406030:	f851 3b04 	ldr.w	r3, [r1], #4
  406034:	f840 3b04 	str.w	r3, [r0], #4
  406038:	f851 3b04 	ldr.w	r3, [r1], #4
  40603c:	f840 3b04 	str.w	r3, [r0], #4
  406040:	f851 3b04 	ldr.w	r3, [r1], #4
  406044:	f840 3b04 	str.w	r3, [r0], #4
  406048:	3a10      	subs	r2, #16
  40604a:	d2ed      	bcs.n	406028 <memcpy+0x98>
  40604c:	320c      	adds	r2, #12
  40604e:	d305      	bcc.n	40605c <memcpy+0xcc>
  406050:	f851 3b04 	ldr.w	r3, [r1], #4
  406054:	f840 3b04 	str.w	r3, [r0], #4
  406058:	3a04      	subs	r2, #4
  40605a:	d2f9      	bcs.n	406050 <memcpy+0xc0>
  40605c:	3204      	adds	r2, #4
  40605e:	d008      	beq.n	406072 <memcpy+0xe2>
  406060:	07d2      	lsls	r2, r2, #31
  406062:	bf1c      	itt	ne
  406064:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406068:	f800 3b01 	strbne.w	r3, [r0], #1
  40606c:	d301      	bcc.n	406072 <memcpy+0xe2>
  40606e:	880b      	ldrh	r3, [r1, #0]
  406070:	8003      	strh	r3, [r0, #0]
  406072:	4660      	mov	r0, ip
  406074:	4770      	bx	lr
  406076:	bf00      	nop
  406078:	2a08      	cmp	r2, #8
  40607a:	d313      	bcc.n	4060a4 <memcpy+0x114>
  40607c:	078b      	lsls	r3, r1, #30
  40607e:	d08d      	beq.n	405f9c <memcpy+0xc>
  406080:	f010 0303 	ands.w	r3, r0, #3
  406084:	d08a      	beq.n	405f9c <memcpy+0xc>
  406086:	f1c3 0304 	rsb	r3, r3, #4
  40608a:	1ad2      	subs	r2, r2, r3
  40608c:	07db      	lsls	r3, r3, #31
  40608e:	bf1c      	itt	ne
  406090:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406094:	f800 3b01 	strbne.w	r3, [r0], #1
  406098:	d380      	bcc.n	405f9c <memcpy+0xc>
  40609a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40609e:	f820 3b02 	strh.w	r3, [r0], #2
  4060a2:	e77b      	b.n	405f9c <memcpy+0xc>
  4060a4:	3a04      	subs	r2, #4
  4060a6:	d3d9      	bcc.n	40605c <memcpy+0xcc>
  4060a8:	3a01      	subs	r2, #1
  4060aa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4060ae:	f800 3b01 	strb.w	r3, [r0], #1
  4060b2:	d2f9      	bcs.n	4060a8 <memcpy+0x118>
  4060b4:	780b      	ldrb	r3, [r1, #0]
  4060b6:	7003      	strb	r3, [r0, #0]
  4060b8:	784b      	ldrb	r3, [r1, #1]
  4060ba:	7043      	strb	r3, [r0, #1]
  4060bc:	788b      	ldrb	r3, [r1, #2]
  4060be:	7083      	strb	r3, [r0, #2]
  4060c0:	4660      	mov	r0, ip
  4060c2:	4770      	bx	lr

004060c4 <__malloc_lock>:
  4060c4:	4801      	ldr	r0, [pc, #4]	; (4060cc <__malloc_lock+0x8>)
  4060c6:	f7ff bc5d 	b.w	405984 <__retarget_lock_acquire_recursive>
  4060ca:	bf00      	nop
  4060cc:	20400e78 	.word	0x20400e78

004060d0 <__malloc_unlock>:
  4060d0:	4801      	ldr	r0, [pc, #4]	; (4060d8 <__malloc_unlock+0x8>)
  4060d2:	f7ff bc59 	b.w	405988 <__retarget_lock_release_recursive>
  4060d6:	bf00      	nop
  4060d8:	20400e78 	.word	0x20400e78

004060dc <_Balloc>:
  4060dc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4060de:	b570      	push	{r4, r5, r6, lr}
  4060e0:	4605      	mov	r5, r0
  4060e2:	460c      	mov	r4, r1
  4060e4:	b14b      	cbz	r3, 4060fa <_Balloc+0x1e>
  4060e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4060ea:	b180      	cbz	r0, 40610e <_Balloc+0x32>
  4060ec:	6802      	ldr	r2, [r0, #0]
  4060ee:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4060f2:	2300      	movs	r3, #0
  4060f4:	6103      	str	r3, [r0, #16]
  4060f6:	60c3      	str	r3, [r0, #12]
  4060f8:	bd70      	pop	{r4, r5, r6, pc}
  4060fa:	2221      	movs	r2, #33	; 0x21
  4060fc:	2104      	movs	r1, #4
  4060fe:	f000 fc4d 	bl	40699c <_calloc_r>
  406102:	64e8      	str	r0, [r5, #76]	; 0x4c
  406104:	4603      	mov	r3, r0
  406106:	2800      	cmp	r0, #0
  406108:	d1ed      	bne.n	4060e6 <_Balloc+0xa>
  40610a:	2000      	movs	r0, #0
  40610c:	bd70      	pop	{r4, r5, r6, pc}
  40610e:	2101      	movs	r1, #1
  406110:	fa01 f604 	lsl.w	r6, r1, r4
  406114:	1d72      	adds	r2, r6, #5
  406116:	4628      	mov	r0, r5
  406118:	0092      	lsls	r2, r2, #2
  40611a:	f000 fc3f 	bl	40699c <_calloc_r>
  40611e:	2800      	cmp	r0, #0
  406120:	d0f3      	beq.n	40610a <_Balloc+0x2e>
  406122:	6044      	str	r4, [r0, #4]
  406124:	6086      	str	r6, [r0, #8]
  406126:	e7e4      	b.n	4060f2 <_Balloc+0x16>

00406128 <_Bfree>:
  406128:	b131      	cbz	r1, 406138 <_Bfree+0x10>
  40612a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40612c:	684a      	ldr	r2, [r1, #4]
  40612e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406132:	6008      	str	r0, [r1, #0]
  406134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406138:	4770      	bx	lr
  40613a:	bf00      	nop

0040613c <__multadd>:
  40613c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40613e:	690c      	ldr	r4, [r1, #16]
  406140:	b083      	sub	sp, #12
  406142:	460d      	mov	r5, r1
  406144:	4606      	mov	r6, r0
  406146:	f101 0e14 	add.w	lr, r1, #20
  40614a:	2700      	movs	r7, #0
  40614c:	f8de 0000 	ldr.w	r0, [lr]
  406150:	b281      	uxth	r1, r0
  406152:	fb02 3301 	mla	r3, r2, r1, r3
  406156:	0c01      	lsrs	r1, r0, #16
  406158:	0c18      	lsrs	r0, r3, #16
  40615a:	fb02 0101 	mla	r1, r2, r1, r0
  40615e:	b29b      	uxth	r3, r3
  406160:	3701      	adds	r7, #1
  406162:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406166:	42bc      	cmp	r4, r7
  406168:	f84e 3b04 	str.w	r3, [lr], #4
  40616c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406170:	dcec      	bgt.n	40614c <__multadd+0x10>
  406172:	b13b      	cbz	r3, 406184 <__multadd+0x48>
  406174:	68aa      	ldr	r2, [r5, #8]
  406176:	4294      	cmp	r4, r2
  406178:	da07      	bge.n	40618a <__multadd+0x4e>
  40617a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40617e:	3401      	adds	r4, #1
  406180:	6153      	str	r3, [r2, #20]
  406182:	612c      	str	r4, [r5, #16]
  406184:	4628      	mov	r0, r5
  406186:	b003      	add	sp, #12
  406188:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40618a:	6869      	ldr	r1, [r5, #4]
  40618c:	9301      	str	r3, [sp, #4]
  40618e:	3101      	adds	r1, #1
  406190:	4630      	mov	r0, r6
  406192:	f7ff ffa3 	bl	4060dc <_Balloc>
  406196:	692a      	ldr	r2, [r5, #16]
  406198:	3202      	adds	r2, #2
  40619a:	f105 010c 	add.w	r1, r5, #12
  40619e:	4607      	mov	r7, r0
  4061a0:	0092      	lsls	r2, r2, #2
  4061a2:	300c      	adds	r0, #12
  4061a4:	f7ff fef4 	bl	405f90 <memcpy>
  4061a8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4061aa:	6869      	ldr	r1, [r5, #4]
  4061ac:	9b01      	ldr	r3, [sp, #4]
  4061ae:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4061b2:	6028      	str	r0, [r5, #0]
  4061b4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4061b8:	463d      	mov	r5, r7
  4061ba:	e7de      	b.n	40617a <__multadd+0x3e>

004061bc <__hi0bits>:
  4061bc:	0c02      	lsrs	r2, r0, #16
  4061be:	0412      	lsls	r2, r2, #16
  4061c0:	4603      	mov	r3, r0
  4061c2:	b9b2      	cbnz	r2, 4061f2 <__hi0bits+0x36>
  4061c4:	0403      	lsls	r3, r0, #16
  4061c6:	2010      	movs	r0, #16
  4061c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4061cc:	bf04      	itt	eq
  4061ce:	021b      	lsleq	r3, r3, #8
  4061d0:	3008      	addeq	r0, #8
  4061d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4061d6:	bf04      	itt	eq
  4061d8:	011b      	lsleq	r3, r3, #4
  4061da:	3004      	addeq	r0, #4
  4061dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4061e0:	bf04      	itt	eq
  4061e2:	009b      	lsleq	r3, r3, #2
  4061e4:	3002      	addeq	r0, #2
  4061e6:	2b00      	cmp	r3, #0
  4061e8:	db02      	blt.n	4061f0 <__hi0bits+0x34>
  4061ea:	005b      	lsls	r3, r3, #1
  4061ec:	d403      	bmi.n	4061f6 <__hi0bits+0x3a>
  4061ee:	2020      	movs	r0, #32
  4061f0:	4770      	bx	lr
  4061f2:	2000      	movs	r0, #0
  4061f4:	e7e8      	b.n	4061c8 <__hi0bits+0xc>
  4061f6:	3001      	adds	r0, #1
  4061f8:	4770      	bx	lr
  4061fa:	bf00      	nop

004061fc <__lo0bits>:
  4061fc:	6803      	ldr	r3, [r0, #0]
  4061fe:	f013 0207 	ands.w	r2, r3, #7
  406202:	4601      	mov	r1, r0
  406204:	d007      	beq.n	406216 <__lo0bits+0x1a>
  406206:	07da      	lsls	r2, r3, #31
  406208:	d421      	bmi.n	40624e <__lo0bits+0x52>
  40620a:	0798      	lsls	r0, r3, #30
  40620c:	d421      	bmi.n	406252 <__lo0bits+0x56>
  40620e:	089b      	lsrs	r3, r3, #2
  406210:	600b      	str	r3, [r1, #0]
  406212:	2002      	movs	r0, #2
  406214:	4770      	bx	lr
  406216:	b298      	uxth	r0, r3
  406218:	b198      	cbz	r0, 406242 <__lo0bits+0x46>
  40621a:	4610      	mov	r0, r2
  40621c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406220:	bf04      	itt	eq
  406222:	0a1b      	lsreq	r3, r3, #8
  406224:	3008      	addeq	r0, #8
  406226:	071a      	lsls	r2, r3, #28
  406228:	bf04      	itt	eq
  40622a:	091b      	lsreq	r3, r3, #4
  40622c:	3004      	addeq	r0, #4
  40622e:	079a      	lsls	r2, r3, #30
  406230:	bf04      	itt	eq
  406232:	089b      	lsreq	r3, r3, #2
  406234:	3002      	addeq	r0, #2
  406236:	07da      	lsls	r2, r3, #31
  406238:	d407      	bmi.n	40624a <__lo0bits+0x4e>
  40623a:	085b      	lsrs	r3, r3, #1
  40623c:	d104      	bne.n	406248 <__lo0bits+0x4c>
  40623e:	2020      	movs	r0, #32
  406240:	4770      	bx	lr
  406242:	0c1b      	lsrs	r3, r3, #16
  406244:	2010      	movs	r0, #16
  406246:	e7e9      	b.n	40621c <__lo0bits+0x20>
  406248:	3001      	adds	r0, #1
  40624a:	600b      	str	r3, [r1, #0]
  40624c:	4770      	bx	lr
  40624e:	2000      	movs	r0, #0
  406250:	4770      	bx	lr
  406252:	085b      	lsrs	r3, r3, #1
  406254:	600b      	str	r3, [r1, #0]
  406256:	2001      	movs	r0, #1
  406258:	4770      	bx	lr
  40625a:	bf00      	nop

0040625c <__i2b>:
  40625c:	b510      	push	{r4, lr}
  40625e:	460c      	mov	r4, r1
  406260:	2101      	movs	r1, #1
  406262:	f7ff ff3b 	bl	4060dc <_Balloc>
  406266:	2201      	movs	r2, #1
  406268:	6144      	str	r4, [r0, #20]
  40626a:	6102      	str	r2, [r0, #16]
  40626c:	bd10      	pop	{r4, pc}
  40626e:	bf00      	nop

00406270 <__multiply>:
  406270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406274:	690c      	ldr	r4, [r1, #16]
  406276:	6915      	ldr	r5, [r2, #16]
  406278:	42ac      	cmp	r4, r5
  40627a:	b083      	sub	sp, #12
  40627c:	468b      	mov	fp, r1
  40627e:	4616      	mov	r6, r2
  406280:	da04      	bge.n	40628c <__multiply+0x1c>
  406282:	4622      	mov	r2, r4
  406284:	46b3      	mov	fp, r6
  406286:	462c      	mov	r4, r5
  406288:	460e      	mov	r6, r1
  40628a:	4615      	mov	r5, r2
  40628c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406290:	f8db 1004 	ldr.w	r1, [fp, #4]
  406294:	eb04 0805 	add.w	r8, r4, r5
  406298:	4598      	cmp	r8, r3
  40629a:	bfc8      	it	gt
  40629c:	3101      	addgt	r1, #1
  40629e:	f7ff ff1d 	bl	4060dc <_Balloc>
  4062a2:	f100 0914 	add.w	r9, r0, #20
  4062a6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4062aa:	45d1      	cmp	r9, sl
  4062ac:	9000      	str	r0, [sp, #0]
  4062ae:	d205      	bcs.n	4062bc <__multiply+0x4c>
  4062b0:	464b      	mov	r3, r9
  4062b2:	2100      	movs	r1, #0
  4062b4:	f843 1b04 	str.w	r1, [r3], #4
  4062b8:	459a      	cmp	sl, r3
  4062ba:	d8fb      	bhi.n	4062b4 <__multiply+0x44>
  4062bc:	f106 0c14 	add.w	ip, r6, #20
  4062c0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  4062c4:	f10b 0b14 	add.w	fp, fp, #20
  4062c8:	459c      	cmp	ip, r3
  4062ca:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4062ce:	d24c      	bcs.n	40636a <__multiply+0xfa>
  4062d0:	f8cd a004 	str.w	sl, [sp, #4]
  4062d4:	469a      	mov	sl, r3
  4062d6:	f8dc 5000 	ldr.w	r5, [ip]
  4062da:	b2af      	uxth	r7, r5
  4062dc:	b1ef      	cbz	r7, 40631a <__multiply+0xaa>
  4062de:	2100      	movs	r1, #0
  4062e0:	464d      	mov	r5, r9
  4062e2:	465e      	mov	r6, fp
  4062e4:	460c      	mov	r4, r1
  4062e6:	f856 2b04 	ldr.w	r2, [r6], #4
  4062ea:	6828      	ldr	r0, [r5, #0]
  4062ec:	b293      	uxth	r3, r2
  4062ee:	b281      	uxth	r1, r0
  4062f0:	fb07 1303 	mla	r3, r7, r3, r1
  4062f4:	0c12      	lsrs	r2, r2, #16
  4062f6:	0c01      	lsrs	r1, r0, #16
  4062f8:	4423      	add	r3, r4
  4062fa:	fb07 1102 	mla	r1, r7, r2, r1
  4062fe:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406302:	b29b      	uxth	r3, r3
  406304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406308:	45b6      	cmp	lr, r6
  40630a:	f845 3b04 	str.w	r3, [r5], #4
  40630e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406312:	d8e8      	bhi.n	4062e6 <__multiply+0x76>
  406314:	602c      	str	r4, [r5, #0]
  406316:	f8dc 5000 	ldr.w	r5, [ip]
  40631a:	0c2d      	lsrs	r5, r5, #16
  40631c:	d01d      	beq.n	40635a <__multiply+0xea>
  40631e:	f8d9 3000 	ldr.w	r3, [r9]
  406322:	4648      	mov	r0, r9
  406324:	461c      	mov	r4, r3
  406326:	4659      	mov	r1, fp
  406328:	2200      	movs	r2, #0
  40632a:	880e      	ldrh	r6, [r1, #0]
  40632c:	0c24      	lsrs	r4, r4, #16
  40632e:	fb05 4406 	mla	r4, r5, r6, r4
  406332:	4422      	add	r2, r4
  406334:	b29b      	uxth	r3, r3
  406336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40633a:	f840 3b04 	str.w	r3, [r0], #4
  40633e:	f851 3b04 	ldr.w	r3, [r1], #4
  406342:	6804      	ldr	r4, [r0, #0]
  406344:	0c1b      	lsrs	r3, r3, #16
  406346:	b2a6      	uxth	r6, r4
  406348:	fb05 6303 	mla	r3, r5, r3, r6
  40634c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406350:	458e      	cmp	lr, r1
  406352:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406356:	d8e8      	bhi.n	40632a <__multiply+0xba>
  406358:	6003      	str	r3, [r0, #0]
  40635a:	f10c 0c04 	add.w	ip, ip, #4
  40635e:	45e2      	cmp	sl, ip
  406360:	f109 0904 	add.w	r9, r9, #4
  406364:	d8b7      	bhi.n	4062d6 <__multiply+0x66>
  406366:	f8dd a004 	ldr.w	sl, [sp, #4]
  40636a:	f1b8 0f00 	cmp.w	r8, #0
  40636e:	dd0b      	ble.n	406388 <__multiply+0x118>
  406370:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406374:	f1aa 0a04 	sub.w	sl, sl, #4
  406378:	b11b      	cbz	r3, 406382 <__multiply+0x112>
  40637a:	e005      	b.n	406388 <__multiply+0x118>
  40637c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406380:	b913      	cbnz	r3, 406388 <__multiply+0x118>
  406382:	f1b8 0801 	subs.w	r8, r8, #1
  406386:	d1f9      	bne.n	40637c <__multiply+0x10c>
  406388:	9800      	ldr	r0, [sp, #0]
  40638a:	f8c0 8010 	str.w	r8, [r0, #16]
  40638e:	b003      	add	sp, #12
  406390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406394 <__pow5mult>:
  406394:	f012 0303 	ands.w	r3, r2, #3
  406398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40639c:	4614      	mov	r4, r2
  40639e:	4607      	mov	r7, r0
  4063a0:	d12e      	bne.n	406400 <__pow5mult+0x6c>
  4063a2:	460d      	mov	r5, r1
  4063a4:	10a4      	asrs	r4, r4, #2
  4063a6:	d01c      	beq.n	4063e2 <__pow5mult+0x4e>
  4063a8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4063aa:	b396      	cbz	r6, 406412 <__pow5mult+0x7e>
  4063ac:	07e3      	lsls	r3, r4, #31
  4063ae:	f04f 0800 	mov.w	r8, #0
  4063b2:	d406      	bmi.n	4063c2 <__pow5mult+0x2e>
  4063b4:	1064      	asrs	r4, r4, #1
  4063b6:	d014      	beq.n	4063e2 <__pow5mult+0x4e>
  4063b8:	6830      	ldr	r0, [r6, #0]
  4063ba:	b1a8      	cbz	r0, 4063e8 <__pow5mult+0x54>
  4063bc:	4606      	mov	r6, r0
  4063be:	07e3      	lsls	r3, r4, #31
  4063c0:	d5f8      	bpl.n	4063b4 <__pow5mult+0x20>
  4063c2:	4632      	mov	r2, r6
  4063c4:	4629      	mov	r1, r5
  4063c6:	4638      	mov	r0, r7
  4063c8:	f7ff ff52 	bl	406270 <__multiply>
  4063cc:	b1b5      	cbz	r5, 4063fc <__pow5mult+0x68>
  4063ce:	686a      	ldr	r2, [r5, #4]
  4063d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4063d2:	1064      	asrs	r4, r4, #1
  4063d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4063d8:	6029      	str	r1, [r5, #0]
  4063da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4063de:	4605      	mov	r5, r0
  4063e0:	d1ea      	bne.n	4063b8 <__pow5mult+0x24>
  4063e2:	4628      	mov	r0, r5
  4063e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4063e8:	4632      	mov	r2, r6
  4063ea:	4631      	mov	r1, r6
  4063ec:	4638      	mov	r0, r7
  4063ee:	f7ff ff3f 	bl	406270 <__multiply>
  4063f2:	6030      	str	r0, [r6, #0]
  4063f4:	f8c0 8000 	str.w	r8, [r0]
  4063f8:	4606      	mov	r6, r0
  4063fa:	e7e0      	b.n	4063be <__pow5mult+0x2a>
  4063fc:	4605      	mov	r5, r0
  4063fe:	e7d9      	b.n	4063b4 <__pow5mult+0x20>
  406400:	1e5a      	subs	r2, r3, #1
  406402:	4d0b      	ldr	r5, [pc, #44]	; (406430 <__pow5mult+0x9c>)
  406404:	2300      	movs	r3, #0
  406406:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40640a:	f7ff fe97 	bl	40613c <__multadd>
  40640e:	4605      	mov	r5, r0
  406410:	e7c8      	b.n	4063a4 <__pow5mult+0x10>
  406412:	2101      	movs	r1, #1
  406414:	4638      	mov	r0, r7
  406416:	f7ff fe61 	bl	4060dc <_Balloc>
  40641a:	f240 2171 	movw	r1, #625	; 0x271
  40641e:	2201      	movs	r2, #1
  406420:	2300      	movs	r3, #0
  406422:	6141      	str	r1, [r0, #20]
  406424:	6102      	str	r2, [r0, #16]
  406426:	4606      	mov	r6, r0
  406428:	64b8      	str	r0, [r7, #72]	; 0x48
  40642a:	6003      	str	r3, [r0, #0]
  40642c:	e7be      	b.n	4063ac <__pow5mult+0x18>
  40642e:	bf00      	nop
  406430:	00407680 	.word	0x00407680

00406434 <__lshift>:
  406434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406438:	4691      	mov	r9, r2
  40643a:	690a      	ldr	r2, [r1, #16]
  40643c:	688b      	ldr	r3, [r1, #8]
  40643e:	ea4f 1469 	mov.w	r4, r9, asr #5
  406442:	eb04 0802 	add.w	r8, r4, r2
  406446:	f108 0501 	add.w	r5, r8, #1
  40644a:	429d      	cmp	r5, r3
  40644c:	460e      	mov	r6, r1
  40644e:	4607      	mov	r7, r0
  406450:	6849      	ldr	r1, [r1, #4]
  406452:	dd04      	ble.n	40645e <__lshift+0x2a>
  406454:	005b      	lsls	r3, r3, #1
  406456:	429d      	cmp	r5, r3
  406458:	f101 0101 	add.w	r1, r1, #1
  40645c:	dcfa      	bgt.n	406454 <__lshift+0x20>
  40645e:	4638      	mov	r0, r7
  406460:	f7ff fe3c 	bl	4060dc <_Balloc>
  406464:	2c00      	cmp	r4, #0
  406466:	f100 0314 	add.w	r3, r0, #20
  40646a:	dd06      	ble.n	40647a <__lshift+0x46>
  40646c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406470:	2100      	movs	r1, #0
  406472:	f843 1b04 	str.w	r1, [r3], #4
  406476:	429a      	cmp	r2, r3
  406478:	d1fb      	bne.n	406472 <__lshift+0x3e>
  40647a:	6934      	ldr	r4, [r6, #16]
  40647c:	f106 0114 	add.w	r1, r6, #20
  406480:	f019 091f 	ands.w	r9, r9, #31
  406484:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406488:	d01d      	beq.n	4064c6 <__lshift+0x92>
  40648a:	f1c9 0c20 	rsb	ip, r9, #32
  40648e:	2200      	movs	r2, #0
  406490:	680c      	ldr	r4, [r1, #0]
  406492:	fa04 f409 	lsl.w	r4, r4, r9
  406496:	4314      	orrs	r4, r2
  406498:	f843 4b04 	str.w	r4, [r3], #4
  40649c:	f851 2b04 	ldr.w	r2, [r1], #4
  4064a0:	458e      	cmp	lr, r1
  4064a2:	fa22 f20c 	lsr.w	r2, r2, ip
  4064a6:	d8f3      	bhi.n	406490 <__lshift+0x5c>
  4064a8:	601a      	str	r2, [r3, #0]
  4064aa:	b10a      	cbz	r2, 4064b0 <__lshift+0x7c>
  4064ac:	f108 0502 	add.w	r5, r8, #2
  4064b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4064b2:	6872      	ldr	r2, [r6, #4]
  4064b4:	3d01      	subs	r5, #1
  4064b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4064ba:	6105      	str	r5, [r0, #16]
  4064bc:	6031      	str	r1, [r6, #0]
  4064be:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4064c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4064c6:	3b04      	subs	r3, #4
  4064c8:	f851 2b04 	ldr.w	r2, [r1], #4
  4064cc:	f843 2f04 	str.w	r2, [r3, #4]!
  4064d0:	458e      	cmp	lr, r1
  4064d2:	d8f9      	bhi.n	4064c8 <__lshift+0x94>
  4064d4:	e7ec      	b.n	4064b0 <__lshift+0x7c>
  4064d6:	bf00      	nop

004064d8 <__mcmp>:
  4064d8:	b430      	push	{r4, r5}
  4064da:	690b      	ldr	r3, [r1, #16]
  4064dc:	4605      	mov	r5, r0
  4064de:	6900      	ldr	r0, [r0, #16]
  4064e0:	1ac0      	subs	r0, r0, r3
  4064e2:	d10f      	bne.n	406504 <__mcmp+0x2c>
  4064e4:	009b      	lsls	r3, r3, #2
  4064e6:	3514      	adds	r5, #20
  4064e8:	3114      	adds	r1, #20
  4064ea:	4419      	add	r1, r3
  4064ec:	442b      	add	r3, r5
  4064ee:	e001      	b.n	4064f4 <__mcmp+0x1c>
  4064f0:	429d      	cmp	r5, r3
  4064f2:	d207      	bcs.n	406504 <__mcmp+0x2c>
  4064f4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4064f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4064fc:	4294      	cmp	r4, r2
  4064fe:	d0f7      	beq.n	4064f0 <__mcmp+0x18>
  406500:	d302      	bcc.n	406508 <__mcmp+0x30>
  406502:	2001      	movs	r0, #1
  406504:	bc30      	pop	{r4, r5}
  406506:	4770      	bx	lr
  406508:	f04f 30ff 	mov.w	r0, #4294967295
  40650c:	e7fa      	b.n	406504 <__mcmp+0x2c>
  40650e:	bf00      	nop

00406510 <__mdiff>:
  406510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406514:	690f      	ldr	r7, [r1, #16]
  406516:	460e      	mov	r6, r1
  406518:	6911      	ldr	r1, [r2, #16]
  40651a:	1a7f      	subs	r7, r7, r1
  40651c:	2f00      	cmp	r7, #0
  40651e:	4690      	mov	r8, r2
  406520:	d117      	bne.n	406552 <__mdiff+0x42>
  406522:	0089      	lsls	r1, r1, #2
  406524:	f106 0514 	add.w	r5, r6, #20
  406528:	f102 0e14 	add.w	lr, r2, #20
  40652c:	186b      	adds	r3, r5, r1
  40652e:	4471      	add	r1, lr
  406530:	e001      	b.n	406536 <__mdiff+0x26>
  406532:	429d      	cmp	r5, r3
  406534:	d25c      	bcs.n	4065f0 <__mdiff+0xe0>
  406536:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40653a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40653e:	42a2      	cmp	r2, r4
  406540:	d0f7      	beq.n	406532 <__mdiff+0x22>
  406542:	d25e      	bcs.n	406602 <__mdiff+0xf2>
  406544:	4633      	mov	r3, r6
  406546:	462c      	mov	r4, r5
  406548:	4646      	mov	r6, r8
  40654a:	4675      	mov	r5, lr
  40654c:	4698      	mov	r8, r3
  40654e:	2701      	movs	r7, #1
  406550:	e005      	b.n	40655e <__mdiff+0x4e>
  406552:	db58      	blt.n	406606 <__mdiff+0xf6>
  406554:	f106 0514 	add.w	r5, r6, #20
  406558:	f108 0414 	add.w	r4, r8, #20
  40655c:	2700      	movs	r7, #0
  40655e:	6871      	ldr	r1, [r6, #4]
  406560:	f7ff fdbc 	bl	4060dc <_Balloc>
  406564:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406568:	6936      	ldr	r6, [r6, #16]
  40656a:	60c7      	str	r7, [r0, #12]
  40656c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406570:	46a6      	mov	lr, r4
  406572:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406576:	f100 0414 	add.w	r4, r0, #20
  40657a:	2300      	movs	r3, #0
  40657c:	f85e 1b04 	ldr.w	r1, [lr], #4
  406580:	f855 8b04 	ldr.w	r8, [r5], #4
  406584:	b28a      	uxth	r2, r1
  406586:	fa13 f388 	uxtah	r3, r3, r8
  40658a:	0c09      	lsrs	r1, r1, #16
  40658c:	1a9a      	subs	r2, r3, r2
  40658e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406592:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406596:	b292      	uxth	r2, r2
  406598:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40659c:	45f4      	cmp	ip, lr
  40659e:	f844 2b04 	str.w	r2, [r4], #4
  4065a2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4065a6:	d8e9      	bhi.n	40657c <__mdiff+0x6c>
  4065a8:	42af      	cmp	r7, r5
  4065aa:	d917      	bls.n	4065dc <__mdiff+0xcc>
  4065ac:	46a4      	mov	ip, r4
  4065ae:	46ae      	mov	lr, r5
  4065b0:	f85e 2b04 	ldr.w	r2, [lr], #4
  4065b4:	fa13 f382 	uxtah	r3, r3, r2
  4065b8:	1419      	asrs	r1, r3, #16
  4065ba:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4065be:	b29b      	uxth	r3, r3
  4065c0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4065c4:	4577      	cmp	r7, lr
  4065c6:	f84c 2b04 	str.w	r2, [ip], #4
  4065ca:	ea4f 4321 	mov.w	r3, r1, asr #16
  4065ce:	d8ef      	bhi.n	4065b0 <__mdiff+0xa0>
  4065d0:	43ed      	mvns	r5, r5
  4065d2:	442f      	add	r7, r5
  4065d4:	f027 0703 	bic.w	r7, r7, #3
  4065d8:	3704      	adds	r7, #4
  4065da:	443c      	add	r4, r7
  4065dc:	3c04      	subs	r4, #4
  4065de:	b922      	cbnz	r2, 4065ea <__mdiff+0xda>
  4065e0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4065e4:	3e01      	subs	r6, #1
  4065e6:	2b00      	cmp	r3, #0
  4065e8:	d0fa      	beq.n	4065e0 <__mdiff+0xd0>
  4065ea:	6106      	str	r6, [r0, #16]
  4065ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4065f0:	2100      	movs	r1, #0
  4065f2:	f7ff fd73 	bl	4060dc <_Balloc>
  4065f6:	2201      	movs	r2, #1
  4065f8:	2300      	movs	r3, #0
  4065fa:	6102      	str	r2, [r0, #16]
  4065fc:	6143      	str	r3, [r0, #20]
  4065fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406602:	4674      	mov	r4, lr
  406604:	e7ab      	b.n	40655e <__mdiff+0x4e>
  406606:	4633      	mov	r3, r6
  406608:	f106 0414 	add.w	r4, r6, #20
  40660c:	f102 0514 	add.w	r5, r2, #20
  406610:	4616      	mov	r6, r2
  406612:	2701      	movs	r7, #1
  406614:	4698      	mov	r8, r3
  406616:	e7a2      	b.n	40655e <__mdiff+0x4e>

00406618 <__d2b>:
  406618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40661c:	b082      	sub	sp, #8
  40661e:	2101      	movs	r1, #1
  406620:	461c      	mov	r4, r3
  406622:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406626:	4615      	mov	r5, r2
  406628:	9e08      	ldr	r6, [sp, #32]
  40662a:	f7ff fd57 	bl	4060dc <_Balloc>
  40662e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406632:	4680      	mov	r8, r0
  406634:	b10f      	cbz	r7, 40663a <__d2b+0x22>
  406636:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40663a:	9401      	str	r4, [sp, #4]
  40663c:	b31d      	cbz	r5, 406686 <__d2b+0x6e>
  40663e:	a802      	add	r0, sp, #8
  406640:	f840 5d08 	str.w	r5, [r0, #-8]!
  406644:	f7ff fdda 	bl	4061fc <__lo0bits>
  406648:	2800      	cmp	r0, #0
  40664a:	d134      	bne.n	4066b6 <__d2b+0x9e>
  40664c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406650:	f8c8 2014 	str.w	r2, [r8, #20]
  406654:	2b00      	cmp	r3, #0
  406656:	bf0c      	ite	eq
  406658:	2101      	moveq	r1, #1
  40665a:	2102      	movne	r1, #2
  40665c:	f8c8 3018 	str.w	r3, [r8, #24]
  406660:	f8c8 1010 	str.w	r1, [r8, #16]
  406664:	b9df      	cbnz	r7, 40669e <__d2b+0x86>
  406666:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40666a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40666e:	6030      	str	r0, [r6, #0]
  406670:	6918      	ldr	r0, [r3, #16]
  406672:	f7ff fda3 	bl	4061bc <__hi0bits>
  406676:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406678:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40667c:	6018      	str	r0, [r3, #0]
  40667e:	4640      	mov	r0, r8
  406680:	b002      	add	sp, #8
  406682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406686:	a801      	add	r0, sp, #4
  406688:	f7ff fdb8 	bl	4061fc <__lo0bits>
  40668c:	9b01      	ldr	r3, [sp, #4]
  40668e:	f8c8 3014 	str.w	r3, [r8, #20]
  406692:	2101      	movs	r1, #1
  406694:	3020      	adds	r0, #32
  406696:	f8c8 1010 	str.w	r1, [r8, #16]
  40669a:	2f00      	cmp	r7, #0
  40669c:	d0e3      	beq.n	406666 <__d2b+0x4e>
  40669e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4066a0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4066a4:	4407      	add	r7, r0
  4066a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4066aa:	6037      	str	r7, [r6, #0]
  4066ac:	6018      	str	r0, [r3, #0]
  4066ae:	4640      	mov	r0, r8
  4066b0:	b002      	add	sp, #8
  4066b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4066b6:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4066ba:	f1c0 0220 	rsb	r2, r0, #32
  4066be:	fa03 f202 	lsl.w	r2, r3, r2
  4066c2:	430a      	orrs	r2, r1
  4066c4:	40c3      	lsrs	r3, r0
  4066c6:	9301      	str	r3, [sp, #4]
  4066c8:	f8c8 2014 	str.w	r2, [r8, #20]
  4066cc:	e7c2      	b.n	406654 <__d2b+0x3c>
  4066ce:	bf00      	nop

004066d0 <_sbrk_r>:
  4066d0:	b538      	push	{r3, r4, r5, lr}
  4066d2:	4c07      	ldr	r4, [pc, #28]	; (4066f0 <_sbrk_r+0x20>)
  4066d4:	2300      	movs	r3, #0
  4066d6:	4605      	mov	r5, r0
  4066d8:	4608      	mov	r0, r1
  4066da:	6023      	str	r3, [r4, #0]
  4066dc:	f7fc fa72 	bl	402bc4 <_sbrk>
  4066e0:	1c43      	adds	r3, r0, #1
  4066e2:	d000      	beq.n	4066e6 <_sbrk_r+0x16>
  4066e4:	bd38      	pop	{r3, r4, r5, pc}
  4066e6:	6823      	ldr	r3, [r4, #0]
  4066e8:	2b00      	cmp	r3, #0
  4066ea:	d0fb      	beq.n	4066e4 <_sbrk_r+0x14>
  4066ec:	602b      	str	r3, [r5, #0]
  4066ee:	bd38      	pop	{r3, r4, r5, pc}
  4066f0:	20400e8c 	.word	0x20400e8c
	...

00406700 <strlen>:
  406700:	f890 f000 	pld	[r0]
  406704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406708:	f020 0107 	bic.w	r1, r0, #7
  40670c:	f06f 0c00 	mvn.w	ip, #0
  406710:	f010 0407 	ands.w	r4, r0, #7
  406714:	f891 f020 	pld	[r1, #32]
  406718:	f040 8049 	bne.w	4067ae <strlen+0xae>
  40671c:	f04f 0400 	mov.w	r4, #0
  406720:	f06f 0007 	mvn.w	r0, #7
  406724:	e9d1 2300 	ldrd	r2, r3, [r1]
  406728:	f891 f040 	pld	[r1, #64]	; 0x40
  40672c:	f100 0008 	add.w	r0, r0, #8
  406730:	fa82 f24c 	uadd8	r2, r2, ip
  406734:	faa4 f28c 	sel	r2, r4, ip
  406738:	fa83 f34c 	uadd8	r3, r3, ip
  40673c:	faa2 f38c 	sel	r3, r2, ip
  406740:	bb4b      	cbnz	r3, 406796 <strlen+0x96>
  406742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406746:	fa82 f24c 	uadd8	r2, r2, ip
  40674a:	f100 0008 	add.w	r0, r0, #8
  40674e:	faa4 f28c 	sel	r2, r4, ip
  406752:	fa83 f34c 	uadd8	r3, r3, ip
  406756:	faa2 f38c 	sel	r3, r2, ip
  40675a:	b9e3      	cbnz	r3, 406796 <strlen+0x96>
  40675c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406760:	fa82 f24c 	uadd8	r2, r2, ip
  406764:	f100 0008 	add.w	r0, r0, #8
  406768:	faa4 f28c 	sel	r2, r4, ip
  40676c:	fa83 f34c 	uadd8	r3, r3, ip
  406770:	faa2 f38c 	sel	r3, r2, ip
  406774:	b97b      	cbnz	r3, 406796 <strlen+0x96>
  406776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40677a:	f101 0120 	add.w	r1, r1, #32
  40677e:	fa82 f24c 	uadd8	r2, r2, ip
  406782:	f100 0008 	add.w	r0, r0, #8
  406786:	faa4 f28c 	sel	r2, r4, ip
  40678a:	fa83 f34c 	uadd8	r3, r3, ip
  40678e:	faa2 f38c 	sel	r3, r2, ip
  406792:	2b00      	cmp	r3, #0
  406794:	d0c6      	beq.n	406724 <strlen+0x24>
  406796:	2a00      	cmp	r2, #0
  406798:	bf04      	itt	eq
  40679a:	3004      	addeq	r0, #4
  40679c:	461a      	moveq	r2, r3
  40679e:	ba12      	rev	r2, r2
  4067a0:	fab2 f282 	clz	r2, r2
  4067a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4067a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4067ac:	4770      	bx	lr
  4067ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4067b2:	f004 0503 	and.w	r5, r4, #3
  4067b6:	f1c4 0000 	rsb	r0, r4, #0
  4067ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4067be:	f014 0f04 	tst.w	r4, #4
  4067c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4067c6:	fa0c f505 	lsl.w	r5, ip, r5
  4067ca:	ea62 0205 	orn	r2, r2, r5
  4067ce:	bf1c      	itt	ne
  4067d0:	ea63 0305 	ornne	r3, r3, r5
  4067d4:	4662      	movne	r2, ip
  4067d6:	f04f 0400 	mov.w	r4, #0
  4067da:	e7a9      	b.n	406730 <strlen+0x30>

004067dc <__ssprint_r>:
  4067dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4067e0:	6893      	ldr	r3, [r2, #8]
  4067e2:	b083      	sub	sp, #12
  4067e4:	4690      	mov	r8, r2
  4067e6:	2b00      	cmp	r3, #0
  4067e8:	d070      	beq.n	4068cc <__ssprint_r+0xf0>
  4067ea:	4682      	mov	sl, r0
  4067ec:	460c      	mov	r4, r1
  4067ee:	6817      	ldr	r7, [r2, #0]
  4067f0:	688d      	ldr	r5, [r1, #8]
  4067f2:	6808      	ldr	r0, [r1, #0]
  4067f4:	e042      	b.n	40687c <__ssprint_r+0xa0>
  4067f6:	89a3      	ldrh	r3, [r4, #12]
  4067f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4067fc:	d02e      	beq.n	40685c <__ssprint_r+0x80>
  4067fe:	6965      	ldr	r5, [r4, #20]
  406800:	6921      	ldr	r1, [r4, #16]
  406802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  406806:	eba0 0b01 	sub.w	fp, r0, r1
  40680a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40680e:	f10b 0001 	add.w	r0, fp, #1
  406812:	106d      	asrs	r5, r5, #1
  406814:	4430      	add	r0, r6
  406816:	42a8      	cmp	r0, r5
  406818:	462a      	mov	r2, r5
  40681a:	bf84      	itt	hi
  40681c:	4605      	movhi	r5, r0
  40681e:	462a      	movhi	r2, r5
  406820:	055b      	lsls	r3, r3, #21
  406822:	d538      	bpl.n	406896 <__ssprint_r+0xba>
  406824:	4611      	mov	r1, r2
  406826:	4650      	mov	r0, sl
  406828:	f7ff f8b0 	bl	40598c <_malloc_r>
  40682c:	2800      	cmp	r0, #0
  40682e:	d03c      	beq.n	4068aa <__ssprint_r+0xce>
  406830:	465a      	mov	r2, fp
  406832:	6921      	ldr	r1, [r4, #16]
  406834:	9001      	str	r0, [sp, #4]
  406836:	f7ff fbab 	bl	405f90 <memcpy>
  40683a:	89a2      	ldrh	r2, [r4, #12]
  40683c:	9b01      	ldr	r3, [sp, #4]
  40683e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406842:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406846:	81a2      	strh	r2, [r4, #12]
  406848:	eba5 020b 	sub.w	r2, r5, fp
  40684c:	eb03 000b 	add.w	r0, r3, fp
  406850:	6165      	str	r5, [r4, #20]
  406852:	6123      	str	r3, [r4, #16]
  406854:	6020      	str	r0, [r4, #0]
  406856:	60a2      	str	r2, [r4, #8]
  406858:	4635      	mov	r5, r6
  40685a:	46b3      	mov	fp, r6
  40685c:	465a      	mov	r2, fp
  40685e:	4649      	mov	r1, r9
  406860:	f000 fa18 	bl	406c94 <memmove>
  406864:	f8d8 3008 	ldr.w	r3, [r8, #8]
  406868:	68a2      	ldr	r2, [r4, #8]
  40686a:	6820      	ldr	r0, [r4, #0]
  40686c:	1b55      	subs	r5, r2, r5
  40686e:	4458      	add	r0, fp
  406870:	1b9e      	subs	r6, r3, r6
  406872:	60a5      	str	r5, [r4, #8]
  406874:	6020      	str	r0, [r4, #0]
  406876:	f8c8 6008 	str.w	r6, [r8, #8]
  40687a:	b33e      	cbz	r6, 4068cc <__ssprint_r+0xf0>
  40687c:	687e      	ldr	r6, [r7, #4]
  40687e:	463b      	mov	r3, r7
  406880:	3708      	adds	r7, #8
  406882:	2e00      	cmp	r6, #0
  406884:	d0fa      	beq.n	40687c <__ssprint_r+0xa0>
  406886:	42ae      	cmp	r6, r5
  406888:	f8d3 9000 	ldr.w	r9, [r3]
  40688c:	46ab      	mov	fp, r5
  40688e:	d2b2      	bcs.n	4067f6 <__ssprint_r+0x1a>
  406890:	4635      	mov	r5, r6
  406892:	46b3      	mov	fp, r6
  406894:	e7e2      	b.n	40685c <__ssprint_r+0x80>
  406896:	4650      	mov	r0, sl
  406898:	f000 fa60 	bl	406d5c <_realloc_r>
  40689c:	4603      	mov	r3, r0
  40689e:	2800      	cmp	r0, #0
  4068a0:	d1d2      	bne.n	406848 <__ssprint_r+0x6c>
  4068a2:	6921      	ldr	r1, [r4, #16]
  4068a4:	4650      	mov	r0, sl
  4068a6:	f000 f8f9 	bl	406a9c <_free_r>
  4068aa:	230c      	movs	r3, #12
  4068ac:	f8ca 3000 	str.w	r3, [sl]
  4068b0:	89a3      	ldrh	r3, [r4, #12]
  4068b2:	2200      	movs	r2, #0
  4068b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4068b8:	f04f 30ff 	mov.w	r0, #4294967295
  4068bc:	81a3      	strh	r3, [r4, #12]
  4068be:	f8c8 2008 	str.w	r2, [r8, #8]
  4068c2:	f8c8 2004 	str.w	r2, [r8, #4]
  4068c6:	b003      	add	sp, #12
  4068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4068cc:	2000      	movs	r0, #0
  4068ce:	f8c8 0004 	str.w	r0, [r8, #4]
  4068d2:	b003      	add	sp, #12
  4068d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004068d8 <__register_exitproc>:
  4068d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4068dc:	4d2c      	ldr	r5, [pc, #176]	; (406990 <__register_exitproc+0xb8>)
  4068de:	4606      	mov	r6, r0
  4068e0:	6828      	ldr	r0, [r5, #0]
  4068e2:	4698      	mov	r8, r3
  4068e4:	460f      	mov	r7, r1
  4068e6:	4691      	mov	r9, r2
  4068e8:	f7ff f84c 	bl	405984 <__retarget_lock_acquire_recursive>
  4068ec:	4b29      	ldr	r3, [pc, #164]	; (406994 <__register_exitproc+0xbc>)
  4068ee:	681c      	ldr	r4, [r3, #0]
  4068f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4068f4:	2b00      	cmp	r3, #0
  4068f6:	d03e      	beq.n	406976 <__register_exitproc+0x9e>
  4068f8:	685a      	ldr	r2, [r3, #4]
  4068fa:	2a1f      	cmp	r2, #31
  4068fc:	dc1c      	bgt.n	406938 <__register_exitproc+0x60>
  4068fe:	f102 0e01 	add.w	lr, r2, #1
  406902:	b176      	cbz	r6, 406922 <__register_exitproc+0x4a>
  406904:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406908:	2401      	movs	r4, #1
  40690a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40690e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406912:	4094      	lsls	r4, r2
  406914:	4320      	orrs	r0, r4
  406916:	2e02      	cmp	r6, #2
  406918:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40691c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406920:	d023      	beq.n	40696a <__register_exitproc+0x92>
  406922:	3202      	adds	r2, #2
  406924:	f8c3 e004 	str.w	lr, [r3, #4]
  406928:	6828      	ldr	r0, [r5, #0]
  40692a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40692e:	f7ff f82b 	bl	405988 <__retarget_lock_release_recursive>
  406932:	2000      	movs	r0, #0
  406934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406938:	4b17      	ldr	r3, [pc, #92]	; (406998 <__register_exitproc+0xc0>)
  40693a:	b30b      	cbz	r3, 406980 <__register_exitproc+0xa8>
  40693c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406940:	f3af 8000 	nop.w
  406944:	4603      	mov	r3, r0
  406946:	b1d8      	cbz	r0, 406980 <__register_exitproc+0xa8>
  406948:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40694c:	6002      	str	r2, [r0, #0]
  40694e:	2100      	movs	r1, #0
  406950:	6041      	str	r1, [r0, #4]
  406952:	460a      	mov	r2, r1
  406954:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406958:	f04f 0e01 	mov.w	lr, #1
  40695c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406960:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406964:	2e00      	cmp	r6, #0
  406966:	d0dc      	beq.n	406922 <__register_exitproc+0x4a>
  406968:	e7cc      	b.n	406904 <__register_exitproc+0x2c>
  40696a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40696e:	430c      	orrs	r4, r1
  406970:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406974:	e7d5      	b.n	406922 <__register_exitproc+0x4a>
  406976:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40697a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40697e:	e7bb      	b.n	4068f8 <__register_exitproc+0x20>
  406980:	6828      	ldr	r0, [r5, #0]
  406982:	f7ff f801 	bl	405988 <__retarget_lock_release_recursive>
  406986:	f04f 30ff 	mov.w	r0, #4294967295
  40698a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40698e:	bf00      	nop
  406990:	20400438 	.word	0x20400438
  406994:	00407514 	.word	0x00407514
  406998:	00000000 	.word	0x00000000

0040699c <_calloc_r>:
  40699c:	b510      	push	{r4, lr}
  40699e:	fb02 f101 	mul.w	r1, r2, r1
  4069a2:	f7fe fff3 	bl	40598c <_malloc_r>
  4069a6:	4604      	mov	r4, r0
  4069a8:	b1d8      	cbz	r0, 4069e2 <_calloc_r+0x46>
  4069aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4069ae:	f022 0203 	bic.w	r2, r2, #3
  4069b2:	3a04      	subs	r2, #4
  4069b4:	2a24      	cmp	r2, #36	; 0x24
  4069b6:	d818      	bhi.n	4069ea <_calloc_r+0x4e>
  4069b8:	2a13      	cmp	r2, #19
  4069ba:	d914      	bls.n	4069e6 <_calloc_r+0x4a>
  4069bc:	2300      	movs	r3, #0
  4069be:	2a1b      	cmp	r2, #27
  4069c0:	6003      	str	r3, [r0, #0]
  4069c2:	6043      	str	r3, [r0, #4]
  4069c4:	d916      	bls.n	4069f4 <_calloc_r+0x58>
  4069c6:	2a24      	cmp	r2, #36	; 0x24
  4069c8:	6083      	str	r3, [r0, #8]
  4069ca:	60c3      	str	r3, [r0, #12]
  4069cc:	bf11      	iteee	ne
  4069ce:	f100 0210 	addne.w	r2, r0, #16
  4069d2:	6103      	streq	r3, [r0, #16]
  4069d4:	6143      	streq	r3, [r0, #20]
  4069d6:	f100 0218 	addeq.w	r2, r0, #24
  4069da:	2300      	movs	r3, #0
  4069dc:	6013      	str	r3, [r2, #0]
  4069de:	6053      	str	r3, [r2, #4]
  4069e0:	6093      	str	r3, [r2, #8]
  4069e2:	4620      	mov	r0, r4
  4069e4:	bd10      	pop	{r4, pc}
  4069e6:	4602      	mov	r2, r0
  4069e8:	e7f7      	b.n	4069da <_calloc_r+0x3e>
  4069ea:	2100      	movs	r1, #0
  4069ec:	f7fc fd30 	bl	403450 <memset>
  4069f0:	4620      	mov	r0, r4
  4069f2:	bd10      	pop	{r4, pc}
  4069f4:	f100 0208 	add.w	r2, r0, #8
  4069f8:	e7ef      	b.n	4069da <_calloc_r+0x3e>
  4069fa:	bf00      	nop

004069fc <_malloc_trim_r>:
  4069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4069fe:	4f24      	ldr	r7, [pc, #144]	; (406a90 <_malloc_trim_r+0x94>)
  406a00:	460c      	mov	r4, r1
  406a02:	4606      	mov	r6, r0
  406a04:	f7ff fb5e 	bl	4060c4 <__malloc_lock>
  406a08:	68bb      	ldr	r3, [r7, #8]
  406a0a:	685d      	ldr	r5, [r3, #4]
  406a0c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406a10:	310f      	adds	r1, #15
  406a12:	f025 0503 	bic.w	r5, r5, #3
  406a16:	4429      	add	r1, r5
  406a18:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406a1c:	f021 010f 	bic.w	r1, r1, #15
  406a20:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406a24:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406a28:	db07      	blt.n	406a3a <_malloc_trim_r+0x3e>
  406a2a:	2100      	movs	r1, #0
  406a2c:	4630      	mov	r0, r6
  406a2e:	f7ff fe4f 	bl	4066d0 <_sbrk_r>
  406a32:	68bb      	ldr	r3, [r7, #8]
  406a34:	442b      	add	r3, r5
  406a36:	4298      	cmp	r0, r3
  406a38:	d004      	beq.n	406a44 <_malloc_trim_r+0x48>
  406a3a:	4630      	mov	r0, r6
  406a3c:	f7ff fb48 	bl	4060d0 <__malloc_unlock>
  406a40:	2000      	movs	r0, #0
  406a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a44:	4261      	negs	r1, r4
  406a46:	4630      	mov	r0, r6
  406a48:	f7ff fe42 	bl	4066d0 <_sbrk_r>
  406a4c:	3001      	adds	r0, #1
  406a4e:	d00d      	beq.n	406a6c <_malloc_trim_r+0x70>
  406a50:	4b10      	ldr	r3, [pc, #64]	; (406a94 <_malloc_trim_r+0x98>)
  406a52:	68ba      	ldr	r2, [r7, #8]
  406a54:	6819      	ldr	r1, [r3, #0]
  406a56:	1b2d      	subs	r5, r5, r4
  406a58:	f045 0501 	orr.w	r5, r5, #1
  406a5c:	4630      	mov	r0, r6
  406a5e:	1b09      	subs	r1, r1, r4
  406a60:	6055      	str	r5, [r2, #4]
  406a62:	6019      	str	r1, [r3, #0]
  406a64:	f7ff fb34 	bl	4060d0 <__malloc_unlock>
  406a68:	2001      	movs	r0, #1
  406a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a6c:	2100      	movs	r1, #0
  406a6e:	4630      	mov	r0, r6
  406a70:	f7ff fe2e 	bl	4066d0 <_sbrk_r>
  406a74:	68ba      	ldr	r2, [r7, #8]
  406a76:	1a83      	subs	r3, r0, r2
  406a78:	2b0f      	cmp	r3, #15
  406a7a:	ddde      	ble.n	406a3a <_malloc_trim_r+0x3e>
  406a7c:	4c06      	ldr	r4, [pc, #24]	; (406a98 <_malloc_trim_r+0x9c>)
  406a7e:	4905      	ldr	r1, [pc, #20]	; (406a94 <_malloc_trim_r+0x98>)
  406a80:	6824      	ldr	r4, [r4, #0]
  406a82:	f043 0301 	orr.w	r3, r3, #1
  406a86:	1b00      	subs	r0, r0, r4
  406a88:	6053      	str	r3, [r2, #4]
  406a8a:	6008      	str	r0, [r1, #0]
  406a8c:	e7d5      	b.n	406a3a <_malloc_trim_r+0x3e>
  406a8e:	bf00      	nop
  406a90:	2040043c 	.word	0x2040043c
  406a94:	20400e0c 	.word	0x20400e0c
  406a98:	20400844 	.word	0x20400844

00406a9c <_free_r>:
  406a9c:	2900      	cmp	r1, #0
  406a9e:	d044      	beq.n	406b2a <_free_r+0x8e>
  406aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406aa4:	460d      	mov	r5, r1
  406aa6:	4680      	mov	r8, r0
  406aa8:	f7ff fb0c 	bl	4060c4 <__malloc_lock>
  406aac:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406ab0:	4969      	ldr	r1, [pc, #420]	; (406c58 <_free_r+0x1bc>)
  406ab2:	f027 0301 	bic.w	r3, r7, #1
  406ab6:	f1a5 0408 	sub.w	r4, r5, #8
  406aba:	18e2      	adds	r2, r4, r3
  406abc:	688e      	ldr	r6, [r1, #8]
  406abe:	6850      	ldr	r0, [r2, #4]
  406ac0:	42b2      	cmp	r2, r6
  406ac2:	f020 0003 	bic.w	r0, r0, #3
  406ac6:	d05e      	beq.n	406b86 <_free_r+0xea>
  406ac8:	07fe      	lsls	r6, r7, #31
  406aca:	6050      	str	r0, [r2, #4]
  406acc:	d40b      	bmi.n	406ae6 <_free_r+0x4a>
  406ace:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406ad2:	1be4      	subs	r4, r4, r7
  406ad4:	f101 0e08 	add.w	lr, r1, #8
  406ad8:	68a5      	ldr	r5, [r4, #8]
  406ada:	4575      	cmp	r5, lr
  406adc:	443b      	add	r3, r7
  406ade:	d06d      	beq.n	406bbc <_free_r+0x120>
  406ae0:	68e7      	ldr	r7, [r4, #12]
  406ae2:	60ef      	str	r7, [r5, #12]
  406ae4:	60bd      	str	r5, [r7, #8]
  406ae6:	1815      	adds	r5, r2, r0
  406ae8:	686d      	ldr	r5, [r5, #4]
  406aea:	07ed      	lsls	r5, r5, #31
  406aec:	d53e      	bpl.n	406b6c <_free_r+0xd0>
  406aee:	f043 0201 	orr.w	r2, r3, #1
  406af2:	6062      	str	r2, [r4, #4]
  406af4:	50e3      	str	r3, [r4, r3]
  406af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406afa:	d217      	bcs.n	406b2c <_free_r+0x90>
  406afc:	08db      	lsrs	r3, r3, #3
  406afe:	1c58      	adds	r0, r3, #1
  406b00:	109a      	asrs	r2, r3, #2
  406b02:	684d      	ldr	r5, [r1, #4]
  406b04:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406b08:	60a7      	str	r7, [r4, #8]
  406b0a:	2301      	movs	r3, #1
  406b0c:	4093      	lsls	r3, r2
  406b0e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406b12:	432b      	orrs	r3, r5
  406b14:	3a08      	subs	r2, #8
  406b16:	60e2      	str	r2, [r4, #12]
  406b18:	604b      	str	r3, [r1, #4]
  406b1a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406b1e:	60fc      	str	r4, [r7, #12]
  406b20:	4640      	mov	r0, r8
  406b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406b26:	f7ff bad3 	b.w	4060d0 <__malloc_unlock>
  406b2a:	4770      	bx	lr
  406b2c:	0a5a      	lsrs	r2, r3, #9
  406b2e:	2a04      	cmp	r2, #4
  406b30:	d852      	bhi.n	406bd8 <_free_r+0x13c>
  406b32:	099a      	lsrs	r2, r3, #6
  406b34:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406b38:	00ff      	lsls	r7, r7, #3
  406b3a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406b3e:	19c8      	adds	r0, r1, r7
  406b40:	59ca      	ldr	r2, [r1, r7]
  406b42:	3808      	subs	r0, #8
  406b44:	4290      	cmp	r0, r2
  406b46:	d04f      	beq.n	406be8 <_free_r+0x14c>
  406b48:	6851      	ldr	r1, [r2, #4]
  406b4a:	f021 0103 	bic.w	r1, r1, #3
  406b4e:	428b      	cmp	r3, r1
  406b50:	d232      	bcs.n	406bb8 <_free_r+0x11c>
  406b52:	6892      	ldr	r2, [r2, #8]
  406b54:	4290      	cmp	r0, r2
  406b56:	d1f7      	bne.n	406b48 <_free_r+0xac>
  406b58:	68c3      	ldr	r3, [r0, #12]
  406b5a:	60a0      	str	r0, [r4, #8]
  406b5c:	60e3      	str	r3, [r4, #12]
  406b5e:	609c      	str	r4, [r3, #8]
  406b60:	60c4      	str	r4, [r0, #12]
  406b62:	4640      	mov	r0, r8
  406b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406b68:	f7ff bab2 	b.w	4060d0 <__malloc_unlock>
  406b6c:	6895      	ldr	r5, [r2, #8]
  406b6e:	4f3b      	ldr	r7, [pc, #236]	; (406c5c <_free_r+0x1c0>)
  406b70:	42bd      	cmp	r5, r7
  406b72:	4403      	add	r3, r0
  406b74:	d040      	beq.n	406bf8 <_free_r+0x15c>
  406b76:	68d0      	ldr	r0, [r2, #12]
  406b78:	60e8      	str	r0, [r5, #12]
  406b7a:	f043 0201 	orr.w	r2, r3, #1
  406b7e:	6085      	str	r5, [r0, #8]
  406b80:	6062      	str	r2, [r4, #4]
  406b82:	50e3      	str	r3, [r4, r3]
  406b84:	e7b7      	b.n	406af6 <_free_r+0x5a>
  406b86:	07ff      	lsls	r7, r7, #31
  406b88:	4403      	add	r3, r0
  406b8a:	d407      	bmi.n	406b9c <_free_r+0x100>
  406b8c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406b90:	1aa4      	subs	r4, r4, r2
  406b92:	4413      	add	r3, r2
  406b94:	68a0      	ldr	r0, [r4, #8]
  406b96:	68e2      	ldr	r2, [r4, #12]
  406b98:	60c2      	str	r2, [r0, #12]
  406b9a:	6090      	str	r0, [r2, #8]
  406b9c:	4a30      	ldr	r2, [pc, #192]	; (406c60 <_free_r+0x1c4>)
  406b9e:	6812      	ldr	r2, [r2, #0]
  406ba0:	f043 0001 	orr.w	r0, r3, #1
  406ba4:	4293      	cmp	r3, r2
  406ba6:	6060      	str	r0, [r4, #4]
  406ba8:	608c      	str	r4, [r1, #8]
  406baa:	d3b9      	bcc.n	406b20 <_free_r+0x84>
  406bac:	4b2d      	ldr	r3, [pc, #180]	; (406c64 <_free_r+0x1c8>)
  406bae:	4640      	mov	r0, r8
  406bb0:	6819      	ldr	r1, [r3, #0]
  406bb2:	f7ff ff23 	bl	4069fc <_malloc_trim_r>
  406bb6:	e7b3      	b.n	406b20 <_free_r+0x84>
  406bb8:	4610      	mov	r0, r2
  406bba:	e7cd      	b.n	406b58 <_free_r+0xbc>
  406bbc:	1811      	adds	r1, r2, r0
  406bbe:	6849      	ldr	r1, [r1, #4]
  406bc0:	07c9      	lsls	r1, r1, #31
  406bc2:	d444      	bmi.n	406c4e <_free_r+0x1b2>
  406bc4:	6891      	ldr	r1, [r2, #8]
  406bc6:	68d2      	ldr	r2, [r2, #12]
  406bc8:	60ca      	str	r2, [r1, #12]
  406bca:	4403      	add	r3, r0
  406bcc:	f043 0001 	orr.w	r0, r3, #1
  406bd0:	6091      	str	r1, [r2, #8]
  406bd2:	6060      	str	r0, [r4, #4]
  406bd4:	50e3      	str	r3, [r4, r3]
  406bd6:	e7a3      	b.n	406b20 <_free_r+0x84>
  406bd8:	2a14      	cmp	r2, #20
  406bda:	d816      	bhi.n	406c0a <_free_r+0x16e>
  406bdc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406be0:	00ff      	lsls	r7, r7, #3
  406be2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406be6:	e7aa      	b.n	406b3e <_free_r+0xa2>
  406be8:	10aa      	asrs	r2, r5, #2
  406bea:	2301      	movs	r3, #1
  406bec:	684d      	ldr	r5, [r1, #4]
  406bee:	4093      	lsls	r3, r2
  406bf0:	432b      	orrs	r3, r5
  406bf2:	604b      	str	r3, [r1, #4]
  406bf4:	4603      	mov	r3, r0
  406bf6:	e7b0      	b.n	406b5a <_free_r+0xbe>
  406bf8:	f043 0201 	orr.w	r2, r3, #1
  406bfc:	614c      	str	r4, [r1, #20]
  406bfe:	610c      	str	r4, [r1, #16]
  406c00:	60e5      	str	r5, [r4, #12]
  406c02:	60a5      	str	r5, [r4, #8]
  406c04:	6062      	str	r2, [r4, #4]
  406c06:	50e3      	str	r3, [r4, r3]
  406c08:	e78a      	b.n	406b20 <_free_r+0x84>
  406c0a:	2a54      	cmp	r2, #84	; 0x54
  406c0c:	d806      	bhi.n	406c1c <_free_r+0x180>
  406c0e:	0b1a      	lsrs	r2, r3, #12
  406c10:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406c14:	00ff      	lsls	r7, r7, #3
  406c16:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406c1a:	e790      	b.n	406b3e <_free_r+0xa2>
  406c1c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406c20:	d806      	bhi.n	406c30 <_free_r+0x194>
  406c22:	0bda      	lsrs	r2, r3, #15
  406c24:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406c28:	00ff      	lsls	r7, r7, #3
  406c2a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406c2e:	e786      	b.n	406b3e <_free_r+0xa2>
  406c30:	f240 5054 	movw	r0, #1364	; 0x554
  406c34:	4282      	cmp	r2, r0
  406c36:	d806      	bhi.n	406c46 <_free_r+0x1aa>
  406c38:	0c9a      	lsrs	r2, r3, #18
  406c3a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406c3e:	00ff      	lsls	r7, r7, #3
  406c40:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406c44:	e77b      	b.n	406b3e <_free_r+0xa2>
  406c46:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406c4a:	257e      	movs	r5, #126	; 0x7e
  406c4c:	e777      	b.n	406b3e <_free_r+0xa2>
  406c4e:	f043 0101 	orr.w	r1, r3, #1
  406c52:	6061      	str	r1, [r4, #4]
  406c54:	6013      	str	r3, [r2, #0]
  406c56:	e763      	b.n	406b20 <_free_r+0x84>
  406c58:	2040043c 	.word	0x2040043c
  406c5c:	20400444 	.word	0x20400444
  406c60:	20400848 	.word	0x20400848
  406c64:	20400e3c 	.word	0x20400e3c

00406c68 <__ascii_mbtowc>:
  406c68:	b082      	sub	sp, #8
  406c6a:	b149      	cbz	r1, 406c80 <__ascii_mbtowc+0x18>
  406c6c:	b15a      	cbz	r2, 406c86 <__ascii_mbtowc+0x1e>
  406c6e:	b16b      	cbz	r3, 406c8c <__ascii_mbtowc+0x24>
  406c70:	7813      	ldrb	r3, [r2, #0]
  406c72:	600b      	str	r3, [r1, #0]
  406c74:	7812      	ldrb	r2, [r2, #0]
  406c76:	1c10      	adds	r0, r2, #0
  406c78:	bf18      	it	ne
  406c7a:	2001      	movne	r0, #1
  406c7c:	b002      	add	sp, #8
  406c7e:	4770      	bx	lr
  406c80:	a901      	add	r1, sp, #4
  406c82:	2a00      	cmp	r2, #0
  406c84:	d1f3      	bne.n	406c6e <__ascii_mbtowc+0x6>
  406c86:	4610      	mov	r0, r2
  406c88:	b002      	add	sp, #8
  406c8a:	4770      	bx	lr
  406c8c:	f06f 0001 	mvn.w	r0, #1
  406c90:	e7f4      	b.n	406c7c <__ascii_mbtowc+0x14>
  406c92:	bf00      	nop

00406c94 <memmove>:
  406c94:	4288      	cmp	r0, r1
  406c96:	b5f0      	push	{r4, r5, r6, r7, lr}
  406c98:	d90d      	bls.n	406cb6 <memmove+0x22>
  406c9a:	188b      	adds	r3, r1, r2
  406c9c:	4298      	cmp	r0, r3
  406c9e:	d20a      	bcs.n	406cb6 <memmove+0x22>
  406ca0:	1884      	adds	r4, r0, r2
  406ca2:	2a00      	cmp	r2, #0
  406ca4:	d051      	beq.n	406d4a <memmove+0xb6>
  406ca6:	4622      	mov	r2, r4
  406ca8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406cac:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406cb0:	4299      	cmp	r1, r3
  406cb2:	d1f9      	bne.n	406ca8 <memmove+0x14>
  406cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406cb6:	2a0f      	cmp	r2, #15
  406cb8:	d948      	bls.n	406d4c <memmove+0xb8>
  406cba:	ea41 0300 	orr.w	r3, r1, r0
  406cbe:	079b      	lsls	r3, r3, #30
  406cc0:	d146      	bne.n	406d50 <memmove+0xbc>
  406cc2:	f100 0410 	add.w	r4, r0, #16
  406cc6:	f101 0310 	add.w	r3, r1, #16
  406cca:	4615      	mov	r5, r2
  406ccc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406cd0:	f844 6c10 	str.w	r6, [r4, #-16]
  406cd4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406cd8:	f844 6c0c 	str.w	r6, [r4, #-12]
  406cdc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406ce0:	f844 6c08 	str.w	r6, [r4, #-8]
  406ce4:	3d10      	subs	r5, #16
  406ce6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406cea:	f844 6c04 	str.w	r6, [r4, #-4]
  406cee:	2d0f      	cmp	r5, #15
  406cf0:	f103 0310 	add.w	r3, r3, #16
  406cf4:	f104 0410 	add.w	r4, r4, #16
  406cf8:	d8e8      	bhi.n	406ccc <memmove+0x38>
  406cfa:	f1a2 0310 	sub.w	r3, r2, #16
  406cfe:	f023 030f 	bic.w	r3, r3, #15
  406d02:	f002 0e0f 	and.w	lr, r2, #15
  406d06:	3310      	adds	r3, #16
  406d08:	f1be 0f03 	cmp.w	lr, #3
  406d0c:	4419      	add	r1, r3
  406d0e:	4403      	add	r3, r0
  406d10:	d921      	bls.n	406d56 <memmove+0xc2>
  406d12:	1f1e      	subs	r6, r3, #4
  406d14:	460d      	mov	r5, r1
  406d16:	4674      	mov	r4, lr
  406d18:	3c04      	subs	r4, #4
  406d1a:	f855 7b04 	ldr.w	r7, [r5], #4
  406d1e:	f846 7f04 	str.w	r7, [r6, #4]!
  406d22:	2c03      	cmp	r4, #3
  406d24:	d8f8      	bhi.n	406d18 <memmove+0x84>
  406d26:	f1ae 0404 	sub.w	r4, lr, #4
  406d2a:	f024 0403 	bic.w	r4, r4, #3
  406d2e:	3404      	adds	r4, #4
  406d30:	4421      	add	r1, r4
  406d32:	4423      	add	r3, r4
  406d34:	f002 0203 	and.w	r2, r2, #3
  406d38:	b162      	cbz	r2, 406d54 <memmove+0xc0>
  406d3a:	3b01      	subs	r3, #1
  406d3c:	440a      	add	r2, r1
  406d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
  406d42:	f803 4f01 	strb.w	r4, [r3, #1]!
  406d46:	428a      	cmp	r2, r1
  406d48:	d1f9      	bne.n	406d3e <memmove+0xaa>
  406d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d4c:	4603      	mov	r3, r0
  406d4e:	e7f3      	b.n	406d38 <memmove+0xa4>
  406d50:	4603      	mov	r3, r0
  406d52:	e7f2      	b.n	406d3a <memmove+0xa6>
  406d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d56:	4672      	mov	r2, lr
  406d58:	e7ee      	b.n	406d38 <memmove+0xa4>
  406d5a:	bf00      	nop

00406d5c <_realloc_r>:
  406d5c:	2900      	cmp	r1, #0
  406d5e:	f000 8095 	beq.w	406e8c <_realloc_r+0x130>
  406d62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d66:	460d      	mov	r5, r1
  406d68:	4616      	mov	r6, r2
  406d6a:	b083      	sub	sp, #12
  406d6c:	4680      	mov	r8, r0
  406d6e:	f106 070b 	add.w	r7, r6, #11
  406d72:	f7ff f9a7 	bl	4060c4 <__malloc_lock>
  406d76:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406d7a:	2f16      	cmp	r7, #22
  406d7c:	f02e 0403 	bic.w	r4, lr, #3
  406d80:	f1a5 0908 	sub.w	r9, r5, #8
  406d84:	d83c      	bhi.n	406e00 <_realloc_r+0xa4>
  406d86:	2210      	movs	r2, #16
  406d88:	4617      	mov	r7, r2
  406d8a:	42be      	cmp	r6, r7
  406d8c:	d83d      	bhi.n	406e0a <_realloc_r+0xae>
  406d8e:	4294      	cmp	r4, r2
  406d90:	da43      	bge.n	406e1a <_realloc_r+0xbe>
  406d92:	4bc4      	ldr	r3, [pc, #784]	; (4070a4 <_realloc_r+0x348>)
  406d94:	6899      	ldr	r1, [r3, #8]
  406d96:	eb09 0004 	add.w	r0, r9, r4
  406d9a:	4288      	cmp	r0, r1
  406d9c:	f000 80b4 	beq.w	406f08 <_realloc_r+0x1ac>
  406da0:	6843      	ldr	r3, [r0, #4]
  406da2:	f023 0101 	bic.w	r1, r3, #1
  406da6:	4401      	add	r1, r0
  406da8:	6849      	ldr	r1, [r1, #4]
  406daa:	07c9      	lsls	r1, r1, #31
  406dac:	d54c      	bpl.n	406e48 <_realloc_r+0xec>
  406dae:	f01e 0f01 	tst.w	lr, #1
  406db2:	f000 809b 	beq.w	406eec <_realloc_r+0x190>
  406db6:	4631      	mov	r1, r6
  406db8:	4640      	mov	r0, r8
  406dba:	f7fe fde7 	bl	40598c <_malloc_r>
  406dbe:	4606      	mov	r6, r0
  406dc0:	2800      	cmp	r0, #0
  406dc2:	d03a      	beq.n	406e3a <_realloc_r+0xde>
  406dc4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406dc8:	f023 0301 	bic.w	r3, r3, #1
  406dcc:	444b      	add	r3, r9
  406dce:	f1a0 0208 	sub.w	r2, r0, #8
  406dd2:	429a      	cmp	r2, r3
  406dd4:	f000 8121 	beq.w	40701a <_realloc_r+0x2be>
  406dd8:	1f22      	subs	r2, r4, #4
  406dda:	2a24      	cmp	r2, #36	; 0x24
  406ddc:	f200 8107 	bhi.w	406fee <_realloc_r+0x292>
  406de0:	2a13      	cmp	r2, #19
  406de2:	f200 80db 	bhi.w	406f9c <_realloc_r+0x240>
  406de6:	4603      	mov	r3, r0
  406de8:	462a      	mov	r2, r5
  406dea:	6811      	ldr	r1, [r2, #0]
  406dec:	6019      	str	r1, [r3, #0]
  406dee:	6851      	ldr	r1, [r2, #4]
  406df0:	6059      	str	r1, [r3, #4]
  406df2:	6892      	ldr	r2, [r2, #8]
  406df4:	609a      	str	r2, [r3, #8]
  406df6:	4629      	mov	r1, r5
  406df8:	4640      	mov	r0, r8
  406dfa:	f7ff fe4f 	bl	406a9c <_free_r>
  406dfe:	e01c      	b.n	406e3a <_realloc_r+0xde>
  406e00:	f027 0707 	bic.w	r7, r7, #7
  406e04:	2f00      	cmp	r7, #0
  406e06:	463a      	mov	r2, r7
  406e08:	dabf      	bge.n	406d8a <_realloc_r+0x2e>
  406e0a:	2600      	movs	r6, #0
  406e0c:	230c      	movs	r3, #12
  406e0e:	4630      	mov	r0, r6
  406e10:	f8c8 3000 	str.w	r3, [r8]
  406e14:	b003      	add	sp, #12
  406e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e1a:	462e      	mov	r6, r5
  406e1c:	1be3      	subs	r3, r4, r7
  406e1e:	2b0f      	cmp	r3, #15
  406e20:	d81e      	bhi.n	406e60 <_realloc_r+0x104>
  406e22:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406e26:	f003 0301 	and.w	r3, r3, #1
  406e2a:	4323      	orrs	r3, r4
  406e2c:	444c      	add	r4, r9
  406e2e:	f8c9 3004 	str.w	r3, [r9, #4]
  406e32:	6863      	ldr	r3, [r4, #4]
  406e34:	f043 0301 	orr.w	r3, r3, #1
  406e38:	6063      	str	r3, [r4, #4]
  406e3a:	4640      	mov	r0, r8
  406e3c:	f7ff f948 	bl	4060d0 <__malloc_unlock>
  406e40:	4630      	mov	r0, r6
  406e42:	b003      	add	sp, #12
  406e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e48:	f023 0303 	bic.w	r3, r3, #3
  406e4c:	18e1      	adds	r1, r4, r3
  406e4e:	4291      	cmp	r1, r2
  406e50:	db1f      	blt.n	406e92 <_realloc_r+0x136>
  406e52:	68c3      	ldr	r3, [r0, #12]
  406e54:	6882      	ldr	r2, [r0, #8]
  406e56:	462e      	mov	r6, r5
  406e58:	60d3      	str	r3, [r2, #12]
  406e5a:	460c      	mov	r4, r1
  406e5c:	609a      	str	r2, [r3, #8]
  406e5e:	e7dd      	b.n	406e1c <_realloc_r+0xc0>
  406e60:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406e64:	eb09 0107 	add.w	r1, r9, r7
  406e68:	f002 0201 	and.w	r2, r2, #1
  406e6c:	444c      	add	r4, r9
  406e6e:	f043 0301 	orr.w	r3, r3, #1
  406e72:	4317      	orrs	r7, r2
  406e74:	f8c9 7004 	str.w	r7, [r9, #4]
  406e78:	604b      	str	r3, [r1, #4]
  406e7a:	6863      	ldr	r3, [r4, #4]
  406e7c:	f043 0301 	orr.w	r3, r3, #1
  406e80:	3108      	adds	r1, #8
  406e82:	6063      	str	r3, [r4, #4]
  406e84:	4640      	mov	r0, r8
  406e86:	f7ff fe09 	bl	406a9c <_free_r>
  406e8a:	e7d6      	b.n	406e3a <_realloc_r+0xde>
  406e8c:	4611      	mov	r1, r2
  406e8e:	f7fe bd7d 	b.w	40598c <_malloc_r>
  406e92:	f01e 0f01 	tst.w	lr, #1
  406e96:	d18e      	bne.n	406db6 <_realloc_r+0x5a>
  406e98:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406e9c:	eba9 0a01 	sub.w	sl, r9, r1
  406ea0:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ea4:	f021 0103 	bic.w	r1, r1, #3
  406ea8:	440b      	add	r3, r1
  406eaa:	4423      	add	r3, r4
  406eac:	4293      	cmp	r3, r2
  406eae:	db25      	blt.n	406efc <_realloc_r+0x1a0>
  406eb0:	68c2      	ldr	r2, [r0, #12]
  406eb2:	6881      	ldr	r1, [r0, #8]
  406eb4:	4656      	mov	r6, sl
  406eb6:	60ca      	str	r2, [r1, #12]
  406eb8:	6091      	str	r1, [r2, #8]
  406eba:	f8da 100c 	ldr.w	r1, [sl, #12]
  406ebe:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406ec2:	1f22      	subs	r2, r4, #4
  406ec4:	2a24      	cmp	r2, #36	; 0x24
  406ec6:	60c1      	str	r1, [r0, #12]
  406ec8:	6088      	str	r0, [r1, #8]
  406eca:	f200 8094 	bhi.w	406ff6 <_realloc_r+0x29a>
  406ece:	2a13      	cmp	r2, #19
  406ed0:	d96f      	bls.n	406fb2 <_realloc_r+0x256>
  406ed2:	6829      	ldr	r1, [r5, #0]
  406ed4:	f8ca 1008 	str.w	r1, [sl, #8]
  406ed8:	6869      	ldr	r1, [r5, #4]
  406eda:	f8ca 100c 	str.w	r1, [sl, #12]
  406ede:	2a1b      	cmp	r2, #27
  406ee0:	f200 80a2 	bhi.w	407028 <_realloc_r+0x2cc>
  406ee4:	3508      	adds	r5, #8
  406ee6:	f10a 0210 	add.w	r2, sl, #16
  406eea:	e063      	b.n	406fb4 <_realloc_r+0x258>
  406eec:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406ef0:	eba9 0a03 	sub.w	sl, r9, r3
  406ef4:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ef8:	f021 0103 	bic.w	r1, r1, #3
  406efc:	1863      	adds	r3, r4, r1
  406efe:	4293      	cmp	r3, r2
  406f00:	f6ff af59 	blt.w	406db6 <_realloc_r+0x5a>
  406f04:	4656      	mov	r6, sl
  406f06:	e7d8      	b.n	406eba <_realloc_r+0x15e>
  406f08:	6841      	ldr	r1, [r0, #4]
  406f0a:	f021 0b03 	bic.w	fp, r1, #3
  406f0e:	44a3      	add	fp, r4
  406f10:	f107 0010 	add.w	r0, r7, #16
  406f14:	4583      	cmp	fp, r0
  406f16:	da56      	bge.n	406fc6 <_realloc_r+0x26a>
  406f18:	f01e 0f01 	tst.w	lr, #1
  406f1c:	f47f af4b 	bne.w	406db6 <_realloc_r+0x5a>
  406f20:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406f24:	eba9 0a01 	sub.w	sl, r9, r1
  406f28:	f8da 1004 	ldr.w	r1, [sl, #4]
  406f2c:	f021 0103 	bic.w	r1, r1, #3
  406f30:	448b      	add	fp, r1
  406f32:	4558      	cmp	r0, fp
  406f34:	dce2      	bgt.n	406efc <_realloc_r+0x1a0>
  406f36:	4656      	mov	r6, sl
  406f38:	f8da 100c 	ldr.w	r1, [sl, #12]
  406f3c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406f40:	1f22      	subs	r2, r4, #4
  406f42:	2a24      	cmp	r2, #36	; 0x24
  406f44:	60c1      	str	r1, [r0, #12]
  406f46:	6088      	str	r0, [r1, #8]
  406f48:	f200 808f 	bhi.w	40706a <_realloc_r+0x30e>
  406f4c:	2a13      	cmp	r2, #19
  406f4e:	f240 808a 	bls.w	407066 <_realloc_r+0x30a>
  406f52:	6829      	ldr	r1, [r5, #0]
  406f54:	f8ca 1008 	str.w	r1, [sl, #8]
  406f58:	6869      	ldr	r1, [r5, #4]
  406f5a:	f8ca 100c 	str.w	r1, [sl, #12]
  406f5e:	2a1b      	cmp	r2, #27
  406f60:	f200 808a 	bhi.w	407078 <_realloc_r+0x31c>
  406f64:	3508      	adds	r5, #8
  406f66:	f10a 0210 	add.w	r2, sl, #16
  406f6a:	6829      	ldr	r1, [r5, #0]
  406f6c:	6011      	str	r1, [r2, #0]
  406f6e:	6869      	ldr	r1, [r5, #4]
  406f70:	6051      	str	r1, [r2, #4]
  406f72:	68a9      	ldr	r1, [r5, #8]
  406f74:	6091      	str	r1, [r2, #8]
  406f76:	eb0a 0107 	add.w	r1, sl, r7
  406f7a:	ebab 0207 	sub.w	r2, fp, r7
  406f7e:	f042 0201 	orr.w	r2, r2, #1
  406f82:	6099      	str	r1, [r3, #8]
  406f84:	604a      	str	r2, [r1, #4]
  406f86:	f8da 3004 	ldr.w	r3, [sl, #4]
  406f8a:	f003 0301 	and.w	r3, r3, #1
  406f8e:	431f      	orrs	r7, r3
  406f90:	4640      	mov	r0, r8
  406f92:	f8ca 7004 	str.w	r7, [sl, #4]
  406f96:	f7ff f89b 	bl	4060d0 <__malloc_unlock>
  406f9a:	e751      	b.n	406e40 <_realloc_r+0xe4>
  406f9c:	682b      	ldr	r3, [r5, #0]
  406f9e:	6003      	str	r3, [r0, #0]
  406fa0:	686b      	ldr	r3, [r5, #4]
  406fa2:	6043      	str	r3, [r0, #4]
  406fa4:	2a1b      	cmp	r2, #27
  406fa6:	d82d      	bhi.n	407004 <_realloc_r+0x2a8>
  406fa8:	f100 0308 	add.w	r3, r0, #8
  406fac:	f105 0208 	add.w	r2, r5, #8
  406fb0:	e71b      	b.n	406dea <_realloc_r+0x8e>
  406fb2:	4632      	mov	r2, r6
  406fb4:	6829      	ldr	r1, [r5, #0]
  406fb6:	6011      	str	r1, [r2, #0]
  406fb8:	6869      	ldr	r1, [r5, #4]
  406fba:	6051      	str	r1, [r2, #4]
  406fbc:	68a9      	ldr	r1, [r5, #8]
  406fbe:	6091      	str	r1, [r2, #8]
  406fc0:	461c      	mov	r4, r3
  406fc2:	46d1      	mov	r9, sl
  406fc4:	e72a      	b.n	406e1c <_realloc_r+0xc0>
  406fc6:	eb09 0107 	add.w	r1, r9, r7
  406fca:	ebab 0b07 	sub.w	fp, fp, r7
  406fce:	f04b 0201 	orr.w	r2, fp, #1
  406fd2:	6099      	str	r1, [r3, #8]
  406fd4:	604a      	str	r2, [r1, #4]
  406fd6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406fda:	f003 0301 	and.w	r3, r3, #1
  406fde:	431f      	orrs	r7, r3
  406fe0:	4640      	mov	r0, r8
  406fe2:	f845 7c04 	str.w	r7, [r5, #-4]
  406fe6:	f7ff f873 	bl	4060d0 <__malloc_unlock>
  406fea:	462e      	mov	r6, r5
  406fec:	e728      	b.n	406e40 <_realloc_r+0xe4>
  406fee:	4629      	mov	r1, r5
  406ff0:	f7ff fe50 	bl	406c94 <memmove>
  406ff4:	e6ff      	b.n	406df6 <_realloc_r+0x9a>
  406ff6:	4629      	mov	r1, r5
  406ff8:	4630      	mov	r0, r6
  406ffa:	461c      	mov	r4, r3
  406ffc:	46d1      	mov	r9, sl
  406ffe:	f7ff fe49 	bl	406c94 <memmove>
  407002:	e70b      	b.n	406e1c <_realloc_r+0xc0>
  407004:	68ab      	ldr	r3, [r5, #8]
  407006:	6083      	str	r3, [r0, #8]
  407008:	68eb      	ldr	r3, [r5, #12]
  40700a:	60c3      	str	r3, [r0, #12]
  40700c:	2a24      	cmp	r2, #36	; 0x24
  40700e:	d017      	beq.n	407040 <_realloc_r+0x2e4>
  407010:	f100 0310 	add.w	r3, r0, #16
  407014:	f105 0210 	add.w	r2, r5, #16
  407018:	e6e7      	b.n	406dea <_realloc_r+0x8e>
  40701a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40701e:	f023 0303 	bic.w	r3, r3, #3
  407022:	441c      	add	r4, r3
  407024:	462e      	mov	r6, r5
  407026:	e6f9      	b.n	406e1c <_realloc_r+0xc0>
  407028:	68a9      	ldr	r1, [r5, #8]
  40702a:	f8ca 1010 	str.w	r1, [sl, #16]
  40702e:	68e9      	ldr	r1, [r5, #12]
  407030:	f8ca 1014 	str.w	r1, [sl, #20]
  407034:	2a24      	cmp	r2, #36	; 0x24
  407036:	d00c      	beq.n	407052 <_realloc_r+0x2f6>
  407038:	3510      	adds	r5, #16
  40703a:	f10a 0218 	add.w	r2, sl, #24
  40703e:	e7b9      	b.n	406fb4 <_realloc_r+0x258>
  407040:	692b      	ldr	r3, [r5, #16]
  407042:	6103      	str	r3, [r0, #16]
  407044:	696b      	ldr	r3, [r5, #20]
  407046:	6143      	str	r3, [r0, #20]
  407048:	f105 0218 	add.w	r2, r5, #24
  40704c:	f100 0318 	add.w	r3, r0, #24
  407050:	e6cb      	b.n	406dea <_realloc_r+0x8e>
  407052:	692a      	ldr	r2, [r5, #16]
  407054:	f8ca 2018 	str.w	r2, [sl, #24]
  407058:	696a      	ldr	r2, [r5, #20]
  40705a:	f8ca 201c 	str.w	r2, [sl, #28]
  40705e:	3518      	adds	r5, #24
  407060:	f10a 0220 	add.w	r2, sl, #32
  407064:	e7a6      	b.n	406fb4 <_realloc_r+0x258>
  407066:	4632      	mov	r2, r6
  407068:	e77f      	b.n	406f6a <_realloc_r+0x20e>
  40706a:	4629      	mov	r1, r5
  40706c:	4630      	mov	r0, r6
  40706e:	9301      	str	r3, [sp, #4]
  407070:	f7ff fe10 	bl	406c94 <memmove>
  407074:	9b01      	ldr	r3, [sp, #4]
  407076:	e77e      	b.n	406f76 <_realloc_r+0x21a>
  407078:	68a9      	ldr	r1, [r5, #8]
  40707a:	f8ca 1010 	str.w	r1, [sl, #16]
  40707e:	68e9      	ldr	r1, [r5, #12]
  407080:	f8ca 1014 	str.w	r1, [sl, #20]
  407084:	2a24      	cmp	r2, #36	; 0x24
  407086:	d003      	beq.n	407090 <_realloc_r+0x334>
  407088:	3510      	adds	r5, #16
  40708a:	f10a 0218 	add.w	r2, sl, #24
  40708e:	e76c      	b.n	406f6a <_realloc_r+0x20e>
  407090:	692a      	ldr	r2, [r5, #16]
  407092:	f8ca 2018 	str.w	r2, [sl, #24]
  407096:	696a      	ldr	r2, [r5, #20]
  407098:	f8ca 201c 	str.w	r2, [sl, #28]
  40709c:	3518      	adds	r5, #24
  40709e:	f10a 0220 	add.w	r2, sl, #32
  4070a2:	e762      	b.n	406f6a <_realloc_r+0x20e>
  4070a4:	2040043c 	.word	0x2040043c

004070a8 <__ascii_wctomb>:
  4070a8:	b121      	cbz	r1, 4070b4 <__ascii_wctomb+0xc>
  4070aa:	2aff      	cmp	r2, #255	; 0xff
  4070ac:	d804      	bhi.n	4070b8 <__ascii_wctomb+0x10>
  4070ae:	700a      	strb	r2, [r1, #0]
  4070b0:	2001      	movs	r0, #1
  4070b2:	4770      	bx	lr
  4070b4:	4608      	mov	r0, r1
  4070b6:	4770      	bx	lr
  4070b8:	238a      	movs	r3, #138	; 0x8a
  4070ba:	6003      	str	r3, [r0, #0]
  4070bc:	f04f 30ff 	mov.w	r0, #4294967295
  4070c0:	4770      	bx	lr
  4070c2:	bf00      	nop

004070c4 <__gedf2>:
  4070c4:	f04f 3cff 	mov.w	ip, #4294967295
  4070c8:	e006      	b.n	4070d8 <__cmpdf2+0x4>
  4070ca:	bf00      	nop

004070cc <__ledf2>:
  4070cc:	f04f 0c01 	mov.w	ip, #1
  4070d0:	e002      	b.n	4070d8 <__cmpdf2+0x4>
  4070d2:	bf00      	nop

004070d4 <__cmpdf2>:
  4070d4:	f04f 0c01 	mov.w	ip, #1
  4070d8:	f84d cd04 	str.w	ip, [sp, #-4]!
  4070dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4070e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4070e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4070e8:	bf18      	it	ne
  4070ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4070ee:	d01b      	beq.n	407128 <__cmpdf2+0x54>
  4070f0:	b001      	add	sp, #4
  4070f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4070f6:	bf0c      	ite	eq
  4070f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4070fc:	ea91 0f03 	teqne	r1, r3
  407100:	bf02      	ittt	eq
  407102:	ea90 0f02 	teqeq	r0, r2
  407106:	2000      	moveq	r0, #0
  407108:	4770      	bxeq	lr
  40710a:	f110 0f00 	cmn.w	r0, #0
  40710e:	ea91 0f03 	teq	r1, r3
  407112:	bf58      	it	pl
  407114:	4299      	cmppl	r1, r3
  407116:	bf08      	it	eq
  407118:	4290      	cmpeq	r0, r2
  40711a:	bf2c      	ite	cs
  40711c:	17d8      	asrcs	r0, r3, #31
  40711e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407122:	f040 0001 	orr.w	r0, r0, #1
  407126:	4770      	bx	lr
  407128:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40712c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407130:	d102      	bne.n	407138 <__cmpdf2+0x64>
  407132:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407136:	d107      	bne.n	407148 <__cmpdf2+0x74>
  407138:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40713c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407140:	d1d6      	bne.n	4070f0 <__cmpdf2+0x1c>
  407142:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407146:	d0d3      	beq.n	4070f0 <__cmpdf2+0x1c>
  407148:	f85d 0b04 	ldr.w	r0, [sp], #4
  40714c:	4770      	bx	lr
  40714e:	bf00      	nop

00407150 <__aeabi_cdrcmple>:
  407150:	4684      	mov	ip, r0
  407152:	4610      	mov	r0, r2
  407154:	4662      	mov	r2, ip
  407156:	468c      	mov	ip, r1
  407158:	4619      	mov	r1, r3
  40715a:	4663      	mov	r3, ip
  40715c:	e000      	b.n	407160 <__aeabi_cdcmpeq>
  40715e:	bf00      	nop

00407160 <__aeabi_cdcmpeq>:
  407160:	b501      	push	{r0, lr}
  407162:	f7ff ffb7 	bl	4070d4 <__cmpdf2>
  407166:	2800      	cmp	r0, #0
  407168:	bf48      	it	mi
  40716a:	f110 0f00 	cmnmi.w	r0, #0
  40716e:	bd01      	pop	{r0, pc}

00407170 <__aeabi_dcmpeq>:
  407170:	f84d ed08 	str.w	lr, [sp, #-8]!
  407174:	f7ff fff4 	bl	407160 <__aeabi_cdcmpeq>
  407178:	bf0c      	ite	eq
  40717a:	2001      	moveq	r0, #1
  40717c:	2000      	movne	r0, #0
  40717e:	f85d fb08 	ldr.w	pc, [sp], #8
  407182:	bf00      	nop

00407184 <__aeabi_dcmplt>:
  407184:	f84d ed08 	str.w	lr, [sp, #-8]!
  407188:	f7ff ffea 	bl	407160 <__aeabi_cdcmpeq>
  40718c:	bf34      	ite	cc
  40718e:	2001      	movcc	r0, #1
  407190:	2000      	movcs	r0, #0
  407192:	f85d fb08 	ldr.w	pc, [sp], #8
  407196:	bf00      	nop

00407198 <__aeabi_dcmple>:
  407198:	f84d ed08 	str.w	lr, [sp, #-8]!
  40719c:	f7ff ffe0 	bl	407160 <__aeabi_cdcmpeq>
  4071a0:	bf94      	ite	ls
  4071a2:	2001      	movls	r0, #1
  4071a4:	2000      	movhi	r0, #0
  4071a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4071aa:	bf00      	nop

004071ac <__aeabi_dcmpge>:
  4071ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4071b0:	f7ff ffce 	bl	407150 <__aeabi_cdrcmple>
  4071b4:	bf94      	ite	ls
  4071b6:	2001      	movls	r0, #1
  4071b8:	2000      	movhi	r0, #0
  4071ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4071be:	bf00      	nop

004071c0 <__aeabi_dcmpgt>:
  4071c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4071c4:	f7ff ffc4 	bl	407150 <__aeabi_cdrcmple>
  4071c8:	bf34      	ite	cc
  4071ca:	2001      	movcc	r0, #1
  4071cc:	2000      	movcs	r0, #0
  4071ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4071d2:	bf00      	nop

004071d4 <__aeabi_dcmpun>:
  4071d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4071d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4071dc:	d102      	bne.n	4071e4 <__aeabi_dcmpun+0x10>
  4071de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4071e2:	d10a      	bne.n	4071fa <__aeabi_dcmpun+0x26>
  4071e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4071e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4071ec:	d102      	bne.n	4071f4 <__aeabi_dcmpun+0x20>
  4071ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4071f2:	d102      	bne.n	4071fa <__aeabi_dcmpun+0x26>
  4071f4:	f04f 0000 	mov.w	r0, #0
  4071f8:	4770      	bx	lr
  4071fa:	f04f 0001 	mov.w	r0, #1
  4071fe:	4770      	bx	lr

00407200 <__aeabi_uldivmod>:
  407200:	b953      	cbnz	r3, 407218 <__aeabi_uldivmod+0x18>
  407202:	b94a      	cbnz	r2, 407218 <__aeabi_uldivmod+0x18>
  407204:	2900      	cmp	r1, #0
  407206:	bf08      	it	eq
  407208:	2800      	cmpeq	r0, #0
  40720a:	bf1c      	itt	ne
  40720c:	f04f 31ff 	movne.w	r1, #4294967295
  407210:	f04f 30ff 	movne.w	r0, #4294967295
  407214:	f000 b97a 	b.w	40750c <__aeabi_idiv0>
  407218:	f1ad 0c08 	sub.w	ip, sp, #8
  40721c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407220:	f000 f806 	bl	407230 <__udivmoddi4>
  407224:	f8dd e004 	ldr.w	lr, [sp, #4]
  407228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40722c:	b004      	add	sp, #16
  40722e:	4770      	bx	lr

00407230 <__udivmoddi4>:
  407230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407234:	468c      	mov	ip, r1
  407236:	460d      	mov	r5, r1
  407238:	4604      	mov	r4, r0
  40723a:	9e08      	ldr	r6, [sp, #32]
  40723c:	2b00      	cmp	r3, #0
  40723e:	d151      	bne.n	4072e4 <__udivmoddi4+0xb4>
  407240:	428a      	cmp	r2, r1
  407242:	4617      	mov	r7, r2
  407244:	d96d      	bls.n	407322 <__udivmoddi4+0xf2>
  407246:	fab2 fe82 	clz	lr, r2
  40724a:	f1be 0f00 	cmp.w	lr, #0
  40724e:	d00b      	beq.n	407268 <__udivmoddi4+0x38>
  407250:	f1ce 0c20 	rsb	ip, lr, #32
  407254:	fa01 f50e 	lsl.w	r5, r1, lr
  407258:	fa20 fc0c 	lsr.w	ip, r0, ip
  40725c:	fa02 f70e 	lsl.w	r7, r2, lr
  407260:	ea4c 0c05 	orr.w	ip, ip, r5
  407264:	fa00 f40e 	lsl.w	r4, r0, lr
  407268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40726c:	0c25      	lsrs	r5, r4, #16
  40726e:	fbbc f8fa 	udiv	r8, ip, sl
  407272:	fa1f f987 	uxth.w	r9, r7
  407276:	fb0a cc18 	mls	ip, sl, r8, ip
  40727a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40727e:	fb08 f309 	mul.w	r3, r8, r9
  407282:	42ab      	cmp	r3, r5
  407284:	d90a      	bls.n	40729c <__udivmoddi4+0x6c>
  407286:	19ed      	adds	r5, r5, r7
  407288:	f108 32ff 	add.w	r2, r8, #4294967295
  40728c:	f080 8123 	bcs.w	4074d6 <__udivmoddi4+0x2a6>
  407290:	42ab      	cmp	r3, r5
  407292:	f240 8120 	bls.w	4074d6 <__udivmoddi4+0x2a6>
  407296:	f1a8 0802 	sub.w	r8, r8, #2
  40729a:	443d      	add	r5, r7
  40729c:	1aed      	subs	r5, r5, r3
  40729e:	b2a4      	uxth	r4, r4
  4072a0:	fbb5 f0fa 	udiv	r0, r5, sl
  4072a4:	fb0a 5510 	mls	r5, sl, r0, r5
  4072a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4072ac:	fb00 f909 	mul.w	r9, r0, r9
  4072b0:	45a1      	cmp	r9, r4
  4072b2:	d909      	bls.n	4072c8 <__udivmoddi4+0x98>
  4072b4:	19e4      	adds	r4, r4, r7
  4072b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4072ba:	f080 810a 	bcs.w	4074d2 <__udivmoddi4+0x2a2>
  4072be:	45a1      	cmp	r9, r4
  4072c0:	f240 8107 	bls.w	4074d2 <__udivmoddi4+0x2a2>
  4072c4:	3802      	subs	r0, #2
  4072c6:	443c      	add	r4, r7
  4072c8:	eba4 0409 	sub.w	r4, r4, r9
  4072cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4072d0:	2100      	movs	r1, #0
  4072d2:	2e00      	cmp	r6, #0
  4072d4:	d061      	beq.n	40739a <__udivmoddi4+0x16a>
  4072d6:	fa24 f40e 	lsr.w	r4, r4, lr
  4072da:	2300      	movs	r3, #0
  4072dc:	6034      	str	r4, [r6, #0]
  4072de:	6073      	str	r3, [r6, #4]
  4072e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4072e4:	428b      	cmp	r3, r1
  4072e6:	d907      	bls.n	4072f8 <__udivmoddi4+0xc8>
  4072e8:	2e00      	cmp	r6, #0
  4072ea:	d054      	beq.n	407396 <__udivmoddi4+0x166>
  4072ec:	2100      	movs	r1, #0
  4072ee:	e886 0021 	stmia.w	r6, {r0, r5}
  4072f2:	4608      	mov	r0, r1
  4072f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4072f8:	fab3 f183 	clz	r1, r3
  4072fc:	2900      	cmp	r1, #0
  4072fe:	f040 808e 	bne.w	40741e <__udivmoddi4+0x1ee>
  407302:	42ab      	cmp	r3, r5
  407304:	d302      	bcc.n	40730c <__udivmoddi4+0xdc>
  407306:	4282      	cmp	r2, r0
  407308:	f200 80fa 	bhi.w	407500 <__udivmoddi4+0x2d0>
  40730c:	1a84      	subs	r4, r0, r2
  40730e:	eb65 0503 	sbc.w	r5, r5, r3
  407312:	2001      	movs	r0, #1
  407314:	46ac      	mov	ip, r5
  407316:	2e00      	cmp	r6, #0
  407318:	d03f      	beq.n	40739a <__udivmoddi4+0x16a>
  40731a:	e886 1010 	stmia.w	r6, {r4, ip}
  40731e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407322:	b912      	cbnz	r2, 40732a <__udivmoddi4+0xfa>
  407324:	2701      	movs	r7, #1
  407326:	fbb7 f7f2 	udiv	r7, r7, r2
  40732a:	fab7 fe87 	clz	lr, r7
  40732e:	f1be 0f00 	cmp.w	lr, #0
  407332:	d134      	bne.n	40739e <__udivmoddi4+0x16e>
  407334:	1beb      	subs	r3, r5, r7
  407336:	0c3a      	lsrs	r2, r7, #16
  407338:	fa1f fc87 	uxth.w	ip, r7
  40733c:	2101      	movs	r1, #1
  40733e:	fbb3 f8f2 	udiv	r8, r3, r2
  407342:	0c25      	lsrs	r5, r4, #16
  407344:	fb02 3318 	mls	r3, r2, r8, r3
  407348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40734c:	fb0c f308 	mul.w	r3, ip, r8
  407350:	42ab      	cmp	r3, r5
  407352:	d907      	bls.n	407364 <__udivmoddi4+0x134>
  407354:	19ed      	adds	r5, r5, r7
  407356:	f108 30ff 	add.w	r0, r8, #4294967295
  40735a:	d202      	bcs.n	407362 <__udivmoddi4+0x132>
  40735c:	42ab      	cmp	r3, r5
  40735e:	f200 80d1 	bhi.w	407504 <__udivmoddi4+0x2d4>
  407362:	4680      	mov	r8, r0
  407364:	1aed      	subs	r5, r5, r3
  407366:	b2a3      	uxth	r3, r4
  407368:	fbb5 f0f2 	udiv	r0, r5, r2
  40736c:	fb02 5510 	mls	r5, r2, r0, r5
  407370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  407374:	fb0c fc00 	mul.w	ip, ip, r0
  407378:	45a4      	cmp	ip, r4
  40737a:	d907      	bls.n	40738c <__udivmoddi4+0x15c>
  40737c:	19e4      	adds	r4, r4, r7
  40737e:	f100 33ff 	add.w	r3, r0, #4294967295
  407382:	d202      	bcs.n	40738a <__udivmoddi4+0x15a>
  407384:	45a4      	cmp	ip, r4
  407386:	f200 80b8 	bhi.w	4074fa <__udivmoddi4+0x2ca>
  40738a:	4618      	mov	r0, r3
  40738c:	eba4 040c 	sub.w	r4, r4, ip
  407390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407394:	e79d      	b.n	4072d2 <__udivmoddi4+0xa2>
  407396:	4631      	mov	r1, r6
  407398:	4630      	mov	r0, r6
  40739a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40739e:	f1ce 0420 	rsb	r4, lr, #32
  4073a2:	fa05 f30e 	lsl.w	r3, r5, lr
  4073a6:	fa07 f70e 	lsl.w	r7, r7, lr
  4073aa:	fa20 f804 	lsr.w	r8, r0, r4
  4073ae:	0c3a      	lsrs	r2, r7, #16
  4073b0:	fa25 f404 	lsr.w	r4, r5, r4
  4073b4:	ea48 0803 	orr.w	r8, r8, r3
  4073b8:	fbb4 f1f2 	udiv	r1, r4, r2
  4073bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4073c0:	fb02 4411 	mls	r4, r2, r1, r4
  4073c4:	fa1f fc87 	uxth.w	ip, r7
  4073c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4073cc:	fb01 f30c 	mul.w	r3, r1, ip
  4073d0:	42ab      	cmp	r3, r5
  4073d2:	fa00 f40e 	lsl.w	r4, r0, lr
  4073d6:	d909      	bls.n	4073ec <__udivmoddi4+0x1bc>
  4073d8:	19ed      	adds	r5, r5, r7
  4073da:	f101 30ff 	add.w	r0, r1, #4294967295
  4073de:	f080 808a 	bcs.w	4074f6 <__udivmoddi4+0x2c6>
  4073e2:	42ab      	cmp	r3, r5
  4073e4:	f240 8087 	bls.w	4074f6 <__udivmoddi4+0x2c6>
  4073e8:	3902      	subs	r1, #2
  4073ea:	443d      	add	r5, r7
  4073ec:	1aeb      	subs	r3, r5, r3
  4073ee:	fa1f f588 	uxth.w	r5, r8
  4073f2:	fbb3 f0f2 	udiv	r0, r3, r2
  4073f6:	fb02 3310 	mls	r3, r2, r0, r3
  4073fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4073fe:	fb00 f30c 	mul.w	r3, r0, ip
  407402:	42ab      	cmp	r3, r5
  407404:	d907      	bls.n	407416 <__udivmoddi4+0x1e6>
  407406:	19ed      	adds	r5, r5, r7
  407408:	f100 38ff 	add.w	r8, r0, #4294967295
  40740c:	d26f      	bcs.n	4074ee <__udivmoddi4+0x2be>
  40740e:	42ab      	cmp	r3, r5
  407410:	d96d      	bls.n	4074ee <__udivmoddi4+0x2be>
  407412:	3802      	subs	r0, #2
  407414:	443d      	add	r5, r7
  407416:	1aeb      	subs	r3, r5, r3
  407418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40741c:	e78f      	b.n	40733e <__udivmoddi4+0x10e>
  40741e:	f1c1 0720 	rsb	r7, r1, #32
  407422:	fa22 f807 	lsr.w	r8, r2, r7
  407426:	408b      	lsls	r3, r1
  407428:	fa05 f401 	lsl.w	r4, r5, r1
  40742c:	ea48 0303 	orr.w	r3, r8, r3
  407430:	fa20 fe07 	lsr.w	lr, r0, r7
  407434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407438:	40fd      	lsrs	r5, r7
  40743a:	ea4e 0e04 	orr.w	lr, lr, r4
  40743e:	fbb5 f9fc 	udiv	r9, r5, ip
  407442:	ea4f 441e 	mov.w	r4, lr, lsr #16
  407446:	fb0c 5519 	mls	r5, ip, r9, r5
  40744a:	fa1f f883 	uxth.w	r8, r3
  40744e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  407452:	fb09 f408 	mul.w	r4, r9, r8
  407456:	42ac      	cmp	r4, r5
  407458:	fa02 f201 	lsl.w	r2, r2, r1
  40745c:	fa00 fa01 	lsl.w	sl, r0, r1
  407460:	d908      	bls.n	407474 <__udivmoddi4+0x244>
  407462:	18ed      	adds	r5, r5, r3
  407464:	f109 30ff 	add.w	r0, r9, #4294967295
  407468:	d243      	bcs.n	4074f2 <__udivmoddi4+0x2c2>
  40746a:	42ac      	cmp	r4, r5
  40746c:	d941      	bls.n	4074f2 <__udivmoddi4+0x2c2>
  40746e:	f1a9 0902 	sub.w	r9, r9, #2
  407472:	441d      	add	r5, r3
  407474:	1b2d      	subs	r5, r5, r4
  407476:	fa1f fe8e 	uxth.w	lr, lr
  40747a:	fbb5 f0fc 	udiv	r0, r5, ip
  40747e:	fb0c 5510 	mls	r5, ip, r0, r5
  407482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  407486:	fb00 f808 	mul.w	r8, r0, r8
  40748a:	45a0      	cmp	r8, r4
  40748c:	d907      	bls.n	40749e <__udivmoddi4+0x26e>
  40748e:	18e4      	adds	r4, r4, r3
  407490:	f100 35ff 	add.w	r5, r0, #4294967295
  407494:	d229      	bcs.n	4074ea <__udivmoddi4+0x2ba>
  407496:	45a0      	cmp	r8, r4
  407498:	d927      	bls.n	4074ea <__udivmoddi4+0x2ba>
  40749a:	3802      	subs	r0, #2
  40749c:	441c      	add	r4, r3
  40749e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4074a2:	eba4 0408 	sub.w	r4, r4, r8
  4074a6:	fba0 8902 	umull	r8, r9, r0, r2
  4074aa:	454c      	cmp	r4, r9
  4074ac:	46c6      	mov	lr, r8
  4074ae:	464d      	mov	r5, r9
  4074b0:	d315      	bcc.n	4074de <__udivmoddi4+0x2ae>
  4074b2:	d012      	beq.n	4074da <__udivmoddi4+0x2aa>
  4074b4:	b156      	cbz	r6, 4074cc <__udivmoddi4+0x29c>
  4074b6:	ebba 030e 	subs.w	r3, sl, lr
  4074ba:	eb64 0405 	sbc.w	r4, r4, r5
  4074be:	fa04 f707 	lsl.w	r7, r4, r7
  4074c2:	40cb      	lsrs	r3, r1
  4074c4:	431f      	orrs	r7, r3
  4074c6:	40cc      	lsrs	r4, r1
  4074c8:	6037      	str	r7, [r6, #0]
  4074ca:	6074      	str	r4, [r6, #4]
  4074cc:	2100      	movs	r1, #0
  4074ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4074d2:	4618      	mov	r0, r3
  4074d4:	e6f8      	b.n	4072c8 <__udivmoddi4+0x98>
  4074d6:	4690      	mov	r8, r2
  4074d8:	e6e0      	b.n	40729c <__udivmoddi4+0x6c>
  4074da:	45c2      	cmp	sl, r8
  4074dc:	d2ea      	bcs.n	4074b4 <__udivmoddi4+0x284>
  4074de:	ebb8 0e02 	subs.w	lr, r8, r2
  4074e2:	eb69 0503 	sbc.w	r5, r9, r3
  4074e6:	3801      	subs	r0, #1
  4074e8:	e7e4      	b.n	4074b4 <__udivmoddi4+0x284>
  4074ea:	4628      	mov	r0, r5
  4074ec:	e7d7      	b.n	40749e <__udivmoddi4+0x26e>
  4074ee:	4640      	mov	r0, r8
  4074f0:	e791      	b.n	407416 <__udivmoddi4+0x1e6>
  4074f2:	4681      	mov	r9, r0
  4074f4:	e7be      	b.n	407474 <__udivmoddi4+0x244>
  4074f6:	4601      	mov	r1, r0
  4074f8:	e778      	b.n	4073ec <__udivmoddi4+0x1bc>
  4074fa:	3802      	subs	r0, #2
  4074fc:	443c      	add	r4, r7
  4074fe:	e745      	b.n	40738c <__udivmoddi4+0x15c>
  407500:	4608      	mov	r0, r1
  407502:	e708      	b.n	407316 <__udivmoddi4+0xe6>
  407504:	f1a8 0802 	sub.w	r8, r8, #2
  407508:	443d      	add	r5, r7
  40750a:	e72b      	b.n	407364 <__udivmoddi4+0x134>

0040750c <__aeabi_idiv0>:
  40750c:	4770      	bx	lr
  40750e:	bf00      	nop
  407510:	00006425 	.word	0x00006425

00407514 <_global_impure_ptr>:
  407514:	20400010 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  407524:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  407534:	46454443 00000000 33323130 37363534     CDEF....01234567
  407544:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407554:	0000296c 00000030                       l)..0...

0040755c <blanks.7223>:
  40755c:	20202020 20202020 20202020 20202020                     

0040756c <zeroes.7224>:
  40756c:	30303030 30303030 30303030 30303030     0000000000000000
  40757c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40758c:	00000000                                ....

00407590 <__mprec_bigtens>:
  407590:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4075a0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4075b0:	7f73bf3c 75154fdd                       <.s..O.u

004075b8 <__mprec_tens>:
  4075b8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4075c8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4075d8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4075e8:	00000000 412e8480 00000000 416312d0     .......A......cA
  4075f8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407608:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  407618:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  407628:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  407638:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  407648:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  407658:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  407668:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  407678:	79d99db4 44ea7843                       ...yCx.D

00407680 <p05.6055>:
  407680:	00000005 00000019 0000007d 00000043     ........}...C...
  407690:	49534f50 00000058 0000002e              POSIX.......

0040769c <_ctype_>:
  40769c:	20202000 20202020 28282020 20282828     .         ((((( 
  4076ac:	20202020 20202020 20202020 20202020                     
  4076bc:	10108820 10101010 10101010 10101010      ...............
  4076cc:	04040410 04040404 10040404 10101010     ................
  4076dc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4076ec:	01010101 01010101 01010101 10101010     ................
  4076fc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40770c:	02020202 02020202 02020202 10101010     ................
  40771c:	00000020 00000000 00000000 00000000      ...............
	...

004077a0 <_init>:
  4077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4077a2:	bf00      	nop
  4077a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4077a6:	bc08      	pop	{r3}
  4077a8:	469e      	mov	lr, r3
  4077aa:	4770      	bx	lr

004077ac <__init_array_start>:
  4077ac:	00404995 	.word	0x00404995

004077b0 <__frame_dummy_init_array_entry>:
  4077b0:	0040018d                                ..@.

004077b4 <_fini>:
  4077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4077b6:	bf00      	nop
  4077b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4077ba:	bc08      	pop	{r3}
  4077bc:	469e      	mov	lr, r3
  4077be:	4770      	bx	lr

004077c0 <__fini_array_start>:
  4077c0:	00400169 	.word	0x00400169
